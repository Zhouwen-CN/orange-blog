const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),bt=et(V(JSON.parse("{\"/\":{\"documentCount\":264,\"nextId\":264,\"documentIds\":{\"0\":\"0\",\"1\":\"0#项目地址\",\"2\":\"0#版本信息\",\"3\":\"0#_1-创建-springboot-项目\",\"4\":\"0#_2-mybatis-plus\",\"5\":\"0#_2-2-mysql-数据表准备\",\"6\":\"0#_2-3-创建代码生成工具类\",\"7\":\"0#_2-4-引入-springdoc-openapi\",\"8\":\"0#_2-5-配置数据源\",\"9\":\"0#_3-创建公共的-controller\",\"10\":\"0#_3-1-编写统一响应对象\",\"11\":\"0#_3-2-编写-dml-操作异常类\",\"12\":\"0#_3-3-编写全局处理异常类\",\"13\":\"0#_3-4-编写-base-controller\",\"14\":\"0#_4-修改代码生成模板\",\"15\":\"0#_5-mybatis-plus-分页插件和字段填充\",\"16\":\"0#_6-使用-aspectj-控制事务\",\"17\":\"0#_7-生成多张表增删改查-cean\",\"18\":\"0@0\",\"19\":\"0@1\",\"20\":\"1\",\"21\":\"1#准备资源\",\"22\":\"1#创建虚拟机\",\"23\":\"1#_1-linux-系统安装\",\"24\":\"1#_1-1-日期和时间\",\"25\":\"1#_1-2-磁盘分区\",\"26\":\"1#_1-3-kdump\",\"27\":\"1#_1-4-网络和主机名称\",\"28\":\"1#_1-5-root-密码\",\"29\":\"1#_2-linux-初始化\",\"30\":\"1#_2-1-ip-地址修改\",\"31\":\"1#_2-2-使用-ssh-工具连接虚拟机\",\"32\":\"1#_2-2-一些准备工作\",\"33\":\"1#_2-3-安装-jdk\",\"34\":\"1#_3-拍摄快照\",\"35\":\"1#_4-克隆虚拟机\",\"36\":\"1@0\",\"37\":\"1@1\",\"38\":\"2\",\"39\":\"2#版本信息\",\"40\":\"2#默认端口\",\"41\":\"2#_1-直接使用打包好的镜像\",\"42\":\"2#_1-1-docker-run\",\"43\":\"2#_1-2-docker-compose\",\"44\":\"2#_2-尝试构建自己的镜像\",\"45\":\"2#_2-1-安装-docker\",\"46\":\"2#_2-2-目录结构\",\"47\":\"2#_2-3-编写-dockerfile\",\"48\":\"2#_2-4-配置文件列表\",\"49\":\"2#_2-5-核心启动文件\",\"50\":\"2#_2-6-构建镜像\",\"51\":\"2#_3-运行截图\",\"52\":\"2@0\",\"53\":\"2@1\",\"54\":\"3\",\"55\":\"3#_1-安装\",\"56\":\"3#_2-编辑配置文件\",\"57\":\"3#_2-1-修改-kdc-conf-server\",\"58\":\"3#_2-2-修改-krb5-conf-server-and-client\",\"59\":\"3#_3-生成-kerberos-数据库\",\"60\":\"3#_4-创建管理员主体-实例\",\"61\":\"3#_5-启动服务-server\",\"62\":\"3#_6-创建普通主体-实例\",\"63\":\"3#常用命令\",\"64\":\"3@0\",\"65\":\"3@1\",\"66\":\"4\",\"67\":\"4#vpcard-组件\",\"68\":\"4@0\",\"69\":\"4@1\",\"70\":\"5\",\"71\":\"5#_5-1-代理模式\",\"72\":\"5#_5-1-1-概述\",\"73\":\"5#_5-1-2-结构\",\"74\":\"5#_5-1-3-静态代理\",\"75\":\"5#_5-1-4-jdk-动态代理\",\"76\":\"5#_5-1-5-cglib-动态代理\",\"77\":\"5#_5-1-6-三种代理的对比\",\"78\":\"5#_5-1-7-优缺点\",\"79\":\"5#_5-1-8-使用场景\",\"80\":\"5#_5-2-适配器模式\",\"81\":\"5#_5-2-1-概述\",\"82\":\"5#_5-2-2-结构\",\"83\":\"5#_5-2-3-类适配器模式\",\"84\":\"5#_5-2-4-对象适配器模式\",\"85\":\"5#_5-2-5-应用场景\",\"86\":\"5#_5-2-6-jdk-源码解析\",\"87\":\"5#_5-3-4-使用场景\",\"88\":\"5#_5-3-5-jdk-源码解析\",\"89\":\"5#_5-3-6-代理和装饰者的区别\",\"90\":\"5#_5-4-桥接模式\",\"91\":\"5#_5-4-1-概述\",\"92\":\"5#_5-4-2-结构\",\"93\":\"5#_5-4-3-案例\",\"94\":\"5#_5-4-4-使用场景\",\"95\":\"5#_5-5-外观模式\",\"96\":\"5#_5-5-1-概述\",\"97\":\"5#_5-5-2-结构\",\"98\":\"5#_5-5-3-案例\",\"99\":\"5#_5-5-4-使用场景\",\"100\":\"5#_5-5-5-源码解析\",\"101\":\"5#_5-6-组合模式\",\"102\":\"5#_5-6-1-概述\",\"103\":\"5#_5-6-2-结构\",\"104\":\"5#_5-6-3-案例实现\",\"105\":\"5#_5-6-4-组合模式的分类\",\"106\":\"5#_5-6-5-优点\",\"107\":\"5#_5-6-6-使用场景\",\"108\":\"5#_5-7-享元模式\",\"109\":\"5#_5-7-1-概述\",\"110\":\"5#_5-7-2-结构\",\"111\":\"5#_5-7-3-案例实现\",\"112\":\"5#_5-7-5-优缺点和使用场景\",\"113\":\"5#_5-7-6-jdk-源码解析\",\"114\":\"5#_6-1-模板方法模式\",\"115\":\"5#_6-1-1-概述\",\"116\":\"5#_6-1-2-结构\",\"117\":\"5#_6-1-3-案例实现\",\"118\":\"5#_6-1-3-优缺点\",\"119\":\"5#_6-1-4-适用场景\",\"120\":\"5#_6-1-5-jdk-源码解析\",\"121\":\"5#_6-2-策略模式\",\"122\":\"5#_6-2-1-概述\",\"123\":\"5#_6-2-2-结构\",\"124\":\"5#_6-2-3-案例实现\",\"125\":\"5#_6-2-4-优缺点\",\"126\":\"5#_6-2-5-使用场景\",\"127\":\"5#_6-2-6-jdk-源码解析\",\"128\":\"5#_6-3-命令模式\",\"129\":\"5#_6-3-1-概述\",\"130\":\"5#_6-3-2-结构\",\"131\":\"5#_6-3-3-案例实现\",\"132\":\"5#_6-3-4-优缺点\",\"133\":\"5#_6-3-5-使用场景\",\"134\":\"5#_6-3-6-jdk-源码解析\",\"135\":\"5#_6-4-责任链模式\",\"136\":\"5#_6-4-1-概述\",\"137\":\"5#_6-4-2-结构\",\"138\":\"5#_6-4-3-案例实现\",\"139\":\"5#_6-4-4-优缺点\",\"140\":\"5#_6-4-5-源码解析\",\"141\":\"5#_6-5-状态模式\",\"142\":\"5#_6-5-1-概述\",\"143\":\"5#_6-5-2-结构\",\"144\":\"5#_6-5-3-案例实现\",\"145\":\"5#_6-5-4-优缺点\",\"146\":\"5#_6-5-5-使用场景\",\"147\":\"5#_6-6-观察者模式\",\"148\":\"5#_6-6-1-概述\",\"149\":\"5#_6-6-2-结构\",\"150\":\"5#_6-6-3-案例实现\",\"151\":\"5#_6-6-4-优缺点\",\"152\":\"5#_6-6-5-使用场景\",\"153\":\"5#_6-6-6-jdk-中提供的实现\",\"154\":\"5#_6-7-中介者模式\",\"155\":\"5#_6-7-1-概述\",\"156\":\"5#_6-7-2-结构\",\"157\":\"5#_6-7-3-案例实现\",\"158\":\"5#_6-7-4-优缺点\",\"159\":\"5#_6-7-5-使用场景\",\"160\":\"5#_6-8-迭代器模式\",\"161\":\"5#_6-8-1-概述\",\"162\":\"5#_6-8-2-结构\",\"163\":\"5#_6-8-3-案例实现\",\"164\":\"5#_6-8-4-优缺点\",\"165\":\"5#_6-8-5-使用场景\",\"166\":\"5#_6-8-6-jdk-源码解析\",\"167\":\"5#_6-9-访问者模式\",\"168\":\"5#_6-9-1-概述\",\"169\":\"5#_6-9-2-结构\",\"170\":\"5#_6-9-3-案例实现\",\"171\":\"5#_6-9-4-优缺点\",\"172\":\"5#_6-9-5-使用场景\",\"173\":\"5#_6-9-6-扩展\",\"174\":\"5#_6-10-备忘录模式\",\"175\":\"5#_6-10-1-概述\",\"176\":\"5#_6-10-2-结构\",\"177\":\"5#_6-10-3-案例实现\",\"178\":\"5#_6-10-3-1-白箱-备忘录模式\",\"179\":\"5#_6-10-3-2-黑箱-备忘录模式\",\"180\":\"5#_6-10-4-优缺点\",\"181\":\"5#_6-10-5-使用场景\",\"182\":\"5#_6-11-解释器模式\",\"183\":\"5#_6-11-1-概述\",\"184\":\"5#_6-11-2-结构\",\"185\":\"5#_6-11-3-案例实现\",\"186\":\"5#_6-11-4-优缺点\",\"187\":\"5#_6-11-5-使用场景\",\"188\":\"5#_7-1-spring-使用回顾\",\"189\":\"5#_7-2-spring-核心功能结构\",\"190\":\"5#_7-1-1-bean-概述\",\"191\":\"5#_7-3-spring-ioc-相关接口分析\",\"192\":\"5#_7-3-1-beanfactory-解析\",\"193\":\"5#_7-3-2-beandefinition-解析\",\"194\":\"5#_7-3-3-beandefinitionreader-解析\",\"195\":\"5#_7-3-4-beandefinitionregistry-解析\",\"196\":\"5#_7-3-5-创建容器\",\"197\":\"5#_7-4-自定义-springioc\",\"198\":\"5#_7-4-1-定义-bean-相关的-pojo-类\",\"199\":\"5#_7-4-1-1-propertyvalue-类\",\"200\":\"5#_7-4-1-2-mutablepropertyvalues-类\",\"201\":\"5#_7-4-1-3-beandefinition-类\",\"202\":\"5#_7-4-2-定义注册表相关类\",\"203\":\"5#_7-4-2-1-beandefinitionregistry-接口\",\"204\":\"5#_7-4-2-2-simplebeandefinitionregistry-类\",\"205\":\"5#_7-4-3-定义解析器相关类\",\"206\":\"5#_7-4-3-1-beandefinitionreader-接口\",\"207\":\"5#_7-4-3-2-xmlbeandefinitionreader-类\",\"208\":\"5#_7-4-4-ioc-容器相关类\",\"209\":\"5#_7-4-4-1-beanfactory-接口\",\"210\":\"5#_7-4-4-2-applicationcontext-接口\",\"211\":\"5#_7-4-4-3-abstractapplicationcontext-类\",\"212\":\"5#_7-4-4-4-classpathxmlapplicationcontext-类\",\"213\":\"5#_7-4-5-自定义-spring-ioc-总结\",\"214\":\"5#_7-4-5-1-使用到的设计模式\",\"215\":\"5#_7-4-5-2-符合大部分设计原则\",\"216\":\"5#_7-4-5-3-整个设计和-spring-的设计还是有一定的出入\",\"217\":\"5@0\",\"218\":\"5@1\",\"219\":\"6\",\"220\":\"6@0\",\"221\":\"7\",\"222\":\"7#_1-单例模式\",\"223\":\"7#_1-1-存在的问题\",\"224\":\"7#_1-2-问题的解决\",\"225\":\"7#_1-3-jdk-源码解析-runtime-类\",\"226\":\"7#_2-工厂模式\",\"227\":\"7#_2-1-简单工厂模式\",\"228\":\"7#_2-2-工厂方法模式\",\"229\":\"7#_2-3-抽象工厂模式\",\"230\":\"7#_2-4-模式扩展\",\"231\":\"7#_2-5-jdk-源码解析-collection-iterator-方法\",\"232\":\"7#_3-原型模式\",\"233\":\"7#_3-1-实现-cloneable\",\"234\":\"7#_3-2-扩展-深克隆\",\"235\":\"7#_4-建造者模式\",\"236\":\"7#_4-1-创建共享单车案例\",\"237\":\"7#_4-2-模式扩展\",\"238\":\"7#_5-创建者模式对比\",\"239\":\"7#_5-1-工厂方法模式-vs-建造者模式\",\"240\":\"7#_5-2-抽象工厂模式-vs-建造者模式\",\"241\":\"7@0\",\"242\":\"7@1\",\"243\":\"8\",\"244\":\"8#软件设计模式的概念\",\"245\":\"8#学习设计模式的必要性\",\"246\":\"8#_1-设计模式分类\",\"247\":\"8#_2-uml-图\",\"248\":\"8#_2-1-类图概述\",\"249\":\"8#_2-2-类图的作用\",\"250\":\"8#_3-类图表示法\",\"251\":\"8#_3-1-类的表示方式\",\"252\":\"8#_3-2-类与类之间关系的表示方式\",\"253\":\"8@0\",\"254\":\"8@1\",\"255\":\"9\",\"256\":\"9#_1-开闭原则\",\"257\":\"9#_2-里氏代换原则\",\"258\":\"9#_3-依赖倒转原则\",\"259\":\"9#_4-接口隔离原则\",\"260\":\"9#_5-迪米特法则\",\"261\":\"9#_6-合成复用原则\",\"262\":\"9@0\",\"263\":\"9@1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,15],\"1\":[1,2],\"2\":[1,15],\"3\":[4,8],\"4\":[3,47],\"5\":[3,74],\"6\":[3,125],\"7\":[5,67],\"8\":[3,27],\"9\":[3],\"10\":[3,47],\"11\":[5,20],\"12\":[2,21],\"13\":[5,74],\"14\":[2,132],\"15\":[4,57],\"16\":[4,96],\"17\":[3,9],\"18\":[null,null,1],\"19\":[null,null,1],\"20\":[2,6],\"21\":[1,5],\"22\":[1,39],\"23\":[3,1],\"24\":[2,1],\"25\":[3,7],\"26\":[3,3],\"27\":[3,2],\"28\":[4,1],\"29\":[3],\"30\":[4,1],\"31\":[4,1],\"32\":[2,113],\"33\":[4,50],\"34\":[2,5],\"35\":[2,8],\"36\":[null,null,1],\"37\":[null,null,1],\"38\":[3,30],\"39\":[1,12],\"40\":[1,19],\"41\":[2],\"42\":[3,40],\"43\":[4,91],\"44\":[2],\"45\":[4,49],\"46\":[2,42],\"47\":[4,102],\"48\":[3],\"49\":[3,138],\"50\":[3,10],\"51\":[2],\"52\":[null,null,1],\"53\":[null,null,1],\"54\":[1,19],\"55\":[2,9],\"56\":[2],\"57\":[7,47],\"58\":[8,73],\"59\":[4,27],\"60\":[3,30],\"61\":[4,6],\"62\":[3,15],\"63\":[1,38],\"64\":[null,null,1],\"65\":[null,null,1],\"66\":[1,1],\"67\":[2],\"68\":[null,null,1],\"69\":[null,null,1],\"70\":[1,18],\"71\":[3],\"72\":[3,15],\"73\":[4,17],\"74\":[4,51],\"75\":[5,161],\"76\":[4,105],\"77\":[4,54],\"78\":[4,8],\"79\":[4,26],\"80\":[3],\"81\":[4,31],\"82\":[3,18],\"83\":[4,77],\"84\":[4,58],\"85\":[3,5],\"86\":[5,207],\"87\":[4,15],\"88\":[4,45],\"89\":[4,14],\"90\":[3],\"91\":[4,20],\"92\":[4,21],\"93\":[4,69],\"94\":[3,7],\"95\":[2],\"96\":[3,27],\"97\":[3,11],\"98\":[3,78],\"99\":[3,8],\"100\":[2,49],\"101\":[3],\"102\":[4,22],\"103\":[4,16],\"104\":[4,86],\"105\":[4,36],\"106\":[3,16],\"107\":[3,6],\"108\":[3],\"109\":[4,6],\"110\":[4,37],\"111\":[4,67],\"112\":[3,24],\"113\":[5,146],\"114\":[3],\"115\":[3,26],\"116\":[4,36],\"117\":[4,68],\"118\":[4,19],\"119\":[4,8],\"120\":[5,68],\"121\":[3],\"122\":[4,25],\"123\":[3,16],\"124\":[4,48],\"125\":[4,21],\"126\":[4,13],\"127\":[4,131],\"128\":[3],\"129\":[4,11],\"130\":[4,27],\"131\":[3,123],\"132\":[4,25],\"133\":[4,10],\"134\":[4,65],\"135\":[3],\"136\":[4,27],\"137\":[4,18],\"138\":[4,112],\"139\":[3,38],\"140\":[4,71],\"141\":[3],\"142\":[4,115],\"143\":[4,16],\"144\":[4,107],\"145\":[4,16],\"146\":[3,6],\"147\":[2],\"148\":[3,12],\"149\":[3,24],\"150\":[3,82],\"151\":[3,14],\"152\":[3,5],\"153\":[3,106],\"154\":[3],\"155\":[4,36],\"156\":[4,26],\"157\":[4,77],\"158\":[4,32],\"159\":[4,5],\"160\":[3],\"161\":[4,4],\"162\":[4,24],\"163\":[4,54],\"164\":[4,22],\"165\":[4,4],\"166\":[4,92],\"167\":[3],\"168\":[4,4],\"169\":[4,36],\"170\":[4,86],\"171\":[4,25],\"172\":[4,5],\"173\":[3,108],\"174\":[3],\"175\":[4,30],\"176\":[4,32],\"177\":[4,18],\"178\":[6,73],\"179\":[6,101],\"180\":[4,18],\"181\":[4,13],\"182\":[3],\"183\":[4,101],\"184\":[4,30],\"185\":[4,69],\"186\":[4,28],\"187\":[4,7],\"188\":[4,129],\"189\":[4,91],\"190\":[4,55],\"191\":[5],\"192\":[5,118],\"193\":[5,30],\"194\":[4,42],\"195\":[5,59],\"196\":[4,20],\"197\":[4,36],\"198\":[8],\"199\":[5,26],\"200\":[6,55],\"201\":[6,33],\"202\":[4],\"203\":[6,34],\"204\":[5,43],\"205\":[4],\"206\":[6,23],\"207\":[6,66],\"208\":[4],\"209\":[5,23],\"210\":[5,23],\"211\":[5,65],\"212\":[4,89],\"213\":[7],\"214\":[5,46],\"215\":[5],\"216\":[7,17],\"217\":[null,null,1],\"218\":[null,null,2],\"219\":[1],\"220\":[null,null,2],\"221\":[1,9],\"222\":[2,26],\"223\":[2,4],\"224\":[3,37],\"225\":[6,7],\"226\":[2,35],\"227\":[3,39],\"228\":[2,35],\"229\":[3,75],\"230\":[3,9],\"231\":[7,51],\"232\":[2,14],\"233\":[4,30],\"234\":[5,83],\"235\":[2,45],\"236\":[3,71],\"237\":[3,9],\"238\":[2],\"239\":[5,17],\"240\":[5,12],\"241\":[null,null,1],\"242\":[null,null,2],\"243\":[1,63],\"244\":[1,17],\"245\":[1,16],\"246\":[2,41],\"247\":[3,23],\"248\":[3,9],\"249\":[2,8],\"250\":[2],\"251\":[3,61],\"252\":[3],\"253\":[null,null,1],\"254\":[null,null,2],\"255\":[1,10],\"256\":[2,37],\"257\":[2,49],\"258\":[2,54],\"259\":[2,26],\"260\":[2,40],\"261\":[2,23],\"262\":[null,null,1],\"263\":[null,null,2]},\"averageFieldLength\":[3.4623101999574137,40.18477551897772,0.27559599642718297],\"storedFields\":{\"0\":{\"h\":\"springboot项目构建\",\"t\":[\"☀️ 文章主要介绍如何使用 springboot 进行快速开发\",\"通过 mybatis-plus，一键生成 mapper、service、controller\",\"通过 BaseController 使每个生成的 Controller 都具备简单的增删改查功能\"]},\"1\":{\"h\":\"项目地址\",\"t\":[\"项目地址：gitee\"]},\"2\":{\"h\":\"版本信息\",\"t\":[\"依赖\",\"版本\",\"JDK\",\"17+\",\"MySQL\",\"8+\",\"Springboot\",\"3.2.0\",\"mybatis-plus\",\"3.5.6\",\"mybatis-plus-generator\",\"3.5.6\"]},\"3\":{\"h\":\"1 创建 springboot 项目\",\"t\":[\"使用 springboot initializr 快速创建项目\",\"springboot initializr\",\"添加依赖，先选择这些，后面不够再添加\",\"选择依赖\"]},\"4\":{\"h\":\"2 mybatis-plus\",\"t\":[\"官网地址\",\"确定版本\",\"通过官网知道 mybatis-plus springboot3 的场景启动器名称为：mybatis-plus-spring-boot3-starter\",\"通过 mvnrepository 查询依赖发现最新版本为 3.5.6\",\"通过查看最新版本依赖发现 springboot 版本为 3.2.0\",\"所以就可以确定了 springboot 和 mybatis-plus 的版本\",\"mvnrepository\",\"引入依赖\",\"<!-- mybatis plus --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-spring-boot3-starter</artifactId> <version>3.5.6</version> </dependency> <!-- mybatis plus 代码生成工具 --> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-generator</artifactId> <version>3.5.6</version> <scope>provided</scope> </dependency> <!-- mybatis plus 代码生成工具需要的模板引擎 --> <dependency> <groupId>org.freemarker</groupId> <artifactId>freemarker</artifactId> <scope>provided</scope> </dependency> \"]},\"5\":{\"h\":\"2.2 mysql 数据表准备\",\"t\":[\"CREATE DATABASE IF NOT EXISTS `meta_tool`; USE `meta_tool`; DROP TABLE IF EXISTS `t_data_storey`; CREATE TABLE `t_data_storey` ( `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键', `storey` varchar(100) NOT NULL COMMENT '层名', `desc` varchar(255) DEFAULT NULL COMMENT '说明', `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`), UNIQUE KEY `uniq_storey` (`storey`) ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb3 COMMENT='数仓层级表'; INSERT INTO `t_data_storey`(`id`,`storey`,`desc`) VALUES (1,'ods','原始数据层'),(2,'dwd','数据明细层'),(3,'dwm','数据中间层'),(4,'dws','数据服务层'),(5,'ads','数据应用层'),(6,'dim','维度层'),(7,'mid','中间表-可以删除'),(8,'tmp','临时表-可以删除'); \"]},\"6\":{\"h\":\"2.3 创建代码生成工具类\",\"t\":[\"MybatisGeneratorUtil.java\",\"public class MybatisGeneratorUtil { public static void generator(String... tableName) { val url = \\\"jdbc:mysql://localhost:3306/meta_tool\\\"; val username = \\\"root\\\"; val password = \\\"123\\\"; val projectPath = System.getProperty(\\\"user.dir\\\"); FastAutoGenerator.create(url, username, password) .globalConfig(builder -> builder.author(\\\"chen\\\") .enableSpringdoc() .outputDir(projectPath + \\\"/src/main/java\\\") ) .dataSourceConfig(builder -> builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -> { int typeCode = metaInfo.getJdbcType().TYPE_CODE; if (typeCode == Types.SMALLINT) { // 自定义类型转换 return DbColumnType.INTEGER; } return typeRegistry.getColumnType(metaInfo); })) .packageConfig(builder -> { builder.parent(\\\"com.yeeiee\\\") // 设置父包名 .entity(\\\"entity\\\") .controller(\\\"controller\\\") .mapper(\\\"mapper\\\") .service(\\\"service\\\") .serviceImpl(\\\"service.impl\\\") .pathInfo(Collections.singletonMap(OutputFile.xml, projectPath + \\\"/src/main/resources/mapper\\\")); // 设置mapperXml生成路径 }) .strategyConfig(builder -> { builder.addInclude(tableName) // 设置需要生成的表名 .addTablePrefix(\\\"t_\\\"); // 设置过滤表前缀 builder.entityBuilder() .idType(IdType.AUTO) .enableRemoveIsPrefix() .enableTableFieldAnnotation() .enableLombok() .disableSerialVersionUID() .addTableFills( new Column(\\\"create_time\\\", FieldFill.INSERT), new Column(\\\"update_time\\\", FieldFill.INSERT_UPDATE) ) .enableFileOverride(); builder.controllerBuilder() .enableRestStyle() .enableFileOverride(); builder.serviceBuilder() .formatServiceFileName(\\\"%sService\\\") .enableFileOverride(); builder.mapperBuilder() .enableBaseResultMap() .enableBaseColumnList() .enableFileOverride(); }) // 使用Freemarker引擎模板，默认的是Velocity引擎模板 .templateEngine(new FreemarkerTemplateEngine()) .execute(); } public static void main(String[] args) { generator(\\\"t_data_storey\\\"); } } \",\"运行发现报错了\",\"generator error\",\"这是运行的时候没有包含 provided，通过设置运行包含 provided 依赖解决问题\",\"添加provided依赖到类路径\",\"查看生成后的实体类发现有问题，这是因为没有引入 swagger\",\"代码生成结果\"]},\"7\":{\"h\":\"2.4 引入 springdoc-openapi\",\"t\":[\"引入依赖\",\"<!-- springdoc openapi --> <dependency> <groupId>org.springdoc</groupId> <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId> <version>2.3.0</version> </dependency> \",\"springdoc 配置类\",\"@Configuration @OpenAPIDefinition(info = @Info( title = \\\"meta tool\\\", description = \\\"hive 元数据工具\\\", version = \\\"1.0.0\\\", license = @License( name = \\\"Apache 2.0\\\" ) )) public class OpenApiConfig { } \",\"引入依赖后恢复正常，但是尝试启动项目发现报错\",\"start error\",\"这是因为没有指定 mapper scan 的位置，在启动类上加上就好了\",\"@SpringBootApplication @MapperScan(\\\"com.yeeiee.mapper\\\") public class MetaToolAppApplication { public static void main(String[] args) { SpringApplication.run(MetaToolAppApplication.class, args); } } \",\"再次启动又报错了，这是因为忘记了配置数据源（有点水文的嫌疑了）\",\"config error\"]},\"8\":{\"h\":\"2.5 配置数据源\",\"t\":[\"spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/meta_tool spring.datasource.username=root spring.datasource.password=123 mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl \"]},\"9\":{\"h\":\"3 创建公共的 controller\"},\"10\":{\"h\":\"3.1 编写统一响应对象\",\"t\":[\"R.java\",\"@NoArgsConstructor @AllArgsConstructor @Getter @Setter @Schema(title = \\\"R\\\", description = \\\"统一响应对象\\\") public class R<T> { @Schema(title = \\\"是否成功\\\") private boolean success; @Nullable @Schema(title = \\\"数据\\\") private T data; @Nullable @Schema(title = \\\"状态码\\\") private int code; @Nullable @Schema(title = \\\"消息\\\") private String message; public static <T> R<T> ok() { return new R<>(true, null, 200, null); } public static <T> R<T> ok(T data) { return new R<>(true, data, 200, null); } public static <T> R<T> error(HttpStatus httpStatus) { return new R<>(false, null, httpStatus.value(), httpStatus.getReasonPhrase()); } public static <T> R<T> error(int code, Exception e) { return new R<>(false, null, code, e.getMessage()); } public static <T> R<T> error(HttpStatus httpStatus, Exception e) { return new R<>(false, null, httpStatus.value(), e.getMessage()); } } \"]},\"11\":{\"h\":\"3.2 编写 dml 操作异常类\",\"t\":[\"insert、update、delete 操作时，影响条数可能是 0，这个时候可以抛出 dml 操作异常\",\"@StandardException 是 lombok 的注解，可以快速的编写一个异常类\",\"@StandardException public class DmlOperationException extends RuntimeException { } \"]},\"12\":{\"h\":\"3.3 编写全局处理异常类\",\"t\":[\"@RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(DmlOperationException.class) public R<Void> dmlFailureHandler(DmlOperationException e) { return R.error(HttpStatus.NOT_MODIFIED, e); } @ExceptionHandler(Exception.class) public R<Void> defaultHandler(Exception e) { return R.error(HttpStatus.INTERNAL_SERVER_ERROR, e); } } \"]},\"13\":{\"h\":\"3.4 编写 base controller\",\"t\":[\"BaseController.java\",\"public abstract class BaseController<T> { protected IService<T> service; public BaseController(IService<T> service) { this.service = service; } @Operation(summary = \\\"分页查询\\\") @GetMapping(\\\"/{size}/{current}\\\") public R<Page<T>> page(@PathVariable(\\\"size\\\") @Parameter(description = \\\"页面大小\\\") Integer size, @PathVariable(\\\"current\\\") @Parameter(description = \\\"当前页面\\\") Integer current) { val page = service.page(new Page<>(current, size), new QueryWrapper<>()); return R.ok(page); } @Operation(summary = \\\"查询所有\\\") @GetMapping(\\\"/\\\") public R<List<T>> getList() { val list = service.list(); return R.ok(list); } @Operation(summary = \\\"按照id查询\\\") @GetMapping(\\\"/{id}\\\") public R<T> getById(@PathVariable(\\\"id\\\") Long id) { val one = service.getById(id); return R.ok(one); } @Operation(summary = \\\"按照id删除\\\") @DeleteMapping(\\\"/{id}\\\") public R<T> removeById(@PathVariable(\\\"id\\\") Long id) { val status = service.removeById(id); if (!status) { throw new DmlOperationException(\\\"删除失败【id】：\\\" + id); } return R.ok(); } @Operation(summary = \\\"新增\\\") @PostMapping(\\\"/\\\") public R<T> save(@RequestBody T entity) { val status = service.save(entity); if (!status) { throw new DmlOperationException(\\\"新增失败【entity】：\\\" + entity); } return R.ok(); } @Operation(summary = \\\"更新\\\") @PutMapping(\\\"/\\\") public R<T> update(@RequestBody T entity) { val status = service.updateById(entity); if (!status) { throw new DmlOperationException(\\\"更新失败【entity】：\\\" + entity); } return R.ok(); } @Operation(summary = \\\"新增或者更新\\\") @PostMapping(\\\"/save\\\") public R<T> saveOrUpdate(@RequestBody T entity) { val status = service.saveOrUpdate(entity); if (!status) { throw new DmlOperationException(\\\"upsert失败【entity】：\\\" + entity); } return R.ok(); } } \",\"注意\",\"这个时候，我们想让生成的代码都继承这个 base controller\",\"就需要修改代码生成的模板，我这边已经改好了，直接使用即可\"]},\"14\":{\"h\":\"4 修改代码生成模板\",\"t\":[\"将模板文件放在 templates 文件夹下面\",\"代码生成模板文件\",\"模板文件\",\"修改代码生成工具类\",\"MybatisGeneratorUtil.java\",\"public class MybatisGeneratorUtil { public static void generator(String... tableName) { val url = \\\"jdbc:mysql://localhost:3306/meta_tool\\\"; val username = \\\"root\\\"; val password = \\\"123\\\"; val projectPath = System.getProperty(\\\"user.dir\\\"); FastAutoGenerator.create(url, username, password) .globalConfig(builder -> builder.author(\\\"chen\\\") .enableSpringdoc() .outputDir(projectPath + \\\"/src/main/java\\\") ) .dataSourceConfig(builder -> builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -> { int typeCode = metaInfo.getJdbcType().TYPE_CODE; if (typeCode == Types.SMALLINT) { // 自定义类型转换 return DbColumnType.INTEGER; } return typeRegistry.getColumnType(metaInfo); })) .packageConfig(builder -> { builder.parent(\\\"com.yeeiee\\\") // 设置父包名 .entity(\\\"entity\\\") .controller(\\\"controller\\\") .mapper(\\\"mapper\\\") .service(\\\"service\\\") .serviceImpl(\\\"service.impl\\\") .pathInfo(Collections.singletonMap(OutputFile.xml, projectPath + \\\"/src/main/resources/mapper\\\")); // 设置mapperXml生成路径 }) .strategyConfig(builder -> { builder.addInclude(tableName) // 设置需要生成的表名 .addTablePrefix(\\\"t_\\\"); // 设置过滤表前缀 builder.entityBuilder() .javaTemplate(\\\"/templates/entity.java\\\") .idType(IdType.AUTO) .enableRemoveIsPrefix() .enableTableFieldAnnotation() .enableLombok() .disableSerialVersionUID() .addTableFills( new Column(\\\"create_time\\\", FieldFill.INSERT), new Column(\\\"update_time\\\",FieldFill.INSERT_UPDATE) ) .enableFileOverride(); builder.controllerBuilder() .template(\\\"/templates/controller.java\\\") .superClass(BaseController.class) .enableRestStyle() .enableFileOverride(); builder.serviceBuilder() .formatServiceFileName(\\\"%sService\\\") .enableFileOverride(); builder.mapperBuilder() .enableBaseResultMap() .enableBaseColumnList() .enableFileOverride(); }) // 使用Freemarker引擎模板，默认的是Velocity引擎模板 .templateEngine(new FreemarkerTemplateEngine()) .execute(); } public static void main(String[] args) { generator(\\\"t_data_storey\\\"); } } \",\"重新生成代码，是否重写可以在代码生成工具里面修改\",\"修改模板文件后\",\"重要\",\"可以看到通过修改模板文件的方式基本实现了需求\",\"这些我们只要生成代码，不管生成多少个 controller，使其都具备基本的增删改查能力\"]},\"15\":{\"h\":\"5 mybatis-plus 分页插件和字段填充\",\"t\":[\"字段填充：当执行插入或者更新操作时，会根据规则填充字段\",\"常用作 create_time、update_time\",\"MybatisPlusConfig.java\",\"@Configuration public class MybatisPlusConfig implements MetaObjectHandler { /** * 添加分页插件 */ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); //如果配置多个插件,切记分页最后添加 //interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType return interceptor; } /** * 插入时 字段填充 */ @Override public void insertFill(MetaObject metaObject) { this.strictInsertFill(metaObject, \\\"createTime\\\", LocalDateTime::now, LocalDateTime.class); // 起始版本 3.3.3(推荐) this.strictInsertFill(metaObject, \\\"updateTime\\\", LocalDateTime::now, LocalDateTime.class); // 起始版本 3.3.3(推荐) } /** * 更新时 字段填充 */ @Override public void updateFill(MetaObject metaObject) { this.strictUpdateFill(metaObject, \\\"updateTime\\\", LocalDateTime::now, LocalDateTime.class); // 起始版本 3.3.3(推荐) } } \",\"提示\",\"当然，mybatis-plus 还提供了一些开箱即用的功能\",\"比如：逻辑删除，乐观锁等等，这里就不一一展开了\"]},\"16\":{\"h\":\"6 使用 aspectj 控制事务\",\"t\":[\"通常使用注解的方式控制事务，但是当业务复杂时，注解的方式会变得繁琐（这里主要是学习为主）\",\"这里使用 aspectj ，只要是 service.impl 包下符合命名规则的方法，都纳入事务控制\",\"添加依赖\",\"<!-- spring aspectj --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> </dependency> \",\"编写切面类\",\"TransactionAdviceConfig.java\",\"@Aspect @Component public class TransactionAdviceConfig { private static final String AOP_POINTCUT_EXPRESSION = \\\"execution (* com.yeeiee.service.impl.*.*(..))\\\"; @Bean public TransactionInterceptor transactionInterceptor(TransactionManager transactionManager) { DefaultTransactionAttribute txAttrRequired = new DefaultTransactionAttribute(); txAttrRequired.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); DefaultTransactionAttribute txAttrRequiredReadonly = new DefaultTransactionAttribute(); txAttrRequiredReadonly.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); txAttrRequiredReadonly.setReadOnly(true); NameMatchTransactionAttributeSource transactionAttributeSource = new NameMatchTransactionAttributeSource(); // read transactionAttributeSource.addTransactionalMethod(\\\"query*\\\", txAttrRequiredReadonly); transactionAttributeSource.addTransactionalMethod(\\\"get*\\\", txAttrRequiredReadonly); transactionAttributeSource.addTransactionalMethod(\\\"select*\\\", txAttrRequiredReadonly); transactionAttributeSource.addTransactionalMethod(\\\"find*\\\", txAttrRequiredReadonly); // write transactionAttributeSource.addTransactionalMethod(\\\"save*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"insert*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"add*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"create*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"delete*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"update*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"remove*\\\", txAttrRequired); transactionAttributeSource.addTransactionalMethod(\\\"modify*\\\", txAttrRequired); return new TransactionInterceptor(transactionManager, transactionAttributeSource); } @Bean public Advisor transactionAdviceAdvisor(TransactionInterceptor transactionInterceptor) { AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut(); // 定义切面 pointcut.setExpression(AOP_POINTCUT_EXPRESSION); return new DefaultPointcutAdvisor(pointcut, transactionInterceptor); } } \",\"还需要在启动类上面添加\",\"@EnableTransactionManagement(mode = AdviceMode.ASPECTJ) @SpringBootApplication @MapperScan(\\\"com.yeeiee.mapper\\\") public class MetaToolAppApplication { public static void main(String[] args) { SpringApplication.run(MetaToolAppApplication.class, args); } } \"]},\"17\":{\"h\":\"7 生成多张表增删改查 cean\",\"t\":[\"一件生成多张表的增删改查\",\"generator tables\",\"查看 swagger ui\",\"swagger ui\",\"可以看到每个 controller 都具备了基础的增删改查能力\"]},\"18\":{\"c\":[\"后端\"]},\"19\":{\"c\":[\"springboot\"]},\"20\":{\"h\":\"Centos7 安装\",\"t\":[\"✨ 使用 VMware 安装 centos 虚拟机\"]},\"21\":{\"h\":\"准备资源\",\"t\":[\"VMware\",\"centos7 镜像\",\"jdk1.8\"]},\"22\":{\"h\":\"创建虚拟机\",\"t\":[\"提示\",\"没有截图选择默认\",\"点击创建新的虚拟机\",\"选择稍后安装操作系统\",\"选择Linux centos7\",\"选择虚拟机存放位置\",\"cup（建议默认，随后修改）\",\"内存（建议默认，随后修改）\",\"相关信息\",\"host-only 模式（adapter = VMnet1）：虚拟机和主机之间可以相互访问，虚拟机不能访问外网\",\"NET 模式（adapter = VMnet8）：虚拟机和主机之间可以相互访问，虚拟机可以访问外网，外网不能访问虚拟机\",\"桥接模式（adapter = VMnet0）：虚拟机就相当于一台实体机，可以自由访问和被访问以及上网\",\"网络（默认NAT）\",\"磁盘（实际占用为准）\",\"选择镜像文件（这里需要自行下载）\",\"完了开启虚拟机，安装系统，不需要 test，选第一个\"]},\"23\":{\"h\":\"1 linux 系统安装\",\"t\":[\"选择中文\"]},\"24\":{\"h\":\"1.1 日期和时间\",\"t\":[\"调整时间\"]},\"25\":{\"h\":\"1.2 磁盘分区\",\"t\":[\"分配磁盘\",\"添加挂载点\",\"修改文件系统\",\"添加根挂载点（不需要swap，因为后面会关掉的）\"]},\"26\":{\"h\":\"1.3 KDUMP\",\"t\":[\"系统崩溃的时候，备份数据用的，可关闭\"]},\"27\":{\"h\":\"1.4 网络和主机名称\",\"t\":[\"网络和主机名称\",\"点击开始安装\"]},\"28\":{\"h\":\"1.5 ROOT 密码\",\"t\":[\"简单密码点击两次完成即可\"]},\"29\":{\"h\":\"2 linux 初始化\"},\"30\":{\"h\":\"2.1 ip 地址修改\",\"t\":[\"修改成静态ip\"]},\"31\":{\"h\":\"2.2 使用 ssh 工具连接虚拟机\",\"t\":[\"略\"]},\"32\":{\"h\":\"2.2 一些准备工作\",\"t\":[\"#关闭并禁用NetworkManager，图形化用的网络管理，我没有图形化 systemctl stop NetworkManager systemctl disable NetworkManager #关闭并禁用防火墙 systemctl stop firewalld systemctl disable firewalld #关闭并禁用selinux sed -i 's/enforcing/disabled/' /etc/selinux/config #永久 setenforce 0 #临时 #关闭并禁用swap sed -ri 's/.*swap.*/#&/' /etc/fstab #永久 swapoff -a #临时 #设置时区，图形化的时候已经设置了，这里只是把它记录下载 ll /etc/localtime #查看当前时区 timedatectl list-timezones | grep Shanghai #查找中国时区的完整名称 timedatectl set-timezone Asia/Shanghai #其他时区以此类推 #设置hostname，图形化的时候已经设置了，这里只是把它记录下载 hostname #查看当前hostname hostnamectl set-hostname hadoop100 #设置hostname，不用重启 #添加yum 阿里镜像源 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo #重新构建yum缓存 yum clean all #清除缓存 yum update -y #升级软件包，需要一会 yum makecache #构建缓存 #安装vim yum install -y vim #查看是否安装java和mariadb，命令可以分段执行，不然会直接卸载 rpm -qa | grep -i -E mysql\\\\|mariadb | xargs -n1 rpm -e --nodeps rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps #创建文件夹赋予权限，用来安装软件 mkdir /opt/module mkdir /opt/software chown -R atguigu:atguigu /opt/ #添加用户 useradd atguigu echo 123 | passwd --stdin atguigu #添加sudo权限(sudo就是使用root身份执行命令)，如图 vim /etc/sudoers \",\"添加sudo权限\"]},\"33\":{\"h\":\"2.3 安装 jdk\",\"t\":[\"#上传安装包 #解压 tar -zxvf jdk-8u361-linux-x64.tar.gz -C /opt/module/ #改短名字 cd /opt/module/ mv jdk1.8.0_361 jdk-1.8.0 #设置环境变量 sudo vim /etc/profile.d/my_env.sh #添加以下内容 export JAVA_HOME=/opt/module/jdk-1.8.0 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar #刷新环境变量 source /etc/profile #查看java版本，出现版本号就说明对了 java -version \"]},\"34\":{\"h\":\"3 拍摄快照\",\"t\":[\"将当前虚拟机作为原型机，需要用的时候克隆修改 ip 即可\",\"拍摄快照\"]},\"35\":{\"h\":\"4 克隆虚拟机\",\"t\":[\"克隆虚拟机\",\"选择从快照克隆\",\"相关信息\",\"完整克隆会占用更多的硬盘，原型快照损坏不影响\",\"链接克隆，原型快照损坏将导致无法打开\",\"选择链接克隆\"]},\"36\":{\"c\":[\"大数据\"]},\"37\":{\"c\":[\"linux\"]},\"38\":{\"h\":\"Docker 快速启动 Hadoop\",\"t\":[\"🎉 文章的主要目的就是为了快速启动一个 hadoop 环境，用于学习或者测试\",\"当然首先需要 docker 环境，文章后面介绍了如何安装 docker\",\"简单介绍一下镜像的基本信息\",\"镜像大小 2G，服务包含 hadoop 和 hive，hive 配置了 spark 引擎\",\"没有配 mysql，使用 hive 自带的 derby，有时间在搞\",\"可以直接使用打好的镜像，或者尝试构建自己的镜像\",\"启动 hiveserver2 10000 端口需要一些时间，耐心等待一会\"]},\"39\":{\"h\":\"版本信息\",\"t\":[\"服务\",\"版本\",\"备注\",\"hadoop\",\"3.1.3\",\"hive\",\"3.1.3\",\"经过重新编译，用作 hive on spark\",\"spark\",\"3.3.0\"]},\"40\":{\"h\":\"默认端口\",\"t\":[\"可以修改，传递的环境变量会覆盖默认值\",\"服务\",\"端口\",\"hdfs web\",\"9870\",\"hdfs rpc\",\"8020\",\"yarn web\",\"8088\",\"history server\",\"19888\",\"hive metastore\",\"9083\",\"hiveserver2\",\"10000\"]},\"41\":{\"h\":\"1 直接使用打包好的镜像\"},\"42\":{\"h\":\"1.1 docker run\",\"t\":[\"这里使用 host 网络，是为了更好的使用 web ui 的功能\",\"修改 Windows 的 hosts 文件（我这里是 Windows，虚拟机用的 VMware），就可以愉快的玩耍了\",\"docker run -itd \\\\ --name hadoop100 \\\\ --net=host \\\\ -p 9870:9870 \\\\ -p 8020:8020 \\\\ -p 8088:8088 \\\\ -p 19888:19888 \\\\ -p 9083:9083 \\\\ -p 10000:10000 \\\\ registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 \"]},\"43\":{\"h\":\"1.2 docker compose\",\"t\":[\"执行步骤\",\"#首先需要创建一个文件夹 mkdir hadoop-compose && cd hadoop-compose #创建hadoop.env文件 vi hadoop.env #创建compose yml文件 vi docker-compose.yml #启动 docker compose up -d \",\"只有在 compose 才需要，docker run 有默认值\",\"hadoop.env\",\"HADOOP_HDFS_NN_ADDRESS=namenode HADOOP_YARN_RM_ADDRESS=resourcemanager HADOOP_MR_HISTORYSERVER_ADDRESS=historyserver HADOOP_HIVE_ADDRESS=hive \",\"这里 replicated 3 表示这个服务会起 3 个副本，当然他还是单机\",\"docker-compose.yml\",\"version: '3.9' services: namenode: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 ports: - 9870:9870 - 8020:8020 env_file: - hadoop.env healthcheck: test: ['CMD-SHELL'，'curl -s namenode:9870 || exit 1'] interval: 30s timeout: 2s retries: 5 command: ['namenode'] datanode: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 depends_on: namenode: condition: service_healthy restart: true env_file: - hadoop.env command: ['datanode'] # deploy: # mode: replicated # replicas: 3 resourcemanager: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 ports: - 8088:8088 env_file: - hadoop.env healthcheck: test: ['CMD-SHELL'，'curl -s resourcemanager:8088 || exit 1'] interval: 30s timeout: 2s retries: 5 command: ['resourcemanager'] nodemanager: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 depends_on: resourcemanager: condition: service_healthy restart: true env_file: - hadoop.env command: ['nodemanager'] # deploy: # mode: replicated # replicas: 3 historyserver: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 ports: - 19888:19888 depends_on: resourcemanager: condition: service_healthy restart: true env_file: - hadoop.env healthcheck: test: ['CMD-SHELL'，'curl -s historyserver:19888 || exit 1'] interval: 30s timeout: 2s retries: 5 command: ['historyserver'] hive: image: registry.cn-hangzhou.aliyuncs.com/zhouwen/apache-hadoop:3.1.3 ports: - 9083:9083 - 10000:10000 depends_on: namenode: condition: service_healthy restart: true resourcemanager: condition: service_healthy restart: true env_file: - hadoop.env healthcheck: test: ['CMD-SHELL'，'curl -s hive:10000 || exit 1'] interval: 30s timeout: 2s retries: 5 command: ['hive'] \"]},\"44\":{\"h\":\"2 尝试构建自己的镜像\"},\"45\":{\"h\":\"2.1 安装 docker\",\"t\":[\"#所需安装包 yum install -y yum-utils #设置镜像仓库(阿里云) yum-config-manager \\\\ --add-repo \\\\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #更新yum软件包索引 yum makecache fast #安装docker引擎 yum install docker-ce docker-ce-cli containerd.io #设置阿里云镜像加速(登入阿里云控制台查看，貌似每个人都不一样) sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://jsodkx19.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker #查看是否安装成功 docker version \"]},\"46\":{\"h\":\"2.2 目录结构\",\"t\":[\"注意\",\"hadoop，jdk，hive，spark 这些需要自己下载\",\"hive 需要自己编译，因为要适配高版本 spark 引擎\",\"hadoop-compose/ ├── docker-compose.yml ├── Dockerfile ├── hadoop.env └── resource ├── bootstrap.sh ├── config │ ├── core-site.xml │ ├── hdfs-site.xml │ ├── hive-site.xml │ ├── mapred-site.xml │ ├── spark-default.conf │ ├── spark-env.sh │ └── yarn-site.xml ├── hadoop-3.1.3.tar.gz ├── jdk-8u212-linux-x64.tar.gz ├── apache-hive-3.1.3-bin.tar.gz └── spark-3.3.0-bin-without-hadoop.tgz \"]},\"47\":{\"h\":\"2.3 编写 dockerfile\",\"t\":[\"Dockerfile\",\"FROM centos:centos7 MAINTAINER 597879949@qq.com # 时区 RUN ln -sfv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo \\\"Asia/Shanghai\\\" > /etc/timezone ENV LANG=zh_CN.UTF-8 # 工作目录 WORKDIR /opt # 安装jdk ADD ./resource/jdk-8u212-linux-x64.tar.gz /opt ENV JAVA_HOME=/opt/jdk1.8.0_212 # 安装hadoop ADD ./resource/hadoop-3.1.3.tar.gz /opt ENV HADOOP_HOME=/opt/hadoop-3.1.3 ENV HADOOP_COMMON_HOME=${HADOOP_HOME} ENV HADOOP_HDFS_HOME=${HADOOP_HOME} ENV HADOOP_MAPRED_HOME=${HADOOP_HOME} ENV HADOOP_YARN_HOME=${HADOOP_HOME} ENV HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop # 安装hive ADD ./resource/apache-hive-3.1.3-bin.tar.gz /opt ENV HIVE_HOME=/opt/apache-hive-3.1.3-bin # 安装spark ADD ./resource/spark-3.3.0-bin-without-hadoop.tgz /opt ENV SPARK_HOME=/opt/spark-3.3.0-bin-without-hadoop # 默认值 ENV HADOOP_HDFS_NN_WEB_PORT=9870 ENV HADOOP_HDFS_NN_RPC_PORT=8020 ENV HADOOP_HDFS_2NN_PORT=9868 ENV HADOOP_YARN_RM_WEB_PORT=8088 ENV HADOOP_MR_HISTORYSERVER_WEB_PORT=19888 ENV HADOOP_MR_HISTORYSERVER_PRC_PORT=10020 ENV HADOOP_HIVE_METASTORE_PORT=9083 ENV HADOOP_HIVE_HIVESERVER2_PORT=10000 # 拷贝配置文件 RUN mkdir ${HADOOP_HOME}/data && mkdir ${HADOOP_HOME}/logs && mkdir /opt/config COPY ./resource/config/* /opt/config COPY ./resource/bootstrap.sh /opt # 暴露端口 EXPOSE ${HADOOP_HDFS_NN_WEB_PORT} EXPOSE ${HADOOP_HDFS_NN_RPC_PORT} EXPOSE ${HADOOP_YARN_RM_WEB_PORT} EXPOSE ${HADOOP_MR_HISTORYSERVER_WEB_PORT} EXPOSE ${HADOOP_HIVE_METASTORE_PORT} EXPOSE ${HADOOP_HIVE_HIVESERVER2_PORT} ENTRYPOINT [\\\"sh\\\",\\\"./bootstrap.sh\\\"] CMD [\\\"all\\\"] \"]},\"48\":{\"h\":\"2.4 配置文件列表\"},\"49\":{\"h\":\"2.5 核心启动文件\",\"t\":[\"bootstrap.sh\",\"#!/bin/bash set -euo pipefail function print_title(){ echo -e \\\"\\\\n\\\\n------------------------ $1 ------------------------\\\" } function wait_for() { echo Waiting for $1 to listen on $2... while ! curl $1:$2 > /dev/null 2>&1; do echo waiting...; sleep 1s; done } function start_name_node(){ if [ ! -f /tmp/namenode-formated ];then ${HADOOP_HOME}/bin/hdfs namenode -format >/tmp/namenode-formated fi print_title \\\"starting namenode\\\" ${HADOOP_HOME}/bin/hdfs --loglevel INFO --daemon start namenode print_title \\\"starting secondarynamenode\\\" wait_for ${HADOOP_HDFS_NN_ADDRESS} ${HADOOP_HDFS_NN_WEB_PORT} ${HADOOP_HOME}/bin/hdfs --loglevel INFO --daemon start secondarynamenode } function start_data_node(){ print_title \\\"starting datanode\\\" wait_for ${HADOOP_HDFS_NN_ADDRESS} ${HADOOP_HDFS_NN_WEB_PORT} ${HADOOP_HOME}/bin/hdfs --loglevel INFO --daemon start datanode } function start_resource_manager(){ print_title \\\"starting resourcemanager\\\" ${HADOOP_HOME}/bin/yarn --loglevel INFO --daemon start resourcemanager } function start_node_manager(){ print_title \\\"starting nodemanager\\\" wait_for ${HADOOP_YARN_RM_ADDRESS} ${HADOOP_YARN_RM_WEB_PORT} ${HADOOP_HOME}/bin/yarn --loglevel INFO --daemon start nodemanager } function start_history_server(){ print_title \\\"starting historyserver\\\" wait_for ${HADOOP_YARN_RM_ADDRESS} ${HADOOP_YARN_RM_WEB_PORT} ${HADOOP_HOME}/bin/mapred --loglevel INFO --daemon start historyserver } function start_hive() { print_title \\\"starting hive\\\" wait_for ${HADOOP_HDFS_NN_ADDRESS} ${HADOOP_HDFS_NN_WEB_PORT} if [ ! -f /tmp/hive-formated ];then ${HADOOP_HOME}/bin/hdfs dfsadmin -safemode wait ${HADOOP_HOME}/bin/hdfs dfs -mkdir -p /spark/spark-history ${HADOOP_HOME}/bin/hdfs dfs -mkdir -p /spark/spark-jars ${HADOOP_HOME}/bin/hdfs dfs -put ${SPARK_HOME}/jars/* /spark/spark-jars ${HIVE_HOME}/bin/schematool -dbType derby -initSchema > /tmp/hive-formated fi nohup ${HIVE_HOME}/bin/hive --service metastore > ${HADOOP_HOME}/logs/metastore.log 2>&1 & nohup ${HIVE_HOME}/bin/hive --service hiveserver2 > ${HADOOP_HOME}/logs/hiveserver2.log 2>&1 & } # The default value for a single container is hostname export HADOOP_HDFS_NN_ADDRESS=${HADOOP_HDFS_NN_ADDRESS:-$(hostname)} export HADOOP_YARN_RM_ADDRESS=${HADOOP_YARN_RM_ADDRESS:-$(hostname)} export HADOOP_MR_HISTORYSERVER_ADDRESS=${HADOOP_MR_HISTORYSERVER_ADDRESS:-$(hostname)} export HADOOP_HIVE_ADDRESS=${HADOOP_HIVE_ADDRESS:-$(hostname)} { echo 'cat << EOF' ; cat /opt/config/core-site.xml ; echo -e '\\\\nEOF' ; } | sh > ${HADOOP_CONF_DIR}/core-site.xml { echo 'cat << EOF' ; cat /opt/config/hdfs-site.xml ; echo -e '\\\\nEOF' ; } | sh > ${HADOOP_CONF_DIR}/hdfs-site.xml { echo 'cat << EOF' ; cat /opt/config/mapred-site.xml ; echo -e '\\\\nEOF' ; } | sh > ${HADOOP_CONF_DIR}/mapred-site.xml { echo 'cat << EOF' ; cat /opt/config/yarn-site.xml ; echo -e '\\\\nEOF' ; } | sh > ${HADOOP_CONF_DIR}/yarn-site.xml { echo 'cat << EOF' ; cat /opt/config/hive-site.xml ; echo -e '\\\\nEOF' ; } | sh > ${HIVE_HOME}/conf/hive-site.xml { echo 'cat << EOF' ; cat /opt/config/spark-default.conf ; echo -e '\\\\nEOF' ; } | sh > ${HIVE_HOME}/conf/spark-default.conf cp /opt/config/spark-env.sh ${SPARK_HOME}/conf case $1 in all) start_name_node start_data_node start_resource_manager start_node_manager start_history_server start_hive cd ${HADOOP_HOME}/logs tail -f *.log | awk '/^==> / {fileName=substr($0，5，length-8); next} {printf(\\\"%-15s: %s\\\\n\\\",fileName,$0)}' ;; namenode) start_name_node cd ${HADOOP_HOME}/logs tail -f *namenode*.log *secondarynamenode*.log | awk '/^==> / {fileName=substr($0，5，length-8); next} {printf(\\\"%-15s: %s\\\\n\\\",fileName,$0)}' ;; datanode) start_data_node tail -f ${HADOOP_HOME}/logs/*datanode*.log ;; resourcemanager) start_resource_manager tail -f ${HADOOP_HOME}/logs/*resourcemanager*.log ;; nodemanager) start_node_manager tail -f ${HADOOP_HOME}/logs/*nodemanager*.log ;; historyserver) start_history_server tail -f ${HADOOP_HOME}/logs/*historyserver*.log ;; hive) start_hive cd ${HADOOP_HOME}/logs tail -f metastore.log hiveserver2.log | awk '/^==> / {fileName=substr($0，5，length-8); next} {printf(\\\"%-15s: %s\\\\n\\\",fileName,$0)}' ;; *) $@ ;; esac \"]},\"50\":{\"h\":\"2.6 构建镜像\",\"t\":[\"#进入目录 cd hadoop-compose #构建镜像 docker build -t hadoop100 . \"]},\"51\":{\"h\":\"3 运行截图\"},\"52\":{\"c\":[\"大数据\"]},\"53\":{\"c\":[\"hadoop\"]},\"54\":{\"h\":\"Kerberos入门\",\"t\":[\"🏆 Kerberos 主要用来做网络通讯中的身份认证，帮助我们高效，安全的识别访问者\",\"相关信息\",\"kerberos 协议存在的组成：\",\"客户端（Client）：发送请求的一方\",\"服务端（Server）：接收请求的一方\",\"密钥分发中心（Key distribution KDC）\",\"kerberos角色流程图\"]},\"55\":{\"h\":\"1 安装\",\"t\":[\"#服务端 yum install krb5-libs krb5-server krb5-workstation #客户端 yum install krb5-libs krb5-workstation \"]},\"56\":{\"h\":\"2 编辑配置文件\"},\"57\":{\"h\":\"2.1 修改 kdc.conf（server）\",\"t\":[\"修改 /var/kerberos/krb5kdc/kdc.conf 文件\",\"[kdcdefaults] kdc_ports = 88 kdc_tcp_ports = 88 [realms] HADOOP.COM = { # master_key_type = aes256-cts # admin 用户权限 acl_file = /var/kerberos/krb5kdc/kadm5.acl dict_file = /usr/share/dict/words # kdc进行检验的keytab admin_keytab = /var/kerberos/krb5kdc/kadm5.keytab # 支持的检验方式 supported_enctypes = aes128-cts:normal des3-hmac-sha1:normal arcfour-hmac:normal camellia256-cts:normal camellia128-cts:normal des-hmac-sha1:normal des-cbc-md5:normal des-cbc-crc:normal } \"]},\"58\":{\"h\":\"2.2 修改 krb5.conf（server and client）\",\"t\":[\"修改 /etc/krb5.conf 文件\",\"# Configuration snippets may be placed in this directory as well includedir /etc/krb5.conf.d/ [logging] default = FILE:/var/log/krb5libs.log kdc = FILE:/var/log/krb5kdc.log admin_server = FILE:/var/log/kadmind.log [libdefaults] dns_lookup_realm = false # 票据存在时间 ticket_lifetime = 24h # 最大延长时间 renew_lifetime = 7d forwardable = true rdns = false pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt # 默认域 default_realm = HADOOP.COM default_ccache_name = KEYRING:persistent:%{uid} # 禁止使用udp udp_preference_limit = 1 [realms] HADOOP.COM = { # kdc服务地址 kdc = hadoop101 # admin server服务地址 admin_server = hadoop101 } [domain_realm] .example.com = HADOOP.COM example.com = HADOOP.COM \"]},\"59\":{\"h\":\"3 生成 kerberos 数据库\",\"t\":[\"kdb5_util create -s # 输入密码 Enter KDC database master key: Re-enter KDC database master key to verify: # 查看路径下是否生成以下文件 # kadm5.acl kdc.conf principal principal.kadm5 principal.kadm5.lock principal.ok ls /var/kerberos/krb5kdc/ \"]},\"60\":{\"h\":\"4 创建管理员主体/实例\",\"t\":[\"kadmin.local -q \\\"addprinc admin/admin\\\" # 输入密码 Enter KDC database master key: Re-enter KDC database master key to verify: # 给管理员实例的所有主体授权 vim /var/kerberos/krb5kdc/kadm5.acl # 替换内容 */admin@HADOOP.COM * # 前面的*代表所有主体，后面的*代表所有权限 \"]},\"61\":{\"h\":\"5 启动服务（server）\",\"t\":[\"systemctl start kadmin systemctl enable kadmin systemctl start krb5kdc systemctl enable krb5kdc \"]},\"62\":{\"h\":\"6 创建普通主体/实例\",\"t\":[\"kadmin.local -q \\\"addprinc atguigu\\\" # 输入密码 Enter password for principal \\\"atguigu@HADOOP.COM\\\": Re-enter password for principal \\\"atguigu@HADOOP.COM\\\": \"]},\"63\":{\"h\":\"常用命令\",\"t\":[\"# 认证 kinit admin/admin # 查看认证 klist # 登入shell-server，输入?提示 kadmin.local # 登入shell-client，输入?提示 kadmin # 创建主体/实例 kadmin.local -q \\\"addprinc atguigu\\\" # 修改主体/实例密码 kadmin.local -q \\\"cpw atguigu\\\" # 查看所有主体/实例 kadmin.local -q \\\"list_principals\\\" # 生成keytab，当生成keytab之后，使用密码将不能再登入 kadmin.local -q \\\"ktadd -k /root/atguigu.keytab atguigu\\\" # 使用keytab进行认证 kinit -kt /root/atguigu.keytab atguigu # 销毁凭证，提示有缓存，使用-A参数清空所有 kdestroy \"]},\"64\":{\"c\":[\"大数据\"]},\"65\":{\"c\":[\"kerberos\"]},\"66\":{\"h\":\"Nodejs安装\",\"t\":[\"zzzz\"]},\"67\":{\"h\":\"VPCard 组件\"},\"68\":{\"c\":[\"前端\"]},\"69\":{\"c\":[\"nodejs\"]},\"70\":{\"h\":\"设计模式\",\"t\":[\"结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。\",\"由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。\",\"结构型模式分为以下 7 种：\",\"代理模式\",\"适配器模式\",\"装饰者模式\",\"桥接模式\",\"外观模式\",\"组合模式\",\"享元模式\"]},\"71\":{\"h\":\"5.1 代理模式\"},\"72\":{\"h\":\"5.1.1 概述\",\"t\":[\"由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。\",\"Java 中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在 Java 运行时动态生成。动态代理又有 JDK 代理和 CGLib 代理两种。\"]},\"73\":{\"h\":\"5.1.2 结构\",\"t\":[\"代理（Proxy）模式分为三种角色：\",\"抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。\",\"真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。\",\"代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。\"]},\"74\":{\"h\":\"5.1.3 静态代理\",\"t\":[\"我们通过案例来感受一下静态代理。\",\"【例】火车站卖票\",\"如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：\",\"代码如下：\",\"//卖票接口 public interface SellTickets { void sell(); } //火车站 火车站具有卖票功能，所以需要实现SellTickets接口 public class TrainStation implements SellTickets { public void sell() { System.out.println(\\\"火车站卖票\\\"); } } //代售点 public class ProxyPoint implements SellTickets { private TrainStation station = new TrainStation(); public void sell() { System.out.println(\\\"代理点收取一些服务费用\\\"); station.sell(); } } //测试类 public class Client { public static void main(String[] args) { ProxyPoint pp = new ProxyPoint(); pp.sell(); } } \",\"从上面代码中可以看出测试类直接访问的是 ProxyPoint 类对象，也就是说 ProxyPoint 作为访问对象和目标对象的中介。同时也对 sell 方法进行了增强（代理点收取一些服务费用）。\"]},\"75\":{\"h\":\"5.1.4 JDK 动态代理\",\"t\":[\"接下来我们使用动态代理实现上面案例，先说说 JDK 提供的动态代理。Java 中提供了一个动态代理类 Proxy，Proxy 并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance 方法）来获取代理对象。\",\"代码如下：\",\"//卖票接口 public interface SellTickets { void sell(); } //火车站 火车站具有卖票功能，所以需要实现SellTickets接口 public class TrainStation implements SellTickets { public void sell() { System.out.println(\\\"火车站卖票\\\"); } } //代理工厂，用来创建代理对象 public class ProxyFactory { private TrainStation station = new TrainStation(); public SellTickets getProxyObject() { //使用Proxy获取代理对象 /* newProxyInstance()方法参数说明： ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可 Class<?>[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口 InvocationHandler h ： 代理对象的调用处理程序 */ SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(), station.getClass().getInterfaces(), new InvocationHandler() { /* InvocationHandler中invoke方法参数说明： proxy ： 代理对象 method ： 对应于在代理对象上调用的接口方法的 Method 实例 args ： 代理对象调用接口方法时传递的实际参数 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"代理点收取一些服务费用(JDK动态代理方式)\\\"); //执行真实对象 Object result = method.invoke(station, args); return result; } }); return sellTickets; } } //测试类 public class Client { public static void main(String[] args) { //获取代理对象 ProxyFactory factory = new ProxyFactory(); SellTickets proxyObject = factory.getProxyObject(); proxyObject.sell(); } } \",\"ProxyFactory 是代理类吗？\",\"ProxyFactory 不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：\",\"package com.sun.proxy; import com.itheima.proxy.dynamic.jdk.SellTickets; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; import java.lang.reflect.UndeclaredThrowableException; public final class $Proxy0 extends Proxy implements SellTickets { private static Method m1; private static Method m2; private static Method m3; private static Method m0; public $Proxy0(InvocationHandler invocationHandler) { super(invocationHandler); } static { try { m1 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"equals\\\", Class.forName(\\\"java.lang.Object\\\")); m2 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"toString\\\", new Class[0]); m3 = Class.forName(\\\"com.itheima.proxy.dynamic.jdk.SellTickets\\\").getMethod(\\\"sell\\\", new Class[0]); m0 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"hashCode\\\", new Class[0]); return; } catch (NoSuchMethodException noSuchMethodException) { throw new NoSuchMethodError(noSuchMethodException.getMessage()); } catch (ClassNotFoundException classNotFoundException) { throw new NoClassDefFoundError(classNotFoundException.getMessage()); } } public final boolean equals(Object object) { try { return (Boolean)this.h.invoke(this, m1, new Object[]{object}); } catch (Error | RuntimeException throwable) { throw throwable; } catch (Throwable throwable) { throw new UndeclaredThrowableException(throwable); } } public final String toString() { try { return (String)this.h.invoke(this, m2, null); } catch (Error | RuntimeException throwable) { throw throwable; } catch (Throwable throwable) { throw new UndeclaredThrowableException(throwable); } } public final int hashCode() { try { return (Integer)this.h.invoke(this, m0, null); } catch (Error | RuntimeException throwable) { throw throwable; } catch (Throwable throwable) { throw new UndeclaredThrowableException(throwable); } } public final void sell() { try { this.h.invoke(this, m3, null); return; } catch (Error | RuntimeException throwable) { throw throwable; } catch (Throwable throwable) { throw new UndeclaredThrowableException(throwable); } } } \",\"从上面的类中，我们可以看到以下几个信息：\",\"代理类（$Proxy0）实现了 SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。\",\"代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。\",\"动态代理的执行流程是什么样？\",\"下面是摘取的重点代码：\",\"//程序运行过程中动态生成的代理类 public final class $Proxy0 extends Proxy implements SellTickets { private static Method m3; public $Proxy0(InvocationHandler invocationHandler) { super(invocationHandler); } static { m3 = Class.forName(\\\"com.itheima.proxy.dynamic.jdk.SellTickets\\\").getMethod(\\\"sell\\\", new Class[0]); } public final void sell() { this.h.invoke(this, m3, null); } } //Java提供的动态代理相关类 public class Proxy implements java.io.Serializable { protected InvocationHandler h; protected Proxy(InvocationHandler h) { this.h = h; } } //代理工厂类 public class ProxyFactory { private TrainStation station = new TrainStation(); public SellTickets getProxyObject() { SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(), station.getClass().getInterfaces(), new InvocationHandler() { public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"代理点收取一些服务费用(JDK动态代理方式)\\\"); Object result = method.invoke(station, args); return result; } }); return sellTickets; } } \",\"//测试访问类 public class Client { public static void main(String[] args) { //获取代理对象 ProxyFactory factory = new ProxyFactory(); SellTickets proxyObject = factory.getProxyObject(); proxyObject.sell(); } }\",\" \",\"执行流程如下：\",\"在测试类中通过代理对象调用 sell()方法\",\"根据多态的特性，执行的是代理类（$Proxy0）中的 sell()方法\",\"代理类（$Proxy0）中的 sell()方法中又调用了 InvocationHandler 接口的子实现类对象的 invoke 方法\",\"invoke 方法通过反射执行了真实对象所属类(TrainStation)中的 sell()方法\"]},\"76\":{\"h\":\"5.1.5 CGLIB 动态代理\",\"t\":[\"同样是上面的案例，我们再次使用 CGLIB 代理实现。\",\"如果没有定义 SellTickets 接口，只定义了 TrainStation(火车站类)。很显然 JDK 代理是无法使用了，因为 JDK 动态代理要求必须定义接口，对接口进行代理。\",\"CGLIB 是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为 JDK 的动态代理提供了很好的补充。\",\"CGLIB 是第三方提供的包，所以需要引入 jar 包的坐标：\",\"<dependency> <groupId>cglib</groupId> <artifactId>cglib</artifactId> <version>2.2.2</version> </dependency> \",\"代码如下：\",\"//火车站 public class TrainStation { public void sell() { System.out.println(\\\"火车站卖票\\\"); } } //代理工厂 public class ProxyFactory implements MethodInterceptor { private TrainStation target = new TrainStation(); public TrainStation getProxyObject() { //创建 Enhancer 对象，类似于 JDK 动态代理的 Proxy 类，下一步就是设置几个参数 Enhancer enhancer =new Enhancer(); //设置父类的字节码对象 enhancer.setSuperclass(target.getClass()); //设置回调函数 enhancer.setCallback(this); //创建代理对象 TrainStation obj = (TrainStation) enhancer.create(); return obj; } /_ intercept 方法参数说明： o ： 代理对象 method ： 真实对象中的方法的 Method 实例 args ： 实际参数 methodProxy ：代理对象中的方法的 method 实例 _/ public TrainStation intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { System.out.println(\\\"代理点收取一些服务费用(CGLIB 动态代理方式)\\\"); TrainStation result = (TrainStation) methodProxy.invokeSuper(o, args); return result; } } //测试类 public class Client { public static void main(String[] args) { //创建代理工厂对象 ProxyFactory factory = new ProxyFactory(); //获取代理对象 TrainStation proxyObject = factory.getProxyObject(); proxyObject.sell(); } } \"]},\"77\":{\"h\":\"5.1.6 三种代理的对比\",\"t\":[\"jdk 代理和 CGLIB 代理\",\"使用 CGLib 实现动态代理，CGLib 底层采用 ASM 字节码生成框架，使用字节码技术生成代理类，在 JDK1.6 之前比使用 Java 反射效率要高。唯一需要注意的是，CGLib 不能对声明为 final 的类或者方法进行代理，因为 CGLib 原理是动态生成被代理类的子类。\",\"在 JDK1.6、JDK1.7、JDK1.8 逐步对 JDK 动态代理优化之后，在调用次数较少的情况下，JDK 代理效率高于 CGLib 代理效率，只有当进行大量调用的时候，JDK1.6 和 JDK1.7 比 CGLib 代理效率低一点，但是到 JDK1.8 的时候，JDK 代理效率高于 CGLib 代理。所以如果有接口使用 JDK 动态代理，如果没有接口使用 CGLIB 代理。\",\"动态代理和静态代理\",\"动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。\",\"如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题\"]},\"78\":{\"h\":\"5.1.7 优缺点\",\"t\":[\"优点：\",\"代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；\",\"代理对象可以扩展目标对象的功能；\",\"代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；\",\"缺点：\",\"增加了系统的复杂度；\"]},\"79\":{\"h\":\"5.1.8 使用场景\",\"t\":[\"远程（Remote）代理\",\"本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。\",\"防火墙（Firewall）代理\",\"当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。\",\"保护（Protect or Access）代理\",\"控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。\"]},\"80\":{\"h\":\"5.2 适配器模式\"},\"81\":{\"h\":\"5.2.1 概述\",\"t\":[\"如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第 1 面插入当地的插座，第 2 面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将 220v 转换为 5v 的电压），读卡器等，其实就是使用到了适配器模式。\",\"定义：\",\"将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。\",\"适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。\"]},\"82\":{\"h\":\"5.2.2 结构\",\"t\":[\"适配器模式（Adapter）包含以下主要角色：\",\"目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。\",\"适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。\",\"适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。\"]},\"83\":{\"h\":\"5.2.3 类适配器模式\",\"t\":[\"实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。\",\"【例】读卡器\",\"现有一台电脑只能读取 SD 卡，而要读取 TF 卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将 TF 卡中的内容读取出来。\",\"类图如下：\",\"代码如下：\",\"//SD卡的接口 public interface SDCard { //读取SD卡方法 String readSD(); //写入SD卡功能 void writeSD(String msg); } //SD卡实现类 public class SDCardImpl implements SDCard { public String readSD() { String msg = \\\"sd card read a msg :hello word SD\\\"; return msg; } public void writeSD(String msg) { System.out.println(\\\"sd card write msg : \\\" + msg); } } //电脑类 public class Computer { public String readSD(SDCard sdCard) { if(sdCard == null) { throw new NullPointerException(\\\"sd card null\\\"); } return sdCard.readSD(); } } //TF卡接口 public interface TFCard { //读取TF卡方法 String readTF(); //写入TF卡功能 void writeTF(String msg); } //TF卡实现类 public class TFCardImpl implements TFCard { public String readTF() { String msg =\\\"tf card read msg : hello word tf card\\\"; return msg; } public void writeTF(String msg) { System.out.println(\\\"tf card write a msg : \\\" + msg); } } //定义适配器类（SD兼容TF） public class SDAdapterTF extends TFCardImpl implements SDCard { public String readSD() { System.out.println(\\\"adapter read tf card \\\"); return readTF(); } public void writeSD(String msg) { System.out.println(\\\"adapter write tf card\\\"); writeTF(msg); } } //测试类 public class Client { public static void main(String[] args) { Computer computer = new Computer(); SDCard sdCard = new SDCardImpl(); System.out.println(computer.readSD(sdCard)); System.out.println(\\\"------------\\\"); SDAdapterTF adapter = new SDAdapterTF(); System.out.println(computer.readSD(adapter)); } } \",\"类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。\"]},\"84\":{\"h\":\"5.2.4 对象适配器模式\",\"t\":[\"实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。\",\"【例】读卡器\",\"我们使用对象适配器模式将读卡器的案例进行改写。类图如下：\",\"代码如下：\",\"类适配器模式的代码，我们只需要修改适配器类（SDAdapterTF）和测试类。\",\"//创建适配器对象（SD兼容TF） public class SDAdapterTF implements SDCard { private TFCard tfCard; public SDAdapterTF(TFCard tfCard) { this.tfCard = tfCard; } public String readSD() { System.out.println(\\\"adapter read tf card \\\"); return tfCard.readTF(); } public void writeSD(String msg) { System.out.println(\\\"adapter write tf card\\\"); tfCard.writeTF(msg); } } //测试类 public class Client { public static void main(String[] args) { Computer computer = new Computer(); SDCard sdCard = new SDCardImpl(); System.out.println(computer.readSD(sdCard)); System.out.println(\\\"------------\\\"); TFCard tfCard = new TFCardImpl(); SDAdapterTF adapter = new SDAdapterTF(tfCard); System.out.println(computer.readSD(adapter)); } } \",\"注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类 Adapter ，实现所有方法。而此时我们只需要继承该抽象类即可。\"]},\"85\":{\"h\":\"5.2.5 应用场景\",\"t\":[\"以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。\",\"使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。\"]},\"86\":{\"h\":\"5.2.6 JDK 源码解析\",\"t\":[\"Reader（字符流）、InputStream（字节流）的适配使用的是 InputStreamReader。\",\"InputStreamReader 继承自 java.io 包中的 Reader，对他中的抽象的未实现的方法给出实现。如：\",\"​```java public int read() throws IOException { return sd.read(); }\",\"public int read(char cbuf[], int offset, int length) throws IOException { return sd.read(cbuf, offset, length); }\",\" 如上代码中的 sd（StreamDecoder 类对象），在 Sun 的 JDK 实现中，实际的方法实现是对 sun.nio.cs.StreamDecoder 类的同名方法的调用封装。类结构图如下： ![](https://gitee.com/Zhouwen-CN/orange-blog-pictures/raw/master/images/202404082129492.png) 从上图可以看出： - InputStreamReader 是对同样实现了 Reader 的 StreamDecoder 的封装。 - StreamDecoder 不是 Java SE API 中的内容，是 Sun JDK 给出的自身实现。但我们知道他们对构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解码转换。 <font color=\\\"red\\\">结论：</font> 从表层来看，InputStreamReader 做了 InputStream 字节流类到 Reader 字符流之间的转换。而从如上 Sun JDK 中的实现类关系结构中可以看出，是 StreamDecoder 的设计实现在实际上采用了适配器模式。 ## 5.3 装饰者模式 ### 5.3.1 概述 我们先来看一个快餐店的例子。 快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。 ![](./img/装饰者模式-使用前.png) 使用继承的方式存在的问题： - 扩展性不好 如果要再加一种配料（火腿肠），我们就会发现需要给 FriedRice 和 FriedNoodles 分别定义一个子类。如果要新增一个快餐品类（炒河粉）的话，就需要定义更多的子类。 - 产生过多的子类 **定义：** 指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。 ### 5.3.2 结构 装饰（Decorator）模式中的角色： - 抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。 - 具体构件（Concrete Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。 - 抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。 - 具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。 ### 5.3.3 案例 我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。 类图如下： ![](./img/装饰者模式.png) 代码如下： ```java //快餐接口 public abstract class FastFood { private float price; private String desc; public FastFood() { } public FastFood(float price, String desc) { this.price = price; this.desc = desc; } public void setPrice(float price) { this.price = price; } public float getPrice() { return price; } public String getDesc() { return desc; } public void setDesc(String desc) { this.desc = desc; } public abstract float cost(); //获取价格 } //炒饭 public class FriedRice extends FastFood { public FriedRice() { super(10, \\\"炒饭\\\"); } public float cost() { return getPrice(); } } //炒面 public class FriedNoodles extends FastFood { public FriedNoodles() { super(12, \\\"炒面\\\"); } public float cost() { return getPrice(); } } //配料类 public abstract class Garnish extends FastFood { private FastFood fastFood; public FastFood getFastFood() { return fastFood; } public void setFastFood(FastFood fastFood) { this.fastFood = fastFood; } public Garnish(FastFood fastFood, float price, String desc) { super(price,desc); this.fastFood = fastFood; } } //鸡蛋配料 public class Egg extends Garnish { public Egg(FastFood fastFood) { super(fastFood,1,\\\"鸡蛋\\\"); } public float cost() { return getPrice() + getFastFood().getPrice(); } @Override public String getDesc() { return super.getDesc() + getFastFood().getDesc(); } } //培根配料 public class Bacon extends Garnish { public Bacon(FastFood fastFood) { super(fastFood,2,\\\"培根\\\"); } @Override public float cost() { return getPrice() + getFastFood().getPrice(); } @Override public String getDesc() { return super.getDesc() + getFastFood().getDesc(); } } //测试类 public class Client { public static void main(String[] args) { //点一份炒饭 FastFood food = new FriedRice(); //花费的价格 System.out.println(food.getDesc() + \\\" \\\" + food.cost() + \\\"元\\\"); System.out.println(\\\"========\\\"); //点一份加鸡蛋的炒饭 FastFood food1 = new FriedRice(); food1 = new Egg(food1); //花费的价格 System.out.println(food1.getDesc() + \\\" \\\" + food1.cost() + \\\"元\\\"); System.out.println(\\\"========\\\"); //点一份加培根的炒面 FastFood food2 = new FriedNoodles(); food2 = new Bacon(food2); //花费的价格 System.out.println(food2.getDesc() + \\\" \\\" + food2.cost() + \\\"元\\\"); } } \",\"好处：\",\"饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。\",\"装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。\"]},\"87\":{\"h\":\"5.3.4 使用场景\",\"t\":[\"当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。\",\"不能采用继承的情况主要有两类：\",\"第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；\",\"第二类是因为类定义不能继承（如 final 类）\",\"在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。\",\"当对象的功能要求可以动态地添加，也可以再动态地撤销时。\"]},\"88\":{\"h\":\"5.3.5 JDK 源码解析\",\"t\":[\"IO 流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。\",\"我们以 BufferedWriter 举例来说明，先看看如何使用 BufferedWriter\",\"public class Demo { public static void main(String[] args) throws Exception{ //创建BufferedWriter对象 //创建FileWriter对象 FileWriter fw = new FileWriter(\\\"C:\\\\\\\\Users\\\\\\\\Think\\\\\\\\Desktop\\\\\\\\a.txt\\\"); BufferedWriter bw = new BufferedWriter(fw); //写数据 bw.write(\\\"hello Buffered\\\"); bw.close(); } } \",\"使用起来感觉确实像是装饰者模式，接下来看它们的结构：\",\"BufferedWriter 使用装饰者模式对 Writer 子实现类进行了增强，添加了缓冲区，提高了写数据的效率。\"]},\"89\":{\"h\":\"5.3.6 代理和装饰者的区别\",\"t\":[\"静态代理和装饰者模式的区别：\",\"相同点： \",\"都要实现与目标类相同的业务接口\",\"在两个类中都要声明目标对象\",\"都可以在不修改目标类的前提下增强目标方法\",\"不同点： \",\"目的不同 装饰者是为了增强目标对象 静态代理是为了保护和隐藏目标对象\",\"获取目标对象构建的地方不同 装饰者是由外界传递进来，可以通过构造方法传递 静态代理是在代理类内部创建，以此来隐藏目标对象\"]},\"90\":{\"h\":\"5.4 桥接模式\"},\"91\":{\"h\":\"5.4.1 概述\",\"t\":[\"现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：\",\"我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。\",\"试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。\",\"定义：\",\"将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。\"]},\"92\":{\"h\":\"5.4.2 结构\",\"t\":[\"桥接（Bridge）模式包含以下主要角色：\",\"抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。\",\"扩展抽象化（Refined Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。\",\"实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。\",\"具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。\"]},\"93\":{\"h\":\"5.4.3 案例\",\"t\":[\"【例】视频播放器\",\"需要开发一个跨平台视频播放器，可以在不同操作系统平台（如 Windows、Mac、Linux 等）上播放多种格式的视频文件，常见的视频格式包括 RMVB、AVI、WMV 等。该播放器包含了两个维度，适合使用桥接模式。\",\"类图如下：\",\"代码如下：\",\"//视频文件 public interface VideoFile { void decode(String fileName); } //avi文件 public class AVIFile implements VideoFile { public void decode(String fileName) { System.out.println(\\\"avi视频文件：\\\"+ fileName); } } //rmvb文件 public class REVBBFile implements VideoFile { public void decode(String fileName) { System.out.println(\\\"rmvb文件：\\\" + fileName); } } //操作系统版本 public abstract class OperatingSystemVersion { protected VideoFile videoFile; public OperatingSystemVersion(VideoFile videoFile) { this.videoFile = videoFile; } public abstract void play(String fileName); } //Windows版本 public class Windows extends OperatingSystem { public Windows(VideoFile videoFile) { super(videoFile); } public void play(String fileName) { videoFile.decode(fileName); } } //mac版本 public class Mac extends OperatingSystemVersion { public Mac(VideoFile videoFile) { super(videoFile); } public void play(String fileName) { videoFile.decode(fileName); } } //测试类 public class Client { public static void main(String[] args) { OperatingSystem os = new Windows(new AVIFile()); os.play(\\\"战狼3\\\"); } } \",\"好处：\",\"桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。\",\"如：如果现在还有一种视频文件类型 wmv，我们只需要再定义一个类实现 VideoFile 接口即可，其他类不需要发生变化。\",\"实现细节对客户透明\"]},\"94\":{\"h\":\"5.4.4 使用场景\",\"t\":[\"当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。\",\"当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。\",\"当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。\"]},\"95\":{\"h\":\"5.5 外观模式\"},\"96\":{\"h\":\"5.5.1 概述\",\"t\":[\"有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。\",\"定义：\",\"又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。\",\"外观（Facade）模式是“迪米特法则”的典型应用\"]},\"97\":{\"h\":\"5.5.2 结构\",\"t\":[\"外观（Facade）模式包含以下主要角色：\",\"外观（Facade）角色：为多个子系统对外提供一个共同的接口。\",\"子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。\"]},\"98\":{\"h\":\"5.5.3 案例\",\"t\":[\"【例】智能家电控制\",\"小明的爷爷已经 60 岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。类图如下：\",\"代码如下：\",\"//灯类 public class Light { public void on() { System.out.println(\\\"打开了灯....\\\"); } public void off() { System.out.println(\\\"关闭了灯....\\\"); } } //电视类 public class TV { public void on() { System.out.println(\\\"打开了电视....\\\"); } public void off() { System.out.println(\\\"关闭了电视....\\\"); } } //控制类 public class AirCondition { public void on() { System.out.println(\\\"打开了空调....\\\"); } public void off() { System.out.println(\\\"关闭了空调....\\\"); } } //智能音箱 public class SmartAppliancesFacade { private Light light; private TV tv; private AirCondition airCondition; public SmartAppliancesFacade() { light = new Light(); tv = new TV(); airCondition = new AirCondition(); } public void say(String message) { if(message.contains(\\\"打开\\\")) { on(); } else if(message.contains(\\\"关闭\\\")) { off(); } else { System.out.println(\\\"我还听不懂你说的！！！\\\"); } } //起床后一键开电器 private void on() { System.out.println(\\\"起床了\\\"); light.on(); tv.on(); airCondition.on(); } //睡觉一键关电器 private void off() { System.out.println(\\\"睡觉了\\\"); light.off(); tv.off(); airCondition.off(); } } //测试类 public class Client { public static void main(String[] args) { //创建外观对象 SmartAppliancesFacade facade = new SmartAppliancesFacade(); //客户端直接与外观对象进行交互 facade.say(\\\"打开家电\\\"); facade.say(\\\"关闭家电\\\"); } } \",\"好处：\",\"降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。\",\"对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。\",\"缺点：\",\"不符合开闭原则，修改很麻烦\"]},\"99\":{\"h\":\"5.5.4 使用场景\",\"t\":[\"对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。\",\"当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。\",\"当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。\"]},\"100\":{\"h\":\"5.5.5 源码解析\",\"t\":[\"使用 tomcat 作为 web 容器时，接收浏览器发送过来的请求，tomcat 会将请求信息封装成 ServletRequest 对象，如下图 ① 处对象。但是大家想想 ServletRequest 是一个接口，它还有一个子接口 HttpServletRequest，而我们知道该 request 对象肯定是一个 HttpServletRequest 对象的子实现类对象，到底是哪个类的对象呢？可以通过输出 request 对象，我们就会发现是一个名为 RequestFacade 的类的对象。\",\"RequestFacade 类就使用了外观模式。先看结构图：\",\"为什么在此处使用外观模式呢？\",\"定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request 的实现。然后，将 RequestFacade 上转为 ServletRequest 传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。\"]},\"101\":{\"h\":\"5.6 组合模式\"},\"102\":{\"h\":\"5.6.1 概述\",\"t\":[\"对于这个图片肯定会非常熟悉，上图我们可以看做是一个文件系统，对于这样的结构我们称之为树形结构。在树形结构中可以通过调用某个方法来遍历整个树，当我们找到某个叶子节点后，就可以对叶子节点进行相关的操作。可以将这颗树理解成一个大的容器，容器里面包含很多的成员对象，这些成员对象即可是容器对象也可以是叶子对象。但是由于容器对象和叶子对象在功能上面的区别，使得我们在使用的过程中必须要区分容器对象和叶子对象，但是这样就会给客户带来不必要的麻烦，作为客户而已，它始终希望能够一致的对待容器对象和叶子对象。\",\"定义：\",\"又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\"]},\"103\":{\"h\":\"5.6.2 结构\",\"t\":[\"组合模式主要包含三种角色：\",\"抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。\",\"树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。\",\"叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。\"]},\"104\":{\"h\":\"5.6.3 案例实现\",\"t\":[\"【例】软件菜单\",\"如下图，我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。\",\"要实现该案例，我们先画出类图：\",\"代码实现：\",\"不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。\",\"//菜单组件 不管是菜单还是菜单项，都应该继承该类 public abstract class MenuComponent { protected String name; protected int level; //添加菜单 public void add(MenuComponent menuComponent){ throw new UnsupportedOperationException(); } //移除菜单 public void remove(MenuComponent menuComponent){ throw new UnsupportedOperationException(); } //获取指定的子菜单 public MenuComponent getChild(int i){ throw new UnsupportedOperationException(); } //获取菜单名称 public String getName(){ return name; } public void print(){ throw new UnsupportedOperationException(); } } \",\"这里的 MenuComponent 定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu 和 MenuItem 类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu 类可以包含子菜单，因此需要覆盖 add()、remove()、getChild()方法，但是 MenuItem 就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。\",\"public class Menu extends MenuComponent { private List<MenuComponent> menuComponentList; public Menu(String name,int level){ this.level = level; this.name = name; menuComponentList = new ArrayList<MenuComponent>(); } @Override public void add(MenuComponent menuComponent) { menuComponentList.add(menuComponent); } @Override public void remove(MenuComponent menuComponent) { menuComponentList.remove(menuComponent); } @Override public MenuComponent getChild(int i) { return menuComponentList.get(i); } @Override public void print() { for (int i = 1; i < level; i++) { System.out.print(\\\"--\\\"); } System.out.println(name); for (MenuComponent menuComponent : menuComponentList) { menuComponent.print(); } } } \",\"Menu 类已经实现了除了 getName 方法的其他所有方法，因为 Menu 类具有添加菜单，移除菜单和获取子菜单的功能。\",\"public class MenuItem extends MenuComponent { public MenuItem(String name,int level) { this.name = name; this.level = level; } @Override public void print() { for (int i = 1; i < level; i++) { System.out.print(\\\"--\\\"); } System.out.println(name); } } \",\"MenuItem 是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。\"]},\"105\":{\"h\":\"5.6.4 组合模式的分类\",\"t\":[\"在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。\",\"透明组合模式\",\"透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 MenuComponent 声明了 add、remove 、getChild 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。\",\"透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）\",\"安全组合模式\",\"在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 Menu 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。\"]},\"106\":{\"h\":\"5.6.5 优点\",\"t\":[\"组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。\",\"客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。\",\"在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭原则”。\",\"组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。\"]},\"107\":{\"h\":\"5.6.6 使用场景\",\"t\":[\"组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。\"]},\"108\":{\"h\":\"5.7 享元模式\"},\"109\":{\"h\":\"5.7.1 概述\",\"t\":[\"定义：\",\"运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。\"]},\"110\":{\"h\":\"5.7.2 结构\",\"t\":[\"享元（Flyweight ）模式中存在以下两种状态：\",\"内部状态，即不会随着环境的改变而改变的可共享部分。\",\"外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。\",\"享元模式的主要有以下角色：\",\"抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。\",\"具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。\",\"非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。\",\"享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。\"]},\"111\":{\"h\":\"5.7.3 案例实现\",\"t\":[\"【例】俄罗斯方块\",\"下面的图片是众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。\",\"先来看类图：\",\"代码如下：\",\"俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出 AbstractBox，用来定义共性的属性和行为。\",\"public abstract class AbstractBox { public abstract String getShape(); public void display(String color) { System.out.println(\\\"方块形状：\\\" + this.getShape() + \\\" 颜色：\\\" + color); } } \",\"接下来就是定义不同的形状了，IBox 类、LBox 类、OBox 类等。\",\"public class IBox extends AbstractBox { @Override public String getShape() { return \\\"I\\\"; } } public class LBox extends AbstractBox { @Override public String getShape() { return \\\"L\\\"; } } public class OBox extends AbstractBox { @Override public String getShape() { return \\\"O\\\"; } } \",\"提供了一个工厂类（BoxFactory），用来管理享元对象（也就是 AbstractBox 子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。\",\"public class BoxFactory { private static HashMap<String, AbstractBox> map; private BoxFactory() { map = new HashMap<String, AbstractBox>(); AbstractBox iBox = new IBox(); AbstractBox lBox = new LBox(); AbstractBox oBox = new OBox(); map.put(\\\"I\\\", iBox); map.put(\\\"L\\\", lBox); map.put(\\\"O\\\", oBox); } public static final BoxFactory getInstance() { return SingletonHolder.INSTANCE; } private static class SingletonHolder { private static final BoxFactory INSTANCE = new BoxFactory(); } public AbstractBox getBox(String key) { return map.get(key); } } \"]},\"112\":{\"h\":\"5.7.5 优缺点和使用场景\",\"t\":[\"1，优点\",\"极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能\",\"享元模式中的外部状态相对独立，且不影响内部状态\",\"2，缺点：\",\"为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂\",\"3，使用场景：\",\"一个系统有大量相同或者相似的对象，造成内存的大量耗费。\",\"对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。\",\"在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。\"]},\"113\":{\"h\":\"5.7.6 JDK 源码解析\",\"t\":[\"Integer 类使用了享元模式。我们先看下面的例子：\",\"public class Demo { public static void main(String[] args) { Integer i1 = 127; Integer i2 = 127; System.out.println(\\\"i1和i2对象是否是同一个对象？\\\" + (i1 == i2)); Integer i3 = 128; Integer i4 = 128; System.out.println(\\\"i3和i4对象是否是同一个对象？\\\" + (i3 == i4)); } } \",\"运行上面代码，结果如下：\",\"为什么第一个输出语句输出的是 true，第二个输出语句输出的是 false？通过反编译软件进行反编译，代码如下：\",\"public class Demo { public static void main(String[] args) { Integer i1 = Integer.valueOf((int)127); Integer i2 Integer.valueOf((int)127); System.out.println((String)new StringBuilder().append((String)\\\"i1\\\\u548ci2\\\\u5bf9\\\\u8c61\\\\u662f\\\\u5426\\\\u662f\\\\u540c\\\\u4e00\\\\u4e2a\\\\u5bf9\\\\u8c61\\\\uff1f\\\").append((boolean)(i1 == i2)).toString()); Integer i3 = Integer.valueOf((int)128); Integer i4 = Integer.valueOf((int)128); System.out.println((String)new StringBuilder().append((String)\\\"i3\\\\u548ci4\\\\u5bf9\\\\u8c61\\\\u662f\\\\u5426\\\\u662f\\\\u540c\\\\u4e00\\\\u4e2a\\\\u5bf9\\\\u8c61\\\\uff1f\\\").append((boolean)(i3 == i4)).toString()); } } \",\"上面代码可以看到，直接给 Integer 类型的变量赋值基本数据类型数据的操作底层使用的是 valueOf() ，所以只需要看该方法即可\",\"public final class Integer extends Number implements Comparable<Integer> { public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } private static class IntegerCache { static final int low = -128; static final int high; static final Integer cache[]; static { int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\\\"java.lang.Integer.IntegerCache.high\\\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; } private IntegerCache() {} } } \",\"可以看到 Integer 默认先创建并缓存 -128 ~ 127 之间数的 Integer 对象，当调用 valueOf 时如果参数在 -128 ~ 127 之间则计算下标并从缓存中返回，否则创建一个新的 Integer 对象。\",\"行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。\",\"行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。\",\"行为型模式分为：\",\"模板方法模式\",\"策略模式\",\"命令模式\",\"职责链模式\",\"状态模式\",\"观察者模式\",\"中介者模式\",\"迭代器模式\",\"访问者模式\",\"备忘录模式\",\"解释器模式\",\"以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。\"]},\"114\":{\"h\":\"6.1 模板方法模式\"},\"115\":{\"h\":\"6.1.1 概述\",\"t\":[\"在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。\",\"例如，去银行办理业务一般要经过以下 4 个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。\",\"定义：\",\"定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。\"]},\"116\":{\"h\":\"6.1.2 结构\",\"t\":[\"模板方法（Template Method）模式包含以下主要角色：\",\"抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。\",\"模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。\",\"基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：\",\"抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。\",\"具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。\",\"钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。\",\"一般钩子方法是用于判断的逻辑方法，这类方法名一般为 isXxx，返回值类型为 boolean 类型。\",\"具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。\"]},\"117\":{\"h\":\"6.1.3 案例实现\",\"t\":[\"【例】炒菜\",\"炒菜的步骤是固定的，分为倒油、热油、倒蔬菜、倒调料品、翻炒等步骤。现通过模板方法模式来用代码模拟。类图如下：\",\"代码如下：\",\"public abstract class AbstractClass { public final void cookProcess() { //第一步：倒油 this.pourOil(); //第二步：热油 this.heatOil(); //第三步：倒蔬菜 this.pourVegetable(); //第四步：倒调味料 this.pourSauce(); //第五步：翻炒 this.fry(); } public void pourOil() { System.out.println(\\\"倒油\\\"); } //第二步：热油是一样的，所以直接实现 public void heatOil() { System.out.println(\\\"热油\\\"); } //第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心） public abstract void pourVegetable(); //第四步：倒调味料是不一样 public abstract void pourSauce(); //第五步：翻炒是一样的，所以直接实现 public void fry(){ System.out.println(\\\"炒啊炒啊炒到熟啊\\\"); } } public class ConcreteClass_BaoCai extends AbstractClass { @Override public void pourVegetable() { System.out.println(\\\"下锅的蔬菜是包菜\\\"); } @Override public void pourSauce() { System.out.println(\\\"下锅的酱料是辣椒\\\"); } } public class ConcreteClass_CaiXin extends AbstractClass { @Override public void pourVegetable() { System.out.println(\\\"下锅的蔬菜是菜心\\\"); } @Override public void pourSauce() { System.out.println(\\\"下锅的酱料是蒜蓉\\\"); } } public class Client { public static void main(String[] args) { //炒手撕包菜 ConcreteClass_BaoCai baoCai = new ConcreteClass_BaoCai(); baoCai.cookProcess(); //炒蒜蓉菜心 ConcreteClass_CaiXin caiXin = new ConcreteClass_CaiXin(); caiXin.cookProcess(); } } \",\"注意：为防止恶意操作，一般模板方法都加上 final 关键词。\"]},\"118\":{\"h\":\"6.1.3 优缺点\",\"t\":[\"优点：\",\"提高代码复用性\",\"将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。\",\"实现了反向控制\",\"通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并符合“开闭原则”。\",\"缺点：\",\"对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。\",\"父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。\"]},\"119\":{\"h\":\"6.1.4 适用场景\",\"t\":[\"算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。\",\"需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。\"]},\"120\":{\"h\":\"6.1.5 JDK 源码解析\",\"t\":[\"InputStream 类就使用了模板方法模式。在 InputStream 类中定义了多个 read() 方法，如下：\",\"public abstract class InputStream implements Closeable { //抽象方法，要求子类必须重写 public abstract int read() throws IOException; public int read(byte b[]) throws IOException { return read(b, 0, b.length); } public int read(byte b[], int off, int len) throws IOException { if (b == null) { throw new NullPointerException(); } else if (off < 0 || len < 0 || len > b.length - off) { throw new IndexOutOfBoundsException(); } else if (len == 0) { return 0; } int c = read(); //调用了无参的read方法，该方法是每次读取一个字节数据 if (c == -1) { return -1; } b[off] = (byte)c; int i = 1; try { for (; i < len ; i++) { c = read(); if (c == -1) { break; } b[off + i] = (byte)c; } } catch (IOException ee) { } return i; } } \",\"从上面代码可以看到，无参的 read() 方法是抽象方法，要求子类必须实现。而 read(byte b[]) 方法调用了 read(byte b[], int off, int len) 方法，所以在此处重点看的方法是带三个参数的方法。\",\"在该方法中第 18 行、27 行，可以看到调用了无参的抽象的 read() 方法。\",\"总结如下： 在 InputStream 父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取 len 个字节数据。具体如何读取一个字节数据呢？由子类实现。\"]},\"121\":{\"h\":\"6.2 策略模式\"},\"122\":{\"h\":\"6.2.1 概述\",\"t\":[\"先看下面的图片，我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。\",\"作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择 Idea 进行开发，也可以使用 eclipse 进行开发，也可以使用其他的一些开发工具。\",\"定义：\",\"该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。\"]},\"123\":{\"h\":\"6.2.2 结构\",\"t\":[\"策略模式的主要角色如下：\",\"抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。\",\"具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。\",\"环境（Context）类：持有一个策略类的引用，最终给客户端调用。\"]},\"124\":{\"h\":\"6.2.3 案例实现\",\"t\":[\"【例】促销活动\",\"一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。类图如下：\",\"代码如下：\",\"定义百货公司所有促销活动的共同接口\",\"public interface Strategy { void show(); } \",\"定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动\",\"//为春节准备的促销活动A public class StrategyA implements Strategy { public void show() { System.out.println(\\\"买一送一\\\"); } } //为中秋准备的促销活动B public class StrategyB implements Strategy { public void show() { System.out.println(\\\"满200元减50元\\\"); } } //为圣诞准备的促销活动C public class StrategyC implements Strategy { public void show() { System.out.println(\\\"满1000元加一元换购任意200元以下商品\\\"); } } \",\"定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员\",\"public class SalesMan { //持有抽象策略角色的引用 private Strategy strategy; public SalesMan(Strategy strategy) { this.strategy = strategy; } //向客户展示促销活动 public void salesManShow(){ strategy.show(); } } \"]},\"125\":{\"h\":\"6.2.4 优缺点\",\"t\":[\"1，优点：\",\"策略类之间可以自由切换\",\"由于策略类都实现同一个接口，所以使它们之间可以自由切换。\",\"易于扩展\",\"增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原则“\",\"避免使用多重条件选择语句（if else），充分体现面向对象设计思想。\",\"2，缺点：\",\"客户端必须知道所有的策略类，并自行决定使用哪一个策略类。\",\"策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。\"]},\"126\":{\"h\":\"6.2.5 使用场景\",\"t\":[\"一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。\",\"一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。\",\"系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。\",\"系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。\",\"多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。\"]},\"127\":{\"h\":\"6.2.6 JDK 源码解析\",\"t\":[\"Comparator 中的策略模式。在 Arrays 类中有一个 sort() 方法，如下：\",\"public class Arrays{ public static <T> void sort(T[] a, Comparator<? super T> c) { if (c == null) { sort(a); } else { if (LegacyMergeSort.userRequested) legacyMergeSort(a, c); else TimSort.sort(a, 0, a.length, c, null, 0, 0); } } } \",\"Arrays 就是一个环境角色类，这个 sort 方法可以传一个新策略让 Arrays 根据这个策略来进行排序。就比如下面的测试类。\",\"public class demo { public static void main(String[] args) { Integer[] data = {12, 2, 3, 2, 4, 5, 1}; // 实现降序排序 Arrays.sort(data, new Comparator<Integer>() { public int compare(Integer o1, Integer o2) { return o2 - o1; } }); System.out.println(Arrays.toString(data)); //[12, 5, 4, 3, 2, 2, 1] } } \",\"这里我们在调用 Arrays 的 sort 方法时，第二个参数传递的是 Comparator 接口的子实现类对象。所以 Comparator 充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays 类的 sort 方法到底有没有使用 Comparator 子实现类中的 compare() 方法吗？让我们继续查看 TimSort 类的 sort() 方法，代码如下：\",\"class TimSort<T> { static <T> void sort(T[] a, int lo, int hi, Comparator<? super T> c, T[] work, int workBase, int workLen) { assert c != null && a != null && lo >= 0 && lo <= hi && hi <= a.length; int nRemaining = hi - lo; if (nRemaining < 2) return; // Arrays of size 0 and 1 are always sorted // If array is small, do a \\\"mini-TimSort\\\" with no merges if (nRemaining < MIN_MERGE) { int initRunLen = countRunAndMakeAscending(a, lo, hi, c); binarySort(a, lo, hi, lo + initRunLen, c); return; } ... } private static <T> int countRunAndMakeAscending(T[] a, int lo, int hi,Comparator<? super T> c) { assert lo < hi; int runHi = lo + 1; if (runHi == hi) return 1; // Find end of run, and reverse range if descending if (c.compare(a[runHi++], a[lo]) < 0) { // Descending while (runHi < hi && c.compare(a[runHi], a[runHi - 1]) < 0) runHi++; reverseRange(a, lo, runHi); } else { // Ascending while (runHi < hi && c.compare(a[runHi], a[runHi - 1]) >= 0) runHi++; } return runHi - lo; } } \",\"上面的代码中最终会跑到 countRunAndMakeAscending() 这个方法中。我们可以看见，只用了 compare 方法，所以在调用 Arrays.sort 方法只传具体 compare 重写方法的类对象就行，这也是 Comparator 接口中必须要子类实现的一个方法。\"]},\"128\":{\"h\":\"6.3 命令模式\"},\"129\":{\"h\":\"6.3.1 概述\",\"t\":[\"日常生活中，我们出去吃饭都会遇到下面的场景。\",\"定义：\",\"将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。\"]},\"130\":{\"h\":\"6.3.2 结构\",\"t\":[\"命令模式包含以下主要角色：\",\"抽象命令类（Command）角色： 定义命令的接口，声明执行的方法。\",\"具体命令（Concrete Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。\",\"实现者/接收者（Receiver）角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。\",\"调用者/请求者（Invoker）角色： 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。\"]},\"131\":{\"h\":\"6.3.3 案例实现\",\"t\":[\"将上面的案例用代码实现，那我们就需要分析命令模式的角色在该案例中由谁来充当。\",\"服务员： 就是调用者角色，由她来发起命令。\",\"资深大厨： 就是接收者角色，真正命令执行的对象。\",\"订单： 命令中包含订单。\",\"类图如下：\",\"代码如下：\",\"public interface Command { void execute();//只需要定义一个统一的执行方法 } public class OrderCommand implements Command { //持有接受者对象 private SeniorChef receiver; private Order order; public OrderCommand(SeniorChef receiver, Order order){ this.receiver = receiver; this.order = order; } public void execute() { System.out.println(order.getDiningTable() + \\\"桌的订单：\\\"); Set<String> keys = order.getFoodDic().keySet(); for (String key : keys) { receiver.makeFood(order.getFoodDic().get(key),key); } try { Thread.sleep(100);//停顿一下 模拟做饭的过程 } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(order.getDiningTable() + \\\"桌的饭弄好了\\\"); } } public class Order { // 餐桌号码 private int diningTable; // 用来存储餐名并记录份数 private Map<String, Integer> foodDic = new HashMap<String, Integer>(); public int getDiningTable() { return diningTable; } public void setDiningTable(int diningTable) { this.diningTable = diningTable; } public Map<String, Integer> getFoodDic() { return foodDic; } public void setFoodDic(String name, int num) { foodDic.put(name,num); } } // 资深大厨类 是命令的Receiver public class SeniorChef { public void makeFood(int num,String foodName) { System.out.println(num + \\\"份\\\" + foodName); } } public class Waitor { private ArrayList<Command> commands;//可以持有很多的命令对象 public Waitor() { commands = new ArrayList(); } public void setCommand(Command cmd){ commands.add(cmd); } // 发出命令 喊 订单来了，厨师开始执行 public void orderUp() { System.out.println(\\\"美女服务员：叮咚，大厨，新订单来了.......\\\"); for (int i = 0; i < commands.size(); i++) { Command cmd = commands.get(i); if (cmd != null) { cmd.execute(); } } } } public class Client { public static void main(String[] args) { //创建2个order Order order1 = new Order(); order1.setDiningTable(1); order1.getFoodDic().put(\\\"西红柿鸡蛋面\\\",1); order1.getFoodDic().put(\\\"小杯可乐\\\",2); Order order2 = new Order(); order2.setDiningTable(3); order2.getFoodDic().put(\\\"尖椒肉丝盖饭\\\",1); order2.getFoodDic().put(\\\"小杯雪碧\\\",1); //创建接收者 SeniorChef receiver=new SeniorChef(); //将订单和接收者封装成命令对象 OrderCommand cmd1 = new OrderCommand(receiver, order1); OrderCommand cmd2 = new OrderCommand(receiver, order2); //创建调用者 waitor Waitor invoker = new Waitor(); invoker.setCommand(cmd1); invoker.setCommand(cmd2); //将订单带到柜台 并向厨师喊 订单来了 invoker.orderUp(); } } \"]},\"132\":{\"h\":\"6.3.4 优缺点\",\"t\":[\"1，优点：\",\"降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。\",\"增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。\",\"可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。\",\"方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。\",\"2，缺点：\",\"使用命令模式可能会导致某些系统有过多的具体命令类。\",\"系统结构更加复杂。\"]},\"133\":{\"h\":\"6.3.5 使用场景\",\"t\":[\"系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。\",\"系统需要在不同的时间指定请求、将请求排队和执行请求。\",\"系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。\"]},\"134\":{\"h\":\"6.3.6 JDK 源码解析\",\"t\":[\"Runable 是一个典型命令模式，Runnable 担当命令的角色，Thread 充当的是调用者，start 方法就是其执行方法\",\"//命令接口(抽象命令角色) public interface Runnable { public abstract void run(); } //调用者 public class Thread implements Runnable { private Runnable target; public synchronized void start() { if (threadStatus != 0) throw new IllegalThreadStateException(); group.add(this); boolean started = false; try { start0(); started = true; } finally { try { if (!started) { group.threadStartFailed(this); } } catch (Throwable ignore) { } } } private native void start0(); } \",\"会调用一个 native 方法 start0(),调用系统方法，开启一个线程。而接收者是对程序员开放的，可以自己定义接收者。\",\"/** * jdk Runnable 命令模式 * TurnOffThread ： 属于具体 */ public class TurnOffThread implements Runnable{ private Receiver receiver; public TurnOffThread(Receiver receiver) { this.receiver = receiver; } public void run() { receiver.turnOFF(); } } \",\"/** * 测试类 */ public class Demo { public static void main(String[] args) { Receiver receiver = new Receiver(); TurnOffThread turnOffThread = new TurnOffThread(receiver); Thread thread = new Thread(turnOffThread); thread.start(); } } \"]},\"135\":{\"h\":\"6.4 责任链模式\"},\"136\":{\"h\":\"6.4.1 概述\",\"t\":[\"在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。\",\"定义：\",\"又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。\"]},\"137\":{\"h\":\"6.4.2 结构\",\"t\":[\"职责链模式主要包含以下角色:\",\"抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。\",\"具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。\",\"客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。\"]},\"138\":{\"h\":\"6.4.3 案例实现\",\"t\":[\"现需要开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假 1 天到 3 天的假还需要部门经理同意；请求 3 天到 7 天还需要总经理同意才行。\",\"类图如下：\",\"代码如下：\",\"//请假条 public class LeaveRequest { private String name;//姓名 private int num;//请假天数 private String content;//请假内容 public LeaveRequest(String name, int num, String content) { this.name = name; this.num = num; this.content = content; } public String getName() { return name; } public int getNum() { return num; } public String getContent() { return content; } } //处理者抽象类 public abstract class Handler { protected final static int NUM_ONE = 1; protected final static int NUM_THREE = 3; protected final static int NUM_SEVEN = 7; //该领导处理的请假天数区间 private int numStart; private int numEnd; //领导上面还有领导 private Handler nextHandler; //设置请假天数范围 上不封顶 public Handler(int numStart) { this.numStart = numStart; } //设置请假天数范围 public Handler(int numStart, int numEnd) { this.numStart = numStart; this.numEnd = numEnd; } //设置上级领导 public void setNextHandler(Handler nextHandler){ this.nextHandler = nextHandler; } //提交请假条 public final void submit(LeaveRequest leave){ if(0 == this.numStart){ return; } //如果请假天数达到该领导者的处理要求 if(leave.getNum() >= this.numStart){ this.handleLeave(leave); //如果还有上级 并且请假天数超过了当前领导的处理范围 if(null != this.nextHandler && leave.getNum() > numEnd){ this.nextHandler.submit(leave);//继续提交 } else { System.out.println(\\\"流程结束\\\"); } } } //各级领导处理请假条方法 protected abstract void handleLeave(LeaveRequest leave); } //小组长 public class GroupLeader extends Handler { public GroupLeader() { //小组长处理1-3天的请假 super(Handler.NUM_ONE, Handler.NUM_THREE); } @Override protected void handleLeave(LeaveRequest leave) { System.out.println(leave.getName() + \\\"请假\\\" + leave.getNum() + \\\"天,\\\" + leave.getContent() + \\\"。\\\"); System.out.println(\\\"小组长审批：同意。\\\"); } } //部门经理 public class Manager extends Handler { public Manager() { //部门经理处理3-7天的请假 super(Handler.NUM_THREE, Handler.NUM_SEVEN); } @Override protected void handleLeave(LeaveRequest leave) { System.out.println(leave.getName() + \\\"请假\\\" + leave.getNum() + \\\"天,\\\" + leave.getContent() + \\\"。\\\"); System.out.println(\\\"部门经理审批：同意。\\\"); } } //总经理 public class GeneralManager extends Handler { public GeneralManager() { //部门经理处理7天以上的请假 super(Handler.NUM_SEVEN); } @Override protected void handleLeave(LeaveRequest leave) { System.out.println(leave.getName() + \\\"请假\\\" + leave.getNum() + \\\"天,\\\" + leave.getContent() + \\\"。\\\"); System.out.println(\\\"总经理审批：同意。\\\"); } } //测试类 public class Client { public static void main(String[] args) { //请假条来一张 LeaveRequest leave = new LeaveRequest(\\\"小花\\\",5,\\\"身体不适\\\"); //各位领导 GroupLeader groupLeader = new GroupLeader(); Manager manager = new Manager(); GeneralManager generalManager = new GeneralManager(); groupLeader.setNextHandler(manager);//小组长的领导是部门经理 manager.setNextHandler(generalManager);//部门经理的领导是总经理 //之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。 //提交申请 groupLeader.submit(leave); } } \"]},\"139\":{\"h\":\"6.4.4 优缺点\",\"t\":[\"1，优点：\",\"降低了对象之间的耦合度\",\"该模式降低了请求发送者和接收者的耦合度。\",\"增强了系统的可扩展性\",\"可以根据需要增加新的请求处理类，满足开闭原则。\",\"增强了给对象指派职责的灵活性\",\"当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。\",\"责任链简化了对象之间的连接\",\"一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。\",\"责任分担\",\"每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。\",\"2，缺点：\",\"不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。\",\"对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。\",\"职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。\"]},\"140\":{\"h\":\"6.4.5 源码解析\",\"t\":[\"在 javaWeb 应用开发中，FilterChain 是职责链（过滤器）模式的典型应用，以下是 Filter 的模拟实现分析:\",\"模拟 web 请求 Request 以及 web 响应 Response\",\"public interface Request{ } public interface Response{ } \",\"模拟 web 过滤器 Filter\",\" public interface Filter { public void doFilter(Request req,Response res,FilterChain c); } \",\"模拟实现具体过滤器\",\"public class FirstFilter implements Filter { @Override public void doFilter(Request request, Response response, FilterChain chain) { System.out.println(\\\"过滤器1 前置处理\\\"); // 先执行所有request再倒序执行所有response chain.doFilter(request, response); System.out.println(\\\"过滤器1 后置处理\\\"); } } public class SecondFilter implements Filter { @Override public void doFilter(Request request, Response response, FilterChain chain) { System.out.println(\\\"过滤器2 前置处理\\\"); // 先执行所有request再倒序执行所有response chain.doFilter(request, response); System.out.println(\\\"过滤器2 后置处理\\\"); } } \",\"模拟实现过滤器链 FilterChain\",\"public class FilterChain { private List<Filter> filters = new ArrayList<Filter>(); private int index = 0; // 链式调用 public FilterChain addFilter(Filter filter) { this.filters.add(filter); return this; } public void doFilter(Request request, Response response) { if (index == filters.size()) { return; } Filter filter = filters.get(index); index++; filter.doFilter(request, response, this); } } \",\"测试类\",\"public class Client { public static void main(String[] args) { Request req = null; Response res = null ; FilterChain filterChain = new FilterChain(); filterChain.addFilter(new FirstFilter()).addFilter(new SecondFilter()); filterChain.doFilter(req,res); } } \"]},\"141\":{\"h\":\"6.5 状态模式\"},\"142\":{\"h\":\"6.5.1 概述\",\"t\":[\"【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。\",\"类图如下：\",\"代码如下：\",\"public interface ILift { //电梯的4个状态 //开门状态 public final static int OPENING_STATE = 1; //关门状态 public final static int CLOSING_STATE = 2; //运行状态 public final static int RUNNING_STATE = 3; //停止状态 public final static int STOPPING_STATE = 4; //设置电梯的状态 public void setState(int state); //电梯的动作 public void open(); public void close(); public void run(); public void stop(); } public class Lift implements ILift { private int state; @Override public void setState(int state) { this.state = state; } //执行关门动作 @Override public void close() { switch (this.state) { case OPENING_STATE: System.out.println(\\\"电梯关门了。。。\\\");//只有开门状态可以关闭电梯门，可以对应电梯状态表来看 this.setState(CLOSING_STATE);//关门之后电梯就是关闭状态了 break; case CLOSING_STATE: //do nothing //已经是关门状态，不能关门 break; case RUNNING_STATE: //do nothing //运行时电梯门是关着的，不能关门 break; case STOPPING_STATE: //do nothing //停止时电梯也是关着的，不能关门 break; } } //执行开门动作 @Override public void open() { switch (this.state) { case OPENING_STATE://门已经开了，不能再开门了 //do nothing break; case CLOSING_STATE://关门状态，门打开: System.out.println(\\\"电梯门打开了。。。\\\"); this.setState(OPENING_STATE); break; case RUNNING_STATE: //do nothing 运行时电梯不能开门 break; case STOPPING_STATE: System.out.println(\\\"电梯门开了。。。\\\");//电梯停了，可以开门了 this.setState(OPENING_STATE); break; } } //执行运行动作 @Override public void run() { switch (this.state) { case OPENING_STATE://电梯不能开着门就走 //do nothing break; case CLOSING_STATE://门关了，可以运行了 System.out.println(\\\"电梯开始运行了。。。\\\"); this.setState(RUNNING_STATE);//现在是运行状态 break; case RUNNING_STATE: //do nothing 已经是运行状态了 break; case STOPPING_STATE: System.out.println(\\\"电梯开始运行了。。。\\\"); this.setState(RUNNING_STATE); break; } } //执行停止动作 @Override public void stop() { switch (this.state) { case OPENING_STATE: //开门的电梯已经是是停止的了(正常情况下) //do nothing break; case CLOSING_STATE://关门时才可以停止 System.out.println(\\\"电梯停止了。。。\\\"); this.setState(STOPPING_STATE); break; case RUNNING_STATE://运行时当然可以停止了 System.out.println(\\\"电梯停止了。。。\\\"); this.setState(STOPPING_STATE); break; case STOPPING_STATE: //do nothing break; } } } public class Client { public static void main(String[] args) { Lift lift = new Lift(); lift.setState(ILift.STOPPING_STATE);//电梯是停止的 lift.open();//开门 lift.close();//关门 lift.run();//运行 lift.stop();//停止 } } \",\"问题分析：\",\"使用了大量的 switch…case 这样的判断（if…else 也是一样)，使程序的可阅读性变差。\",\"扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑\",\"定义：\",\"对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。\"]},\"143\":{\"h\":\"6.5.2 结构\",\"t\":[\"状态模式包含以下主要角色。\",\"环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。\",\"抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。\",\"具体状态（Concrete State）角色：实现抽象状态所对应的行为。\"]},\"144\":{\"h\":\"6.5.3 案例实现\",\"t\":[\"对上述电梯的案例使用状态模式进行改进。类图如下：\",\"代码如下：\",\"//抽象状态类 public abstract class LiftState { //定义一个环境角色，也就是封装状态的变化引起的功能变化 protected Context context; public void setContext(Context context) { this.context = context; } //电梯开门动作 public abstract void open(); //电梯关门动作 public abstract void close(); //电梯运行动作 public abstract void run(); //电梯停止动作 public abstract void stop(); } //开启状态 public class OpenningState extends LiftState { //开启当然可以关闭了，我就想测试一下电梯门开关功能 @Override public void open() { System.out.println(\\\"电梯门开启...\\\"); } @Override public void close() { //状态修改 super.context.setLiftState(Context.closeingState); //动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作 super.context.getLiftState().close(); } //电梯门不能开着就跑，这里什么也不做 @Override public void run() { //do nothing } //开门状态已经是停止的了 @Override public void stop() { //do nothing } } //运行状态 public class RunningState extends LiftState { //运行的时候开电梯门？你疯了！电梯不会给你开的 @Override public void open() { //do nothing } //电梯门关闭？这是肯定了 @Override public void close() {//虽然可以关门，但这个动作不归我执行 //do nothing } //这是在运行状态下要实现的方法 @Override public void run() { System.out.println(\\\"电梯正在运行...\\\"); } //这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了 @Override public void stop() { super.context.setLiftState(Context.stoppingState); super.context.stop(); } } //停止状态 public class StoppingState extends LiftState { //停止状态，开门，那是要的！ @Override public void open() { //状态修改 super.context.setLiftState(Context.openningState); //动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作 super.context.getLiftState().open(); } @Override public void close() {//虽然可以关门，但这个动作不归我执行 //状态修改 super.context.setLiftState(Context.closeingState); //动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作 super.context.getLiftState().close(); } //停止状态再跑起来，正常的很 @Override public void run() { //状态修改 super.context.setLiftState(Context.runningState); //动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作 super.context.getLiftState().run(); } //停止状态是怎么发生的呢？当然是停止方法执行了 @Override public void stop() { System.out.println(\\\"电梯停止了...\\\"); } } //关闭状态 public class ClosingState extends LiftState { @Override //电梯门关闭，这是关闭状态要实现的动作 public void close() { System.out.println(\\\"电梯门关闭...\\\"); } //电梯门关了再打开，逗你玩呢，那这个允许呀 @Override public void open() { super.context.setLiftState(Context.openningState); super.context.open(); } //电梯门关了就跑，这是再正常不过了 @Override public void run() { super.context.setLiftState(Context.runningState); super.context.run(); } //电梯门关着，我就不按楼层 @Override public void stop() { super.context.setLiftState(Context.stoppingState); super.context.stop(); } } //环境角色 public class Context { //定义出所有的电梯状态 public final static OpenningState openningState = new OpenningState();//开门状态，这时候电梯只能关闭 public final static ClosingState closeingState = new ClosingState();//关闭状态，这时候电梯可以运行、停止和开门 public final static RunningState runningState = new RunningState();//运行状态，这时候电梯只能停止 public final static StoppingState stoppingState = new StoppingState();//停止状态，这时候电梯可以开门、运行 //定义一个当前电梯状态 private LiftState liftState; public LiftState getLiftState() { return this.liftState; } public void setLiftState(LiftState liftState) { //当前环境改变 this.liftState = liftState; //把当前的环境通知到各个实现类中 this.liftState.setContext(this); } public void open() { this.liftState.open(); } public void close() { this.liftState.close(); } public void run() { this.liftState.run(); } public void stop() { this.liftState.stop(); } } //测试类 public class Client { public static void main(String[] args) { Context context = new Context(); context.setLiftState(new ClosingState()); context.open(); context.close(); context.run(); context.stop(); } } \"]},\"145\":{\"h\":\"6.5.4 优缺点\",\"t\":[\"1，优点：\",\"将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。\",\"允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。\",\"2，缺点：\",\"状态模式的使用必然会增加系统类和对象的个数。\",\"状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。\",\"状态模式对\\\"开闭原则\\\"的支持并不太好。\"]},\"146\":{\"h\":\"6.5.5 使用场景\",\"t\":[\"当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。\",\"一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。\"]},\"147\":{\"h\":\"6.6 观察者模式\"},\"148\":{\"h\":\"6.6.1 概述\",\"t\":[\"定义：\",\"又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。\"]},\"149\":{\"h\":\"6.6.2 结构\",\"t\":[\"在观察者模式中有如下角色：\",\"Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。\",\"ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。\",\"Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。\",\"ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。\"]},\"150\":{\"h\":\"6.6.3 案例实现\",\"t\":[\"【例】微信公众号\",\"在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。\",\"类图如下：\",\"代码如下：\",\"定义抽象观察者类，里面定义一个更新的方法\",\"public interface Observer { void update(String message); } \",\"定义具体观察者类，微信用户是观察者，里面实现了更新的方法\",\"public class WeixinUser implements Observer { // 微信用户名 private String name; public WeixinUser(String name) { this.name = name; } @Override public void update(String message) { System.out.println(name + \\\"-\\\" + message); } } \",\"定义抽象主题类，提供了 attach、detach、notify 三个方法\",\"public interface Subject { //增加订阅者 public void attach(Observer observer); //删除订阅者 public void detach(Observer observer); //通知订阅者更新消息 public void notify(String message); } \",\"微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法\",\"public class SubscriptionSubject implements Subject { //储存订阅公众号的微信用户 private List<Observer> weixinUserlist = new ArrayList<Observer>(); @Override public void attach(Observer observer) { weixinUserlist.add(observer); } @Override public void detach(Observer observer) { weixinUserlist.remove(observer); } @Override public void notify(String message) { for (Observer observer : weixinUserlist) { observer.update(message); } } } \",\"客户端程序\",\"public class Client { public static void main(String[] args) { SubscriptionSubject mSubscriptionSubject=new SubscriptionSubject(); //创建微信用户 WeixinUser user1=new WeixinUser(\\\"孙悟空\\\"); WeixinUser user2=new WeixinUser(\\\"猪悟能\\\"); WeixinUser user3=new WeixinUser(\\\"沙悟净\\\"); //订阅公众号 mSubscriptionSubject.attach(user1); mSubscriptionSubject.attach(user2); mSubscriptionSubject.attach(user3); //公众号更新发出消息给订阅的微信用户 mSubscriptionSubject.notify(\\\"传智黑马的专栏更新了\\\"); } } \"]},\"151\":{\"h\":\"6.6.4 优缺点\",\"t\":[\"1，优点：\",\"降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。\",\"被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】\",\"2，缺点：\",\"如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时\",\"如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃\"]},\"152\":{\"h\":\"6.6.5 使用场景\",\"t\":[\"对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。\",\"当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。\"]},\"153\":{\"h\":\"6.6.6 JDK 中提供的实现\",\"t\":[\"在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。\",\"1，Observable 类\",\"Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。\",\"void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。\",\"void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update 方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。\",\"void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为 true 时，notifyObservers() 才会通知观察者。\",\"2，Observer 接口\",\"Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。\",\"【例】警察抓小偷\",\"警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：\",\"小偷是一个被观察者，所以需要继承 Observable 类\",\"public class Thief extends Observable { private String name; public Thief(String name) { this.name = name; } public void setName(String name) { this.name = name; } public String getName() { return name; } public void steal() { System.out.println(\\\"小偷：我偷东西了，有没有人来抓我！！！\\\"); super.setChanged(); //changed = true super.notifyObservers(); } } \",\"警察是一个观察者，所以需要让其实现 Observer 接口\",\"public class Policemen implements Observer { private String name; public Policemen(String name) { this.name = name; } public void setName(String name) { this.name = name; } public String getName() { return name; } @Override public void update(Observable o, Object arg) { System.out.println(\\\"警察：\\\" + ((Thief) o).getName() + \\\"，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！\\\"); } } \",\"客户端代码\",\"public class Client { public static void main(String[] args) { //创建小偷对象 Thief t = new Thief(\\\"隔壁老王\\\"); //创建警察对象 Policemen p = new Policemen(\\\"小李\\\"); //让警察盯着小偷 t.addObserver(p); //小偷偷东西 t.steal(); } } \"]},\"154\":{\"h\":\"6.7 中介者模式\"},\"155\":{\"h\":\"6.7.1 概述\",\"t\":[\"一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象 1 发生变化，那么将会有 4 个对象受到影响。如果对象 2 发生变化，那么将会有 5 个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。\",\"如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。\",\"定义：\",\"又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。\"]},\"156\":{\"h\":\"6.7.2 结构\",\"t\":[\"中介者模式包含以下主要角色：\",\"抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。\",\"具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。\",\"抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。\",\"具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。\"]},\"157\":{\"h\":\"6.7.3 案例实现\",\"t\":[\"【例】租房\",\"现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者。\",\"类图如下：\",\"代码如下：\",\"//抽象中介者 public abstract class Mediator { //申明一个联络方法 public abstract void constact(String message,Person person); } //抽象同事类 public abstract class Person { protected String name; protected Mediator mediator; public Person(String name,Mediator mediator){ this.name = name; this.mediator = mediator; } } //具体同事类 房屋拥有者 public class HouseOwner extends Person { public HouseOwner(String name, Mediator mediator) { super(name, mediator); } //与中介者联系 public void constact(String message){ mediator.constact(message, this); } //获取信息 public void getMessage(String message){ System.out.println(\\\"房主\\\" + name +\\\"获取到的信息：\\\" + message); } } //具体同事类 承租人 public class Tenant extends Person { public Tenant(String name, Mediator mediator) { super(name, mediator); } //与中介者联系 public void constact(String message){ mediator.constact(message, this); } //获取信息 public void getMessage(String message){ System.out.println(\\\"租房者\\\" + name +\\\"获取到的信息：\\\" + message); } } //中介机构 public class MediatorStructure extends Mediator { //首先中介结构必须知道所有房主和租房者的信息 private HouseOwner houseOwner; private Tenant tenant; public HouseOwner getHouseOwner() { return houseOwner; } public void setHouseOwner(HouseOwner houseOwner) { this.houseOwner = houseOwner; } public Tenant getTenant() { return tenant; } public void setTenant(Tenant tenant) { this.tenant = tenant; } public void constact(String message, Person person) { if (person == houseOwner) { //如果是房主，则租房者获得信息 tenant.getMessage(message); } else { //反正则是房主获得信息 houseOwner.getMessage(message); } } } //测试类 public class Client { public static void main(String[] args) { //一个房主、一个租房者、一个中介机构 MediatorStructure mediator = new MediatorStructure(); //房主和租房者只需要知道中介机构即可 HouseOwner houseOwner = new HouseOwner(\\\"张三\\\", mediator); Tenant tenant = new Tenant(\\\"李四\\\", mediator); //中介结构要知道房主和租房者 mediator.setHouseOwner(houseOwner); mediator.setTenant(tenant); tenant.constact(\\\"需要租三室的房子\\\"); houseOwner.constact(\\\"我这有三室的房子，你需要租吗？\\\"); } } \"]},\"158\":{\"h\":\"6.7.4 优缺点\",\"t\":[\"1，优点：\",\"松散耦合\",\"中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。\",\"集中控制交互\",\"多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。\",\"一对多关联转变为一对一的关联\",\"没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。\",\"2，缺点：\",\"当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。\"]},\"159\":{\"h\":\"6.7.5 使用场景\",\"t\":[\"系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。\",\"当想创建一个运行于多个类之间的对象，又不想生成新的子类时。\"]},\"160\":{\"h\":\"6.8 迭代器模式\"},\"161\":{\"h\":\"6.8.1 概述\",\"t\":[\"定义：\",\"提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。\"]},\"162\":{\"h\":\"6.8.2 结构\",\"t\":[\"迭代器模式主要包含以下角色：\",\"抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。\",\"具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。\",\"抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。\",\"具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。\"]},\"163\":{\"h\":\"6.8.3 案例实现\",\"t\":[\"【例】定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现，涉及到的类如下：\",\"代码如下：\",\"定义迭代器接口，声明 hasNext、next 方法\",\"public interface StudentIterator { boolean hasNext(); Student next(); } \",\"定义具体的迭代器类，重写所有的抽象方法\",\"public class StudentIteratorImpl implements StudentIterator { private List<Student> list; private int position = 0; public StudentIteratorImpl(List<Student> list) { this.list = list; } @Override public boolean hasNext() { return position < list.size(); } @Override public Student next() { Student currentStudent = list.get(position); position ++; return currentStudent; } } \",\"定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法\",\"public interface StudentAggregate { void addStudent(Student student); void removeStudent(Student student); StudentIterator getStudentIterator(); } \",\"定义具体的容器类，重写所有的方法\",\"public class StudentAggregateImpl implements StudentAggregate { private List<Student> list = new ArrayList<Student>(); // 学生列表 @Override public void addStudent(Student student) { this.list.add(student); } @Override public void removeStudent(Student student) { this.list.remove(student); } @Override public StudentIterator getStudentIterator() { return new StudentIteratorImpl(list); } } \"]},\"164\":{\"h\":\"6.8.4 优缺点\",\"t\":[\"1，优点：\",\"它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。\",\"迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。\",\"在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。\",\"2，缺点：\",\"增加了类的个数，这在一定程度上增加了系统的复杂性。\"]},\"165\":{\"h\":\"6.8.5 使用场景\",\"t\":[\"当需要为聚合对象提供多种遍历方式时。\",\"当需要为遍历不同的聚合结构提供一个统一的接口时。\",\"当访问一个聚合对象的内容而无须暴露其内部细节的表示时。\"]},\"166\":{\"h\":\"6.8.6 JDK 源码解析\",\"t\":[\"迭代器模式在 JAVA 的很多集合类中被广泛应用，接下来看看 JAVA 源码中是如何使用迭代器模式的。\",\"List<String> list = new ArrayList<>(); Iterator<String> iterator = list.iterator(); //list.iterator()方法返回的肯定是Iterator接口的子实现类对象 while (iterator.hasNext()) { System.out.println(iterator.next()); } \",\"看完这段代码是不是很熟悉，与我们上面代码基本类似。单列集合都使用到了迭代器，我们以 ArrayList 举例来说明\",\"List：抽象聚合类\",\"ArrayList：具体的聚合类\",\"Iterator：抽象迭代器\",\"list.iterator()：返回的是实现了 Iterator 接口的具体迭代器对象\",\"具体的来看看 ArrayList 的代码实现\",\"public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable { public Iterator<E> iterator() { return new Itr(); } private class Itr implements Iterator<E> { int cursor; // 下一个要返回元素的索引 int lastRet = -1; // 上一个返回元素的索引 int expectedModCount = modCount; Itr() {} //判断是否还有元素 public boolean hasNext() { return cursor != size; } //获取下一个元素 public E next() { checkForComodification(); int i = cursor; if (i >= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i >= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; } ... } \",\"这部分代码还是比较简单，大致就是在 iterator 方法中返回了一个实例化的 Iterator 对象。Itr 是一个内部类，它实现了 Iterator 接口并重写了其中的抽象方法。\",\"注意：\",\"当我们在使用 JAVA 开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现java.util.Iterable并实现其中的 iterator()方法使其返回一个 java.util.Iterator 的实现类就可以了。\"]},\"167\":{\"h\":\"6.9 访问者模式\"},\"168\":{\"h\":\"6.9.1 概述\",\"t\":[\"定义：\",\"封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。\"]},\"169\":{\"h\":\"6.9.2 结构\",\"t\":[\"访问者模式包含以下主要角色:\",\"抽象访问者（Visitor）角色：定义了对每一个元素（Element）访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element 的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。\",\"具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。\",\"抽象元素（Element）角色：定义了一个接受访问者的方法（accept），其意义是指，每一个元素都要可以被访问者访问。\",\"具体元素（ConcreteElement）角色： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。\",\"对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（Element），并且可以迭代这些元素，供访问者访问。\"]},\"170\":{\"h\":\"6.9.3 案例实现\",\"t\":[\"【例】给宠物喂食\",\"现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。\",\"访问者角色：给宠物喂食的人\",\"具体访问者角色：主人、其他人\",\"抽象元素角色：动物抽象类\",\"具体元素角色：宠物狗、宠物猫\",\"结构对象角色：主人家\",\"类图如下：\",\"代码如下：\",\"创建抽象访问者接口\",\"public interface Person { void feed(Cat cat); void feed(Dog dog); } \",\"创建不同的具体访问者角色（主人和其他人），都需要实现 Person接口\",\"public class Owner implements Person { @Override public void feed(Cat cat) { System.out.println(\\\"主人喂食猫\\\"); } @Override public void feed(Dog dog) { System.out.println(\\\"主人喂食狗\\\"); } } public class Someone implements Person { @Override public void feed(Cat cat) { System.out.println(\\\"其他人喂食猫\\\"); } @Override public void feed(Dog dog) { System.out.println(\\\"其他人喂食狗\\\"); } } \",\"定义抽象节点 -- 宠物\",\"public interface Animal { void accept(Person person); } \",\"定义实现Animal接口的 具体节点（元素）\",\"public class Dog implements Animal { @Override public void accept(Person person) { person.feed(this); System.out.println(\\\"好好吃，汪汪汪！！！\\\"); } } public class Cat implements Animal { @Override public void accept(Person person) { person.feed(this); System.out.println(\\\"好好吃，喵喵喵！！！\\\"); } } \",\"定义对象结构，此案例中就是主人的家\",\"public class Home { private List<Animal> nodeList = new ArrayList<Animal>(); public void action(Person person) { for (Animal node : nodeList) { node.accept(person); } } //添加操作 public void add(Animal animal) { nodeList.add(animal); } } \",\"测试类\",\"public class Client { public static void main(String[] args) { Home home = new Home(); home.add(new Dog()); home.add(new Cat()); Owner owner = new Owner(); home.action(owner); Someone someone = new Someone(); home.action(someone); } } \"]},\"171\":{\"h\":\"6.9.4 优缺点\",\"t\":[\"1，优点：\",\"扩展性好\",\"在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。\",\"复用性好\",\"通过访问者来定义整个对象结构通用的功能，从而提高复用程度。\",\"分离无关行为\",\"通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。\",\"2，缺点：\",\"对象结构变化很困难\",\"在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。\",\"违反了依赖倒置原则\",\"访问者模式依赖了具体类，而没有依赖抽象类。\"]},\"172\":{\"h\":\"6.9.5 使用场景\",\"t\":[\"对象结构相对稳定，但其操作算法经常变化的程序。\",\"对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。\"]},\"173\":{\"h\":\"6.9.6 扩展\",\"t\":[\"访问者模式用到了一种双分派的技术。\",\"1，分派：\",\"变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的真实类型又叫做变量的实际类型。比如 Map map = new HashMap() ，map 变量的静态类型是 Map ，实际类型是 HashMap 。根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派(Dispatch)又分为两种，即静态分派和动态分派。\",\"静态分派(Static Dispatch) 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。\",\"动态分派(Dynamic Dispatch) 发生在运行时期，动态分派动态地置换掉某个方法。Java 通过方法的重写支持动态分派。\",\"2，动态分派：\",\"通过方法的重写支持动态分派。\",\"public class Animal { public void execute() { System.out.println(\\\"Animal\\\"); } } public class Dog extends Animal { @Override public void execute() { System.out.println(\\\"dog\\\"); } } public class Cat extends Animal { @Override public void execute() { System.out.println(\\\"cat\\\"); } } public class Client { public static void main(String[] args) { Animal a = new Dog(); a.execute(); Animal a1 = new Cat(); a1.execute(); } } \",\"上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。\",\"Java 编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。\",\"3，静态分派：\",\"通过方法重载支持静态分派。\",\"public class Animal { } public class Dog extends Animal { } public class Cat extends Animal { } public class Execute { public void execute(Animal a) { System.out.println(\\\"Animal\\\"); } public void execute(Dog d) { System.out.println(\\\"dog\\\"); } public void execute(Cat c) { System.out.println(\\\"cat\\\"); } } public class Client { public static void main(String[] args) { Animal a = new Animal(); Animal a1 = new Dog(); Animal a2 = new Cat(); Execute exe = new Execute(); exe.execute(a); exe.execute(a1); exe.execute(a2); } } \",\"运行结果：\",\"这个结果可能出乎一些人的意料了，为什么呢？\",\"重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。\",\"4，双分派：\",\"所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别，还要根据参数的运行时区别。\",\"public class Animal { public void accept(Execute exe) { exe.execute(this); } } public class Dog extends Animal { public void accept(Execute exe) { exe.execute(this); } } public class Cat extends Animal { public void accept(Execute exe) { exe.execute(this); } } public class Execute { public void execute(Animal a) { System.out.println(\\\"animal\\\"); } public void execute(Dog d) { System.out.println(\\\"dog\\\"); } public void execute(Cat c) { System.out.println(\\\"cat\\\"); } } public class Client { public static void main(String[] args) { Animal a = new Animal(); Animal d = new Dog(); Animal c = new Cat(); Execute exe = new Execute(); a.accept(exe); d.accept(exe); c.accept(exe); } } \",\"在上面代码中，客户端将 Execute 对象做为参数传递给 Animal 类型的变量调用的方法，这里完成第一次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也将自己this作为参数传递进去，这里就完成了第二次分派，这里的 Execute 类中有多个重载的方法，而传递进行的是 this，就是具体的实际类型的对象。\",\"说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定，我们可以对上面的程序进行修改。\",\"运行结果如下：\",\"双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动态的，所以重载就是动态的了。\"]},\"174\":{\"h\":\"6.10 备忘录模式\"},\"175\":{\"h\":\"6.10.1 概述\",\"t\":[\"备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，很多软件都提供了撤销（Undo）操作，如 Word、记事本、Photoshop、IDEA 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 浏览器 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。\",\"定义：\",\"又叫快照模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。\"]},\"176\":{\"h\":\"6.10.2 结构\",\"t\":[\"备忘录模式的主要角色如下：\",\"发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。\",\"备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。\",\"管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。\",\"备忘录有两个等效的接口：\",\"窄接口：管理者(Caretaker)对象（和其他发起人对象之外的任何对象）看到的是备忘录的窄接口(narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。\",\"宽接口：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口(wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。\"]},\"177\":{\"h\":\"6.10.3 案例实现\",\"t\":[\"【例】游戏挑战 BOSS\",\"游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打 Boss 前和后一定会不一样的，我们允许玩家如果感觉与 Boss 决斗的效果不理想可以让游戏恢复到决斗之前的状态。\",\"要实现上述案例，有两种方式：\",\"“白箱”备忘录模式\",\"“黑箱”备忘录模式\"]},\"178\":{\"h\":\"6.10.3.1 “白箱”备忘录模式\",\"t\":[\"备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开。类图如下：\",\"代码如下：\",\"//游戏角色类 public class GameRole { private int vit; //生命力 private int atk; //攻击力 private int def; //防御力 //初始化状态 public void initState() { this.vit = 100; this.atk = 100; this.def = 100; } //战斗 public void fight() { this.vit = 0; this.atk = 0; this.def = 0; } //保存角色状态 public RoleStateMemento saveState() { return new RoleStateMemento(vit, atk, def); } //回复角色状态 public void recoverState(RoleStateMemento roleStateMemento) { this.vit = roleStateMemento.getVit(); this.atk = roleStateMemento.getAtk(); this.def = roleStateMemento.getDef(); } public void stateDisplay() { System.out.println(\\\"角色生命力：\\\" + vit); System.out.println(\\\"角色攻击力：\\\" + atk); System.out.println(\\\"角色防御力：\\\" + def); } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getAtk() { return atk; } public void setAtk(int atk) { this.atk = atk; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } //游戏状态存储类(备忘录类) public class RoleStateMemento { private int vit; private int atk; private int def; public RoleStateMemento(int vit, int atk, int def) { this.vit = vit; this.atk = atk; this.def = def; } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getAtk() { return atk; } public void setAtk(int atk) { this.atk = atk; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } //角色状态管理者类 public class RoleStateCaretaker { private RoleStateMemento roleStateMemento; public RoleStateMemento getRoleStateMemento() { return roleStateMemento; } public void setRoleStateMemento(RoleStateMemento roleStateMemento) { this.roleStateMemento = roleStateMemento; } } //测试类 public class Client { public static void main(String[] args) { System.out.println(\\\"------------大战Boss前------------\\\"); //大战Boss前 GameRole gameRole = new GameRole(); gameRole.initState(); gameRole.stateDisplay(); //保存进度 RoleStateCaretaker roleStateCaretaker = new RoleStateCaretaker(); roleStateCaretaker.setRoleStateMemento(gameRole.saveState()); System.out.println(\\\"------------大战Boss后------------\\\"); //大战Boss时，损耗严重 gameRole.fight(); gameRole.stateDisplay(); System.out.println(\\\"------------恢复之前状态------------\\\"); //恢复之前状态 gameRole.recoverState(roleStateCaretaker.getRoleStateMemento()); gameRole.stateDisplay(); } } \",\"分析：白箱备忘录模式是破坏封装性的。但是通过程序员自律，同样可以在一定程度上实现模式的大部分用意。\"]},\"179\":{\"h\":\"6.10.3.2 “黑箱”备忘录模式\",\"t\":[\"备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在 Java 语言中，实现双重接口的办法就是将备忘录类设计成发起人类的内部成员类。\",\"将 RoleStateMemento 设为 GameRole 的内部类，从而将 RoleStateMemento 对象封装在 GameRole 里面；在外面提供一个标识接口 Memento 给 RoleStateCaretaker 及其他对象使用。这样 GameRole 类看到的是 RoleStateMemento 所有的接口，而RoleStateCaretaker 及其他对象看到的仅仅是标识接口 Memento 所暴露出来的接口，从而维护了封装型。类图如下：\",\"代码如下：\",\"窄接口Memento，这是一个标识接口，因此没有定义出任何的方法\",\"public interface Memento { } \",\"定义发起人类 GameRole，并在内部定义备忘录内部类 RoleStateMemento（该内部类设置为私有的）\",\"/游戏角色类 public class GameRole { private int vit; //生命力 private int atk; //攻击力 private int def; //防御力 //初始化状态 public void initState() { this.vit = 100; this.atk = 100; this.def = 100; } //战斗 public void fight() { this.vit = 0; this.atk = 0; this.def = 0; } //保存角色状态 public Memento saveState() { return new RoleStateMemento(vit, atk, def); } //回复角色状态 public void recoverState(Memento memento) { RoleStateMemento roleStateMemento = (RoleStateMemento) memento; this.vit = roleStateMemento.getVit(); this.atk = roleStateMemento.getAtk(); this.def = roleStateMemento.getDef(); } public void stateDisplay() { System.out.println(\\\"角色生命力：\\\" + vit); System.out.println(\\\"角色攻击力：\\\" + atk); System.out.println(\\\"角色防御力：\\\" + def); } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getAtk() { return atk; } public void setAtk(int atk) { this.atk = atk; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } private class RoleStateMemento implements Memento { private int vit; private int atk; private int def; public RoleStateMemento(int vit, int atk, int def) { this.vit = vit; this.atk = atk; this.def = def; } public int getVit() { return vit; } public void setVit(int vit) { this.vit = vit; } public int getAtk() { return atk; } public void setAtk(int atk) { this.atk = atk; } public int getDef() { return def; } public void setDef(int def) { this.def = def; } } } \",\"负责人角色类 RoleStateCaretaker 能够得到的备忘录对象是以 Memento 为接口的，由于这个接口仅仅是一个标识接口，因此负责人角色不可能改变这个备忘录对象的内容\",\"//角色状态管理者类 public class RoleStateCaretaker { private Memento memento; public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } \",\"客户端测试类\",\"public class Client { public static void main(String[] args) { System.out.println(\\\"------------大战Boss前------------\\\"); //大战Boss前 GameRole gameRole = new GameRole(); gameRole.initState(); gameRole.stateDisplay(); //保存进度 RoleStateCaretaker roleStateCaretaker = new RoleStateCaretaker(); roleStateCaretaker.setMemento(gameRole.saveState()); System.out.println(\\\"------------大战Boss后------------\\\"); //大战Boss时，损耗严重 gameRole.fight(); gameRole.stateDisplay(); System.out.println(\\\"------------恢复之前状态------------\\\"); //恢复之前状态 gameRole.recoverState(roleStateCaretaker.getMemento()); gameRole.stateDisplay(); } } \"]},\"180\":{\"h\":\"6.10.4 优缺点\",\"t\":[\"1，优点：\",\"提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。\",\"实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。\",\"简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。\",\"2，缺点：\",\"资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。\"]},\"181\":{\"h\":\"6.10.5 使用场景\",\"t\":[\"需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。\",\"需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea 等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。\"]},\"182\":{\"h\":\"6.11 解释器模式\"},\"183\":{\"h\":\"6.11.1 概述\",\"t\":[\"如上图，设计一个软件用来进行加减计算。我们第一想法就是使用工具类，提供对应的加法和减法的工具方法。\",\"//用于两个整数相加 public static int add(int a,int b){ return a + b; } //用于两个整数相加 public static int add(int a,int b,int c){ return a + b + c; } //用于n个整数相加 public static int add(Integer ... arr) { int sum = 0; for (Integer i : arr) { sum += i; } return sum; } \",\"上面的形式比较单一、有限，如果形式变化非常多，这就不符合要求，因为加法和减法运算，两个运算符与数值可以有无限种组合方式。比如 1+2+3+4+5、1+2+3-4 等等。\",\"显然，现在需要一种翻译识别机器，能够解析由数字以及 + - 符号构成的合法的运算序列。如果把运算符和数字都看作节点的话，能够逐个节点的进行读取解析运算，这就是解释器模式的思维。\",\"定义：\",\"给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。\",\"在解释器模式中，我们需要将待解决的问题，提取出规则，抽象为一种“语言”。比如加减法运算，规则为：由数值和+-符号组成的合法序列，“1+3-2” 就是这种语言的句子。\",\"解释器就是要解析出来语句的含义。但是如何描述规则呢？\",\"文法（语法）规则：\",\"文法是用于描述语言的语法结构的形式规则。\",\"expression ::= value | plus | minus plus ::= expression ‘+’ expression minus ::= expression ‘-’ expression value ::= integer \",\"注意： 这里的符号“::=”表示“定义为”的意思，竖线 | 表示或，左右的其中一个，引号内为字符本身，引号外为语法。\",\"上面规则描述为 ：\",\"表达式可以是一个值，也可以是 plus 或者 minus 运算，而 plus 和 minus 又是由表达式结合运算符构成，值的类型为整型数。\",\"抽象语法树：\",\"在计算机科学中，抽象语法树（AbstractSyntaxTree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。\",\"用树形来表示符合文法规则的句子。\"]},\"184\":{\"h\":\"6.11.2 结构\",\"t\":[\"解释器模式包含以下主要角色。\",\"抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。\",\"终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。\",\"非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。\",\"环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。\",\"客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。\"]},\"185\":{\"h\":\"6.11.3 案例实现\",\"t\":[\"【例】设计实现加减法的软件\",\"代码如下：\",\"//抽象角色AbstractExpression public abstract class AbstractExpression { public abstract int interpret(Context context); } //终结符表达式角色 public class Value extends AbstractExpression { private int value; public Value(int value) { this.value = value; } @Override public int interpret(Context context) { return value; } @Override public String toString() { return new Integer(value).toString(); } } //非终结符表达式角色 加法表达式 public class Plus extends AbstractExpression { private AbstractExpression left; private AbstractExpression right; public Plus(AbstractExpression left, AbstractExpression right) { this.left = left; this.right = right; } @Override public int interpret(Context context) { return left.interpret(context) + right.interpret(context); } @Override public String toString() { return \\\"(\\\" + left.toString() + \\\" + \\\" + right.toString() + \\\")\\\"; } } ///非终结符表达式角色 减法表达式 public class Minus extends AbstractExpression { private AbstractExpression left; private AbstractExpression right; public Minus(AbstractExpression left, AbstractExpression right) { this.left = left; this.right = right; } @Override public int interpret(Context context) { return left.interpret(context) - right.interpret(context); } @Override public String toString() { return \\\"(\\\" + left.toString() + \\\" - \\\" + right.toString() + \\\")\\\"; } } //终结符表达式角色 变量表达式 public class Variable extends AbstractExpression { private String name; public Variable(String name) { this.name = name; } @Override public int interpret(Context ctx) { return ctx.getValue(this); } @Override public String toString() { return name; } } //环境类 public class Context { private Map<Variable, Integer> map = new HashMap<Variable, Integer>(); public void assign(Variable var, Integer value) { map.put(var, value); } public int getValue(Variable var) { Integer value = map.get(var); return value; } } //测试类 public class Client { public static void main(String[] args) { Context context = new Context(); Variable a = new Variable(\\\"a\\\"); Variable b = new Variable(\\\"b\\\"); Variable c = new Variable(\\\"c\\\"); Variable d = new Variable(\\\"d\\\"); Variable e = new Variable(\\\"e\\\"); //Value v = new Value(1); context.assign(a, 1); context.assign(b, 2); context.assign(c, 3); context.assign(d, 4); context.assign(e, 5); AbstractExpression expression = new Minus(new Plus(new Plus(new Plus(a, b), c), d), e); System.out.println(expression + \\\"= \\\" + expression.interpret(context)); } } \"]},\"186\":{\"h\":\"6.11.4 优缺点\",\"t\":[\"1，优点：\",\"易于改变和扩展文法。\",\"由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。\",\"实现文法较为容易。\",\"在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂。\",\"增加新的解释表达式较为方便。\",\"如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类，原有表达式类代码无须修改，符合 \\\"开闭原则\\\"。\",\"2，缺点：\",\"对于复杂文法难以维护。\",\"在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护。\",\"执行效率较低。\",\"由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。\"]},\"187\":{\"h\":\"6.11.5 使用场景\",\"t\":[\"当语言的文法较为简单，且执行效率不是关键问题时。\",\"当问题重复出现，且可以用一种简单的语言来进行表达时。\",\"当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。\"]},\"188\":{\"h\":\"7.1 spring 使用回顾\",\"t\":[\"自定义 spring 框架前，先回顾一下 spring 框架的使用，从而分析 spring 的核心，并对核心功能进行模拟。\",\"数据访问层。定义 UserDao 接口及其子实现类\",\"public interface UserDao { public void add(); } public class UserDaoImpl implements UserDao { public void add() { System.out.println(\\\"userDaoImpl ....\\\"); } } \",\"业务逻辑层。定义 UserService 接口及其子实现类\",\"public interface UserService { public void add(); } public class UserServiceImpl implements UserService { private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; } public void add() { System.out.println(\\\"userServiceImpl ...\\\"); userDao.add(); } } \",\"定义 UserController 类，使用 main 方法模拟 controller 层\",\"public class UserController { public static void main(String[] args) { //创建spring容器对象 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"applicationContext.xml\\\"); //从IOC容器中获取UserService对象 UserService userService = applicationContext.getBean(\\\"userService\\\", UserService.class); //调用UserService对象的add方法 userService.add(); } } \",\"编写配置文件。在类路径下编写一个名为 ApplicationContext.xml 的配置文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <bean id=\\\"userService\\\" class=\\\"com.itheima.service.impl.UserServiceImpl\\\"> <property name=\\\"userDao\\\" ref=\\\"userDao\\\"></property> </bean> <bean id=\\\"userDao\\\" class=\\\"com.itheima.dao.impl.UserDaoImpl\\\"></bean> </beans> \",\"代码运行结果如下：\",\"通过上面代码及结果可以看出：\",\"userService 对象是从 applicationContext 容器对象获取到的，也就是 userService 对象交由 spring 进行管理。\",\"上面结果可以看到调用了 UserDao 对象中的 add 方法，也就是说 UserDao 子实现类对象也交由 spring 管理了。\",\"UserService 中的 userDao 变量我们并没有进行赋值，但是可以正常使用，说明 spring 已经将 UserDao 对象赋值给了 userDao 变量。\",\"上面三点体现了 Spring 框架的 IOC（Inversion of Control）和 DI（Dependency Injection, DI）\"]},\"189\":{\"h\":\"7.2 spring 核心功能结构\",\"t\":[\"Spring 大约有 20 个模块，由 1300 多个不同的文件构成。这些模块可以分为:\",\"核心容器、AOP 和设备支持、数据访问与集成、Web 组件、通信报文和集成测试等，下面是 Spring 框架的总体架构图：\",\"核心容器由 beans、core、context 和 expression（Spring Expression Language，SpEL）4 个模块组成。\",\"spring-beans 和 spring-core 模块是 Spring 框架的核心模块，包含了控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）。BeanFactory 使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。BeanFactory 属于延时加载，也就是说在实例化容器对象后并不会自动实例化 Bean，只有当 Bean 被使用时，BeanFactory 才会对该 Bean 进行实例化与依赖关系的装配。\",\"spring-context 模块构架于核心模块之上，扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系及资源加载透明化等功能。此外，该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与 BeanFactory 不同，ApplicationContext 实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。\",\"spring-context-support 模块是对 Spring IoC 容器及 IoC 子容器的扩展支持。\",\"spring-context-indexer 模块是 Spring 的类管理组件和 Classpath 扫描组件。\",\"spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也可以方便地调用对象方法，以及操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。EL 的特性是基于 Spring 产品的需求而设计的，可以非常方便地同 Spring IoC 进行交互。\"]},\"190\":{\"h\":\"7.1.1 bean 概述\",\"t\":[\"Spring 就是面向 Bean 的编程（BOP,Bean Oriented Programming），Bean 在 Spring 中处于核心地位。Bean 对于 Spring 的意义就像 Object 对于 OOP 的意义一样，Spring 中没有 Bean 也就没有 Spring 存在的意义。Spring IoC 容器通过配置文件或者注解的方式来管理 bean 对象之间的依赖关系。\",\"spring 中 bean 用于对一个类进行封装。如下面的配置：\",\"<bean id=\\\"userService\\\" class=\\\"com.itheima.service.impl.UserServiceImpl\\\"> <property name=\\\"userDao\\\" ref=\\\"userDao\\\"></property> </bean> <bean id=\\\"userDao\\\" class=\\\"com.itheima.dao.impl.UserDaoImpl\\\"></bean> \",\"为什么 Bean 如此重要呢？\",\"spring 将 bean 对象交由一个叫 IOC 容器进行管理。\",\"bean 对象之间的依赖关系在配置文件中体现，并由 spring 完成。\"]},\"191\":{\"h\":\"7.3 Spring IOC 相关接口分析\"},\"192\":{\"h\":\"7.3.1 BeanFactory 解析\",\"t\":[\"Spring 中 Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，即 IoC 容器，为开发者管理对象之间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多 IoC 容器的实现供用户选择，其相互关系如下图所示。\",\"其中，BeanFactory 作为最顶层的一个接口，定义了 IoC 容器的基本功能规范，BeanFactory 有三个重要的子接口：ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是 DefaultListableBeanFactory，它实现了所有的接口。\",\"那么为何要定义这么多层次的接口呢？\",\"每个接口都有它的使用场合，主要是为了区分在 Spring 内部操作过程中对象的传递和转化，对对象的数据访问所做的限制。例如，\",\"ListableBeanFactory 接口表示这些 Bean 可列表化。\",\"HierarchicalBeanFactory 表示这些 Bean 是有继承关系的，也就是每个 Bean 可能有父 Bean\",\"AutowireCapableBeanFactory 接口定义 Bean 的自动装配规则。\",\"这三个接口共同定义了 Bean 的集合、Bean 之间的关系及 Bean 行为。最基本的 IoC 容器接口是 BeanFactory，来看一下它的源码：\",\"public interface BeanFactory { String FACTORY_BEAN_PREFIX = \\\"&\\\"; //根据bean的名称获取IOC容器中的的bean对象 Object getBean(String name) throws BeansException; //根据bean的名称获取IOC容器中的的bean对象，并指定获取到的bean对象的类型，这样我们使用时就不需要进行类型强转了 <T> T getBean(String name, Class<T> requiredType) throws BeansException; Object getBean(String name, Object... args) throws BeansException; <T> T getBean(Class<T> requiredType) throws BeansException; <T> T getBean(Class<T> requiredType, Object... args) throws BeansException; <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType); <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType); //判断容器中是否包含指定名称的bean对象 boolean containsBean(String name); //根据bean的名称判断是否是单例 boolean isSingleton(String name) throws NoSuchBeanDefinitionException; boolean isPrototype(String name) throws NoSuchBeanDefinitionException; boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException; boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException; @Nullable Class<?> getType(String name) throws NoSuchBeanDefinitionException; String[] getAliases(String name); } \",\"在 BeanFactory 里只对 IoC 容器的基本行为做了定义，根本不关心你的 Bean 是如何定义及怎样加载的。正如我们只关心能从工厂里得到什么产品，不关心工厂是怎么生产这些产品的。\",\"BeanFactory 有一个很重要的子接口，就是 ApplicationContext 接口，该接口主要来规范容器中的 bean 对象是非延时加载，即在创建容器对象的时候就对象 bean 进行初始化，并存储到一个容器中。\",\"要知道工厂是如何产生对象的，我们需要看具体的 IoC 容器实现，Spring 提供了许多 IoC 容器实现，比如：\",\"ClasspathXmlApplicationContext : 根据类路径加载 xml 配置文件，并创建 IOC 容器对象。\",\"FileSystemXmlApplicationContext ：根据系统路径加载 xml 配置文件，并创建 IOC 容器对象。\",\"AnnotationConfigApplicationContext ：加载注解类配置，并创建 IOC 容器。\"]},\"193\":{\"h\":\"7.3.2 BeanDefinition 解析\",\"t\":[\"Spring IoC 容器管理我们定义的各种 Bean 对象及其相互关系，而 Bean 对象在 Spring 实现中是以 BeanDefinition 来描述的，如下面配置文件\",\"<bean id=\\\"userDao\\\" class=\\\"com.itheima.dao.impl.UserDaoImpl\\\"></bean> bean标签还有很多属性： scope、init-method、destory-method等。 \",\"其继承体系如下图所示。\"]},\"194\":{\"h\":\"7.3.3 BeanDefinitionReader 解析\",\"t\":[\"Bean 的解析过程非常复杂，功能被分得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活性，以应对可能的变化。Bean 的解析主要就是对 Spring 配置文件的解析。这个解析过程主要通过 BeanDefinitionReader 来完成，看看 Spring 中 BeanDefinitionReader 的类结构图，如下图所示。\",\"看看 BeanDefinitionReader 接口定义的功能来理解它具体的作用：\",\"public interface BeanDefinitionReader { //获取BeanDefinitionRegistry注册器对象 BeanDefinitionRegistry getRegistry(); @Nullable ResourceLoader getResourceLoader(); @Nullable ClassLoader getBeanClassLoader(); BeanNameGenerator getBeanNameGenerator(); /* 下面的loadBeanDefinitions都是加载bean定义，从指定的资源中 */ int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException; int loadBeanDefinitions(Resource... resources) throws BeanDefinitionStoreException; int loadBeanDefinitions(String location) throws BeanDefinitionStoreException; int loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException; } \"]},\"195\":{\"h\":\"7.3.4 BeanDefinitionRegistry 解析\",\"t\":[\"BeanDefinitionReader 用来解析 bean 定义，并封装 BeanDefinition 对象，而我们定义的配置文件中定义了很多 bean 标签，所以就有一个问题，解析的 BeanDefinition 对象存储到哪儿？答案就是 BeanDefinition 的注册中心，而该注册中心顶层接口就是 BeanDefinitionRegistry。\",\"public interface BeanDefinitionRegistry extends AliasRegistry { //往注册表中注册bean void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException; //从注册表中删除指定名称的bean void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException; //获取注册表中指定名称的bean BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException; //判断注册表中是否已经注册了指定名称的bean boolean containsBeanDefinition(String beanName); //获取注册表中所有的bean的名称 String[] getBeanDefinitionNames(); int getBeanDefinitionCount(); boolean isBeanNameInUse(String beanName); } \",\"继承结构图如下：\",\"从上面类图可以看到 BeanDefinitionRegistry 接口的子实现类主要有以下几个：\",\"DefaultListableBeanFactory\",\"在该类中定义了如下代码，就是用来注册 bean\",\"private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256); \",\"SimpleBeanDefinitionRegistry\",\"在该类中定义了如下代码，就是用来注册 bean\",\"private final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(64); \"]},\"196\":{\"h\":\"7.3.5 创建容器\",\"t\":[\"ClassPathXmlApplicationContext 对 Bean 配置资源的载入是从 refresh（）方法开始的。refresh（）方法是一个模板方法，规定了 IoC 容器的启动流程，有些逻辑要交给其子类实现。它对 Bean 配置资源进行载入，ClassPathXmlApplicationContext 通过调用其父类 AbstractApplicationContext 的 refresh（）方法启动整个 IoC 容器对 Bean 定义的载入过程。\"]},\"197\":{\"h\":\"7.4 自定义 SpringIOC\",\"t\":[\"现要对下面的配置文件进行解析，并自定义 Spring 框架的 IOC 对涉及到的对象进行管理。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans> <bean id=\\\"userService\\\" class=\\\"com.itheima.service.impl.UserServiceImpl\\\"> <property name=\\\"userDao\\\" ref=\\\"userDao\\\"></property> </bean> <bean id=\\\"userDao\\\" class=\\\"com.itheima.dao.impl.UserDaoImpl\\\"></bean> </beans> \"]},\"198\":{\"h\":\"7.4.1 定义 bean 相关的 pojo 类\"},\"199\":{\"h\":\"7.4.1.1 PropertyValue 类\",\"t\":[\"用于封装 bean 的属性，体现到上面的配置文件就是封装 bean 标签的子标签 property 标签数据。\",\"public class PropertyValue { private String name; private String ref; private String value; public PropertyValue() { } public PropertyValue(String name, String ref,String value) { this.name = name; this.ref = ref; this.value = value; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getRef() { return ref; } public void setRef(String ref) { this.ref = ref; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } } \"]},\"200\":{\"h\":\"7.4.1.2 MutablePropertyValues 类\",\"t\":[\"一个 bean 标签可以有多个 property 子标签，所以再定义一个 MutablePropertyValues 类，用来存储并管理多个 PropertyValue 对象。\",\"public class MutablePropertyValues implements Iterable<PropertyValue> { private final List<PropertyValue> propertyValueList; public MutablePropertyValues() { this.propertyValueList = new ArrayList<PropertyValue>(); } public MutablePropertyValues(List<PropertyValue> propertyValueList) { this.propertyValueList = (propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>()); } public PropertyValue[] getPropertyValues() { return this.propertyValueList.toArray(new PropertyValue[0]); } public PropertyValue getPropertyValue(String propertyName) { for (PropertyValue pv : this.propertyValueList) { if (pv.getName().equals(propertyName)) { return pv; } } return null; } @Override public Iterator<PropertyValue> iterator() { return propertyValueList.iterator(); } public boolean isEmpty() { return this.propertyValueList.isEmpty(); } public MutablePropertyValues addPropertyValue(PropertyValue pv) { for (int i = 0; i < this.propertyValueList.size(); i++) { PropertyValue currentPv = this.propertyValueList.get(i); if (currentPv.getName().equals(pv.getName())) { this.propertyValueList.set(i, new PropertyValue(pv.getName(),pv.getRef(), pv.getValue())); return this; } } this.propertyValueList.add(pv); return this; } public boolean contains(String propertyName) { return getPropertyValue(propertyName) != null; } } \"]},\"201\":{\"h\":\"7.4.1.3 BeanDefinition 类\",\"t\":[\"BeanDefinition 类用来封装 bean 信息的，主要包含 id（即 bean 对象的名称）、class（需要交由 spring 管理的类的全类名）及子标签 property 数据。\",\"public class BeanDefinition { private String id; private String className; private MutablePropertyValues propertyValues; public BeanDefinition() { propertyValues = new MutablePropertyValues(); } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getClassName() { return className; } public void setClassName(String className) { this.className = className; } public void setPropertyValues(MutablePropertyValues propertyValues) { this.propertyValues = propertyValues; } public MutablePropertyValues getPropertyValues() { return propertyValues; } } \"]},\"202\":{\"h\":\"7.4.2 定义注册表相关类\"},\"203\":{\"h\":\"7.4.2.1 BeanDefinitionRegistry 接口\",\"t\":[\"BeanDefinitionRegistry 接口定义了注册表的相关操作，定义如下功能：\",\"注册 BeanDefinition 对象到注册表中\",\"从注册表中删除指定名称的 BeanDefinition 对象\",\"根据名称从注册表中获取 BeanDefinition 对象\",\"判断注册表中是否包含指定名称的 BeanDefinition 对象\",\"获取注册表中 BeanDefinition 对象的个数\",\"获取注册表中所有的 BeanDefinition 的名称\",\"public interface BeanDefinitionRegistry { //注册BeanDefinition对象到注册表中 void registerBeanDefinition(String beanName, BeanDefinition beanDefinition); //从注册表中删除指定名称的BeanDefinition对象 void removeBeanDefinition(String beanName) throws Exception; //根据名称从注册表中获取BeanDefinition对象 BeanDefinition getBeanDefinition(String beanName) throws Exception; boolean containsBeanDefinition(String beanName); int getBeanDefinitionCount(); String[] getBeanDefinitionNames(); } \"]},\"204\":{\"h\":\"7.4.2.2 SimpleBeanDefinitionRegistry 类\",\"t\":[\"该类实现了 BeanDefinitionRegistry 接口，定义了 Map 集合作为注册表容器。\",\"public class SimpleBeanDefinitionRegistry implements BeanDefinitionRegistry { private Map<String, BeanDefinition> beanDefinitionMap = new HashMap<String, BeanDefinition>(); @Override public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) { beanDefinitionMap.put(beanName,beanDefinition); } @Override public void removeBeanDefinition(String beanName) throws Exception { beanDefinitionMap.remove(beanName); } @Override public BeanDefinition getBeanDefinition(String beanName) throws Exception { return beanDefinitionMap.get(beanName); } @Override public boolean containsBeanDefinition(String beanName) { return beanDefinitionMap.containsKey(beanName); } @Override public int getBeanDefinitionCount() { return beanDefinitionMap.size(); } @Override public String[] getBeanDefinitionNames() { return beanDefinitionMap.keySet().toArray(new String[1]); } } \"]},\"205\":{\"h\":\"7.4.3 定义解析器相关类\"},\"206\":{\"h\":\"7.4.3.1 BeanDefinitionReader 接口\",\"t\":[\"BeanDefinitionReader 是用来解析配置文件并在注册表中注册 bean 的信息。定义了两个规范：\",\"获取注册表的功能，让外界可以通过该对象获取注册表对象。\",\"加载配置文件，并注册 bean 数据。\",\"public interface BeanDefinitionReader { //获取注册表对象 BeanDefinitionRegistry getRegistry(); //加载配置文件并在注册表中进行注册 void loadBeanDefinitions(String configLocation) throws Exception; } \"]},\"207\":{\"h\":\"7.4.3.2 XmlBeanDefinitionReader 类\",\"t\":[\"XmlBeanDefinitionReader 类是专门用来解析 xml 配置文件的。该类实现 BeanDefinitionReader 接口并实现接口中的两个功能。\",\"public class XmlBeanDefinitionReader implements BeanDefinitionReader { private BeanDefinitionRegistry registry; public XmlBeanDefinitionReader() { this.registry = new SimpleBeanDefinitionRegistry(); } @Override public BeanDefinitionRegistry getRegistry() { return registry; } @Override public void loadBeanDefinitions(String configLocation) throws Exception { InputStream is = this.getClass().getClassLoader().getResourceAsStream(configLocation); SAXReader reader = new SAXReader(); Document document = reader.read(is); Element rootElement = document.getRootElement(); //解析bean标签 parseBean(rootElement); } private void parseBean(Element rootElement) { List<Element> elements = rootElement.elements(); for (Element element : elements) { String id = element.attributeValue(\\\"id\\\"); String className = element.attributeValue(\\\"class\\\"); BeanDefinition beanDefinition = new BeanDefinition(); beanDefinition.setId(id); beanDefinition.setClassName(className); List<Element> list = element.elements(\\\"property\\\"); MutablePropertyValues mutablePropertyValues = new MutablePropertyValues(); for (Element element1 : list) { String name = element1.attributeValue(\\\"name\\\"); String ref = element1.attributeValue(\\\"ref\\\"); String value = element1.attributeValue(\\\"value\\\"); PropertyValue propertyValue = new PropertyValue(name,ref,value); mutablePropertyValues.addPropertyValue(propertyValue); } beanDefinition.setPropertyValues(mutablePropertyValues); registry.registerBeanDefinition(id,beanDefinition); } } } \"]},\"208\":{\"h\":\"7.4.4 IOC 容器相关类\"},\"209\":{\"h\":\"7.4.4.1 BeanFactory 接口\",\"t\":[\"在该接口中定义 IOC 容器的统一规范即获取 bean 对象。\",\"public interface BeanFactory { //根据bean对象的名称获取bean对象 Object getBean(String name) throws Exception; //根据bean对象的名称获取bean对象，并进行类型转换 <T> T getBean(String name, Class<? extends T> clazz) throws Exception; } \"]},\"210\":{\"h\":\"7.4.4.2 ApplicationContext 接口\",\"t\":[\"该接口的所以的子实现类对 bean 对象的创建都是非延时的，所以在该接口中定义 refresh() 方法，该方法主要完成以下两个功能：\",\"加载配置文件。\",\"根据注册表中的 BeanDefinition 对象封装的数据进行 bean 对象的创建。\",\"public interface ApplicationContext extends BeanFactory { //进行配置文件加载并进行对象创建 void refresh() throws IllegalStateException, Exception; } \"]},\"211\":{\"h\":\"7.4.4.3 AbstractApplicationContext 类\",\"t\":[\"作为 ApplicationContext 接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个 Map 集合，作为 bean 对象存储的容器。\",\"声明 BeanDefinitionReader 类型的变量，用来进行 xml 配置文件的解析，符合单一职责原则。\",\"BeanDefinitionReader 类型的对象创建交由子类实现，因为只有子类明确到底创建 BeanDefinitionReader 哪儿个子实现类对象。\",\"public abstract class AbstractApplicationContext implements ApplicationContext { protected BeanDefinitionReader beanDefinitionReader; //用来存储bean对象的容器 key存储的是bean的id值，value存储的是bean对象 protected Map<String, Object> singletonObjects = new HashMap<String, Object>(); //存储配置文件的路径 protected String configLocation; public void refresh() throws IllegalStateException, Exception { //加载BeanDefinition beanDefinitionReader.loadBeanDefinitions(configLocation); //初始化bean finishBeanInitialization(); } //bean的初始化 private void finishBeanInitialization() throws Exception { BeanDefinitionRegistry registry = beanDefinitionReader.getRegistry(); String[] beanNames = registry.getBeanDefinitionNames(); for (String beanName : beanNames) { BeanDefinition beanDefinition = registry.getBeanDefinition(beanName); getBean(beanName); } } } \",\"注意：该类 finishBeanInitialization()方法中调用 getBean()方法使用到了模板方法模式。\"]},\"212\":{\"h\":\"7.4.4.4 ClassPathXmlApplicationContext 类\",\"t\":[\"该类主要是加载类路径下的配置文件，并进行 bean 对象的创建，主要完成以下功能：\",\"在构造方法中，创建 BeanDefinitionReader 对象。\",\"在构造方法中，调用 refresh()方法，用于进行配置文件加载、创建 bean 对象并存储到容器中。\",\"重写父接口中的 getBean()方法，并实现依赖注入操作。\",\"public class ClassPathXmlApplicationContext extends AbstractApplicationContext{ public ClassPathXmlApplicationContext(String configLocation) { this.configLocation = configLocation; //构建XmlBeanDefinitionReader对象 beanDefinitionReader = new XmlBeanDefinitionReader(); try { this.refresh(); } catch (Exception e) { } } //根据bean的id属性值获取bean对象 @Override public Object getBean(String name) throws Exception { //return singletonObjects.get(name); Object obj = singletonObjects.get(name); if(obj != null) { return obj; } BeanDefinitionRegistry registry = beanDefinitionReader.getRegistry(); BeanDefinition beanDefinition = registry.getBeanDefinition(name); if(beanDefinition == null) { return null; } String className = beanDefinition.getClassName(); Class<?> clazz = Class.forName(className); Object beanObj = clazz.newInstance(); MutablePropertyValues propertyValues = beanDefinition.getPropertyValues(); for (PropertyValue propertyValue : propertyValues) { String propertyName = propertyValue.getName(); String value = propertyValue.getValue(); String ref = propertyValue.getRef(); if(ref != null && !\\\"\\\".equals(ref)) { Object bean = getBean(ref); String methodName = StringUtils.getSetterMethodNameByFieldName(propertyName); Method[] methods = clazz.getMethods(); for (Method method : methods) { if(method.getName().equals(methodName)) { method.invoke(beanObj,bean); } } } if(value != null && !\\\"\\\".equals(value)) { String methodName = StringUtils.getSetterMethodNameByFieldName(propertyName); Method method = clazz.getMethod(methodName, String.class); method.invoke(beanObj,value); } } singletonObjects.put(name,beanObj); return beanObj; } @Override public <T> T getBean(String name, Class<? extends T> clazz) throws Exception { Object bean = getBean(name); if(bean != null) { return clazz.cast(bean); } return null; } } \"]},\"213\":{\"h\":\"7.4.5 自定义 Spring IOC 总结\"},\"214\":{\"h\":\"7.4.5.1 使用到的设计模式\",\"t\":[\"工厂模式。这个使用工厂模式 + 配置文件的方式。\",\"单例模式。Spring IOC 管理的 bean 对象都是单例的，此处的单例不是通过构造器进行单例的控制的，而是 spring 框架对每一个 bean 只创建了一个对象。\",\"模板方法模式。AbstractApplicationContext 类中的 finishBeanInitialization()方法调用了子类的 getBean()方法，因为 getBean()的实现和环境息息相关。\",\"迭代器模式。对于 MutablePropertyValues 类定义使用到了迭代器模式，因为此类存储并管理 PropertyValue 对象，也属于一个容器，所以给该容器提供一个遍历方式。\",\"spring 框架其实使用到了很多设计模式，如 AOP 使用到了代理模式，选择 JDK 代理或者 CGLIB 代理使用到了策略模式，还有适配器模式，装饰者模式，观察者模式等。\"]},\"215\":{\"h\":\"7.4.5.2 符合大部分设计原则\"},\"216\":{\"h\":\"7.4.5.3 整个设计和 Spring 的设计还是有一定的出入\",\"t\":[\"spring 框架底层是很复杂的，进行了很深入的封装，并对外提供了很好的扩展性。而我们自定义 SpringIOC 有以下几个目的：\",\"了解 Spring 底层对对象的大体管理机制。\",\"了解设计模式在具体的开发中的使用。\",\"以后学习 spring 源码，通过该案例的实现，可以降低 spring 学习的入门成本。\",\" \"]},\"217\":{\"c\":[\"后端\"]},\"218\":{\"c\":[\"design pattern\"]},\"219\":{\"h\":\"设计模式\"},\"220\":{\"c\":[\"design pattern\"]},\"221\":{\"h\":\"创建型模式\",\"t\":[\"🏠 创建型模式 的主要关注点是 怎样创建对象，它的主要特点是 将对象的创建与使用分离。\",\"这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。\"]},\"222\":{\"h\":\"1 单例模式\",\"t\":[\"单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\",\"这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\",\"单例模式角色与种类\",\"单例模式的主要有以下角色：\",\"单例类。只能创建一个实例的类\",\"访问类。使用单例类\",\"单例设计模式分类两种：\",\"饿汉式：类加载就会导致该单实例对象被创建\",\"懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建\"]},\"223\":{\"h\":\"1.1 存在的问题\",\"t\":[\"使用序列化反序列化破坏单例模式\",\"使用反射破坏单例模式\",\"注意：枚举方式不会出现这两个问题\"]},\"224\":{\"h\":\"1.2 问题的解决\",\"t\":[\"序列化、反序列方式破坏单例模式的解决方法\",\"在 Singleton 类中添加 readResolve() 方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新 new 出来的对象。\",\"反射方式破解单例的解决方法\",\"这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。\",\" public class Singleton { //私有构造方法 private Singleton() { /* 反射破解单例模式需要添加的代码 */ if(instance != null) { throw new RuntimeException(); } } private static volatile Singleton instance; //对外提供静态方法获取该对象 public static Singleton getInstance() { if(instance != null) { return instance; } synchronized (Singleton.class) { if(instance != null) { return instance; } instance = new Singleton(); return instance; } } } \"]},\"225\":{\"h\":\"1.3 JDK 源码解析-Runtime 类\",\"t\":[\"Runtime 类就是使用的单例设计模式。\",\"从下面源代码中可以看出 Runtime 类使用的是饿汉式（静态属性）方式来实现单例模式的。\"]},\"226\":{\"h\":\"2 工厂模式\",\"t\":[\"需求：设计一个咖啡店点餐系统\",\"设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。\",\"在 java 中，万物皆对象，这些对象都需要创建，如果创建的时候直接 new 该对象，就会对该对象耦合严重，假如我们要更换对象，所有 new 对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：解耦。\"]},\"227\":{\"h\":\"2.1 简单工厂模式\",\"t\":[\"简单工厂不是一种设计模式，反而比较像是一种编程习惯。\",\"简单工厂包含如下角色：\",\"抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。\",\"具体产品 ：实现或者继承抽象产品的子类\",\"具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。\",\"简单工厂模式类图\",\"工厂（factory）处理创建对象的细节，一旦有了 SimpleCoffeeFactory，CoffeeStore 类中的 orderCoffee()就变成此对象的客户，后期如果需要 Coffee 对象直接从工厂中获取即可。这样也就解除了和 Coffee 实现类的耦合，同时又产生了新的耦合，CoffeeStore 对象和 SimpleCoffeeFactory 工厂对象的耦合，工厂对象和商品对象的耦合。\",\"后期如果再加新品种的咖啡，我们势必要需求修改 SimpleCoffeeFactory 的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。\"]},\"228\":{\"h\":\"2.2 工厂方法模式\",\"t\":[\"针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。\",\"定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。\",\"工厂方法模式的主要角色：\",\"抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。\",\"具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。\",\"抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。\",\"具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。\",\"工厂方法模式类图\",\"从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。\",\"工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。\"]},\"229\":{\"h\":\"2.3 抽象工厂模式\",\"t\":[\"前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。\",\"这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。\",\"产品族与产品等级\",\"抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。\",\"抽象工厂模式是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。\",\"抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。\",\"抽象工厂模式的主要角色如下：\",\"抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。\",\"具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。\",\"抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。\",\"具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。\",\"现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。\",\"其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（都属于美式风味）。\",\"所以这个案例可以使用抽象工厂模式实现。类图如下：\",\"如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。\"]},\"230\":{\"h\":\"2.4 模式扩展\",\"t\":[\"简单工厂+配置文件解除耦合（类似 SPI）\",\"可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。\"]},\"231\":{\"h\":\"2.5 JDK 源码解析-Collection.iterator 方法\",\"t\":[\"public class Demo { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"令狐冲\\\"); list.add(\\\"风清扬\\\"); list.add(\\\"任我行\\\"); //获取迭代器对象 Iterator<String> it = list.iterator(); //使用迭代器遍历 while(it.hasNext()) { String ele = it.next(); System.out.println(ele); } } } \",\"对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：\",\"Collection 接口是抽象工厂类，ArrayList 是具体的工厂类；Iterator 接口是抽象商品类，ArrayList 类中的 Iter 内部类是具体的商品类。在具体的工厂类中 iterator()方法创建具体的商品类的对象。\",\"另：DateForamt 类中的 getInstance()方法使用的是工厂模式；Calendar 类中的 getInstance()方法使用的是工厂模式；\"]},\"232\":{\"h\":\"3 原型模式\",\"t\":[\"用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。\",\"原型模式包含如下角色：\",\"抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。\",\"具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。\",\"访问类：使用具体原型类中的 clone() 方法来复制新的对象。\",\"原型模式类图\"]},\"233\":{\"h\":\"3.1 实现 Cloneable\",\"t\":[\"原型模式的克隆分为浅克隆和深克隆\",\"浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。\",\"深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。\",\"Java 中的 Object 类中提供了 clone() 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了 Cloneable 接口的子实现类就是具体的原型类。代码如下：\",\"用原型模式生成“三好学生”奖状\",\"同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。\"]},\"234\":{\"h\":\"3.2 扩展（深克隆）\",\"t\":[\"将上面的“三好学生”奖状的案例中 Citation 类的 name 属性修改为 Student 类型的属性。代码如下：\",\"运行结果为：\",\" stu 对象和 stu1 对象是同一个对象，就会产生将 stu1 对象中 name 属性值改为“李四”，两个 Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。\",\"代码如下：\",\"public class CitationTest1 { public static void main(String[] args) throws Exception { Citation c1 = new Citation(); Student stu = new Student(\\\"张三\\\", \\\"西安\\\"); c1.setStu(stu); //创建对象输出流对象 ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\\\"C:\\\\\\\\Users\\\\\\\\Think\\\\\\\\Desktop\\\\\\\\b.txt\\\")); //将c1对象写出到文件中 oos.writeObject(c1); oos.close(); //创建对象出入流对象 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\\\"C:\\\\\\\\Users\\\\\\\\Think\\\\\\\\Desktop\\\\\\\\b.txt\\\")); //读取对象 Citation c2 = (Citation) ois.readObject(); //获取c2奖状所属学生对象 Student stu1 = c2.getStu(); stu1.setName(\\\"李四\\\"); //判断stu对象和stu1对象是否是同一个对象 System.out.println(\\\"stu和stu1是同一个对象？\\\" + (stu == stu1)); c1.show(); c2.show(); } } \",\"运行结果为：\",\"注意：Citation 类和 Student 类必须实现 Serializable 接口，否则会抛 NotSerializableException 异常。\"]},\"235\":{\"h\":\"4 建造者模式\",\"t\":[\"将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。\",\"分离了部件的构造(由 Builder 来负责)和装配(由 Director 负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。\",\"由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。\",\"建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。\",\"建造者（Builder）模式包含如下角色：\",\"抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。\",\"具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。\",\"产品类（Product）：要创建的复杂对象。\",\"指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。\",\"建造者模式类图\"]},\"236\":{\"h\":\"4.1 创建共享单车案例\",\"t\":[\"生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。\",\"这里 Bike 是产品，包含车架，车座等组件；Builder 是抽象建造者，MobikeBuilder 和 OfoBuilder 是具体的建造者；Director 是指挥者。类图如下：\",\"注意：上面示例是 Builder 模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合\",\"// 抽象 builder 类 public abstract class Builder { protected Bike mBike = new Bike(); public abstract void buildFrame(); public abstract void buildSeat(); public abstract Bike createBike(); public Bike construct() { this.buildFrame(); this.BuildSeat(); return this.createBike(); } } \",\"说明：这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果 construct() 过于复杂，建议还是封装到 Director 中。\",\"使用场景\",\"建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。\",\"创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。\",\"创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。\"]},\"237\":{\"h\":\"4.2 模式扩展\",\"t\":[\"建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。\",\"重构前代码如下：\"]},\"238\":{\"h\":\"5 创建者模式对比\"},\"239\":{\"h\":\"5.1 工厂方法模式 VS 建造者模式\",\"t\":[\"工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。\",\"我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。\"]},\"240\":{\"h\":\"5.2 抽象工厂模式 VS 建造者模式\",\"t\":[\"抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。\",\"建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。\",\"如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。\"]},\"241\":{\"c\":[\"后端\"]},\"242\":{\"c\":[\"design pattern\"]},\"243\":{\"h\":\"概述\",\"t\":[\"📐 设计模式 最初并不是出现在软件设计中，而是被用于建筑领域的设计中。\",\"背景\",\"1977 年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（Christopher Alexander）在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。\",\"1990 年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到 1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。\"]},\"244\":{\"h\":\"软件设计模式的概念\",\"t\":[\"软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。\"]},\"245\":{\"h\":\"学习设计模式的必要性\",\"t\":[\"设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。\",\"正确使用设计模式具有以下优点：\",\"可以提高程序员的思维能力、编程能力和设计能力。\",\"使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\",\"使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\"]},\"246\":{\"h\":\"1 设计模式分类\",\"t\":[\"用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。\",\"结构型模式\",\"用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。\",\"行为型模式\",\"用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。\"]},\"247\":{\"h\":\"2 UML 图\",\"t\":[\"统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。\",\"UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。\"]},\"248\":{\"h\":\"2.1 类图概述\",\"t\":[\"类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。\"]},\"249\":{\"h\":\"2.2 类图的作用\",\"t\":[\"在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；\",\"类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。\"]},\"250\":{\"h\":\"3 类图表示法\"},\"251\":{\"h\":\"3.1 类的表示方式\",\"t\":[\"在 UML 类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个 Employee 类，它包含 name,age 和 address 这 3 个属性，以及 work()方法。\",\"属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML 类图中表示可见性的符号有三种：\",\"+：表示 public\",\"-：表示 private\",\"#：表示 protected\",\"属性的完整表示方式是： 可见性 + 名称 : 类型 [ = 缺省值]\",\"方法的完整表示方式是： 可见性 + 名称(参数列表) [ : 返回类型]\",\"注意\",\"中括号中的内容表示是可选的\",\"也有将类型放在变量名前面，返回值类型放在方法名前面\",\"举个栗子：\",\"上图 Demo 类定义了三个方法：\",\"method()方法：修饰符为 public，没有参数，没有返回值。\",\"method1()方法：修饰符为 private，没有参数，返回值类型为 String。\",\"method2()方法：修饰符为 protected，接收两个参数，第一个参数类型为 int，第二个参数类型为 String，返回值类型是 int。\"]},\"252\":{\"h\":\"3.2 类与类之间关系的表示方式\"},\"253\":{\"c\":[\"后端\"]},\"254\":{\"c\":[\"design pattern\"]},\"255\":{\"h\":\"软件设计原则\",\"t\":[\"💡 在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据 6条原则 来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。\"]},\"256\":{\"h\":\"1 开闭原则\",\"t\":[\"对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。\",\"想要达到这样的效果，我们需要 使用接口和抽象类 。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持 软件架构的稳定 。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。\",\"【例】搜狗输入法的皮肤设计\",\"搜狗输入法的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。\",\"这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin 和 HeimaSpecificSkin）是其子类。\",\"用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。\",\"开闭原则\"]},\"257\":{\"h\":\"2 里氏代换原则\",\"t\":[\"任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。\",\"如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。\",\"【例】正方形不是长方形\",\"在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。\",\"所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。\",\"正方形不是长方形\",\"注意\",\"假如我们把一个普通长方形作为参数传入 resize 方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期。\",\"假如我们再把一个正方形作为参数传入 resize 方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。\",\"因此，Square 类和 Rectangle 类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。\",\"如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让 Rectangle 类和 Square 类实现 Quadrilateral 接口\",\"正方形不是长方形-改进\"]},\"258\":{\"h\":\"3 依赖倒转原则\",\"t\":[\"高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。\",\"【例】组装电脑\",\"现要组装一台电脑，需要配件 cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。\",\"选择 cpu 有很多选择，如 Intel，AMD 等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。\",\"依赖倒转原则\",\"注意\",\"上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的 cpu 只能是 Intel 的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。\",\"我们只需要修改 Computer 类，让 Computer 类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。\",\"依赖倒转原则-改进\",\"面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。\"]},\"259\":{\"h\":\"4 接口隔离原则\",\"t\":[\"客户端不应该被迫依赖于它不使用的方法，一个类对另一个类的依赖应该建立在最小的接口上。\",\"【例】安全门案例\",\"我们需要创建一个黑马品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：\",\"接口隔离原则\",\"注意\",\"上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。\",\"现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？\",\"很显然如果实现 SafetyDoor 接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：\",\"接口隔离原则-改进\"]},\"260\":{\"h\":\"5 迪米特法则\",\"t\":[\"迪米特法则又叫最少知道原则。只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。\",\"迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。\",\"【例】明星与经纪人的关系实例\",\"明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。\",\"迪米特法则\"]},\"261\":{\"h\":\"6 合成复用原则\",\"t\":[\"尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。通常类的复用分为继承复用和合成复用两种。\",\"【例】汽车分类管理程序\",\"汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：\",\"合成复用原则\",\"注意\",\"从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。\",\"我们试着将继承复用改为聚合复用看一下。\",\"合成复用原则-改进\"]},\"262\":{\"c\":[\"后端\"]},\"263\":{\"c\":[\"design pattern\"]}},\"dirtCount\":0,\"index\":[[\"划分可分为白色汽车\",{\"1\":{\"261\":1}}],[\"划分可分为汽油汽车\",{\"1\":{\"261\":1}}],[\"汽车按\",{\"1\":{\"261\":1}}],[\"汽车分类管理程序\",{\"1\":{\"261\":1}}],[\"尽量先使用组合或者聚合等关联关系来实现\",{\"1\":{\"261\":1}}],[\"尽量不要重写父类的方法\",{\"1\":{\"257\":1}}],[\"明星由于全身心投入艺术\",{\"1\":{\"260\":1}}],[\"明星与经纪人的关系实例\",{\"1\":{\"260\":1}}],[\"明确各类的责任范围\",{\"1\":{\"139\":1}}],[\"聚合或组合关系\",{\"1\":{\"260\":1}}],[\"朋友\",{\"1\":{\"260\":1}}],[\"陌生人\",{\"1\":{\"260\":1}}],[\"黑色汽车和红色汽车等\",{\"1\":{\"261\":1}}],[\"黑马品牌的安全门具有防盗\",{\"1\":{\"259\":1}}],[\"黑箱\",{\"0\":{\"179\":1},\"1\":{\"177\":1}}],[\"形成一套规范\",{\"1\":{\"259\":1}}],[\"海盗船等\",{\"1\":{\"258\":1}}],[\"海尔姆\",{\"1\":{\"243\":1}}],[\"计算机才能正常的运行\",{\"1\":{\"258\":1}}],[\"硬盘只能是希捷的\",{\"1\":{\"258\":1}}],[\"硬盘可以选择希捷\",{\"1\":{\"258\":1}}],[\"硬盘\",{\"1\":{\"258\":1}}],[\"细节应该依赖抽象\",{\"1\":{\"258\":1}}],[\"高层模块不应该依赖低层模块\",{\"1\":{\"258\":1}}],[\"高性能的代码生成包\",{\"1\":{\"76\":1}}],[\"改进\",{\"1\":{\"257\":1,\"258\":1,\"259\":1,\"261\":1}}],[\"改短名字\",{\"1\":{\"33\":1}}],[\"特别是运用多态比较频繁时\",{\"1\":{\"257\":1}}],[\"特别是模型中存在的类\",{\"1\":{\"248\":1}}],[\"除添加新的方法完成新增功能外\",{\"1\":{\"257\":1}}],[\"除了创建它的发起人之外\",{\"1\":{\"180\":1}}],[\"除了模板方法模式和解释器模式是类行为型模式\",{\"1\":{\"113\":1}}],[\"换句话说\",{\"1\":{\"257\":1}}],[\"窗口颜色和声音等元素的组合\",{\"1\":{\"256\":1}}],[\"搜狗输入法的皮肤是输入法背景图片\",{\"1\":{\"256\":1}}],[\"搜狗输入法的皮肤设计\",{\"1\":{\"256\":1}}],[\"想要达到这样的效果\",{\"1\":{\"256\":1}}],[\"想使用迭代器模式的话\",{\"1\":{\"166\":1}}],[\"节约软件开发成本和维护成本\",{\"1\":{\"255\":1}}],[\"节约系统资源\",{\"1\":{\"112\":1}}],[\"💡\",{\"1\":{\"255\":1}}],[\"📐\",{\"1\":{\"243\":1}}],[\"修饰符为\",{\"1\":{\"251\":3}}],[\"修改很麻烦\",{\"1\":{\"98\":1}}],[\"修改主体\",{\"1\":{\"63\":1}}],[\"修改\",{\"0\":{\"57\":1,\"58\":1},\"1\":{\"42\":1,\"57\":1,\"58\":1}}],[\"修改成静态ip\",{\"1\":{\"30\":1}}],[\"修改文件系统\",{\"1\":{\"25\":1}}],[\"修改模板文件后\",{\"1\":{\"14\":1}}],[\"修改代码生成工具类\",{\"1\":{\"14\":1}}],[\"修改代码生成模板\",{\"0\":{\"14\":1}}],[\"举个栗子\",{\"1\":{\"251\":1}}],[\"举例来说\",{\"1\":{\"104\":1}}],[\"举例来说明\",{\"1\":{\"88\":1,\"166\":1}}],[\"参数列表\",{\"1\":{\"251\":1}}],[\"缺省值\",{\"1\":{\"251\":1}}],[\"缺点\",{\"1\":{\"78\":1,\"98\":1,\"112\":1,\"118\":1,\"125\":1,\"132\":1,\"139\":1,\"145\":1,\"151\":1,\"158\":1,\"164\":1,\"171\":1,\"180\":1,\"186\":1}}],[\"名称\",{\"1\":{\"251\":2}}],[\"描述了系统的类的集合\",{\"1\":{\"249\":1}}],[\"描述了产品的主要特性和功能\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"部署图等\",{\"1\":{\"247\":1}}],[\"部门经理的领导是总经理\",{\"1\":{\"138\":1}}],[\"部门经理处理7天以上的请假\",{\"1\":{\"138\":1}}],[\"部门经理处理3\",{\"1\":{\"138\":1}}],[\"部门经理审批\",{\"1\":{\"138\":1}}],[\"部门经理\",{\"1\":{\"138\":1}}],[\"活动图\",{\"1\":{\"247\":1}}],[\"统一\",{\"1\":{\"247\":1}}],[\"统一建模语言\",{\"1\":{\"247\":1}}],[\"统一响应对象\",{\"1\":{\"10\":1}}],[\"图\",{\"0\":{\"247\":1}}],[\"图形化\",{\"1\":{\"247\":1}}],[\"图形化的时候已经设置了\",{\"1\":{\"32\":2}}],[\"图形化用的网络管理\",{\"1\":{\"32\":1}}],[\"书中提供了模板方法\",{\"1\":{\"246\":1}}],[\"书中提供了代理\",{\"1\":{\"246\":1}}],[\"书中提供了单例\",{\"1\":{\"246\":1}}],[\"灵活性好\",{\"1\":{\"245\":1}}],[\"软件架构的稳定\",{\"1\":{\"256\":1}}],[\"软件设计原则\",{\"0\":{\"255\":1}}],[\"软件设计模式\",{\"1\":{\"244\":1}}],[\"软件设计模式的概念\",{\"0\":{\"244\":1}}],[\"软件菜单\",{\"1\":{\"104\":1}}],[\"著称\",{\"1\":{\"243\":1}}],[\"四人组\",{\"1\":{\"243\":1,\"246\":3}}],[\"位作者在软件开发领域里也以他们的\",{\"1\":{\"243\":1}}],[\"位作者合作出版了\",{\"1\":{\"243\":1}}],[\"导致了软件设计模式的突破\",{\"1\":{\"243\":1}}],[\"导致系统难以管理和维护\",{\"1\":{\"186\":1}}],[\"威利斯迪斯\",{\"1\":{\"243\":1}}],[\"约翰\",{\"1\":{\"243\":1}}],[\"约翰森\",{\"1\":{\"243\":1}}],[\"约定解释器的解释操作\",{\"1\":{\"184\":1}}],[\"拉尔夫\",{\"1\":{\"243\":1}}],[\"理査德\",{\"1\":{\"243\":1}}],[\"伽马\",{\"1\":{\"243\":1}}],[\"艾瑞克\",{\"1\":{\"243\":1}}],[\"年\",{\"1\":{\"243\":1}}],[\"年软件工程界开始研讨设计模式的话题\",{\"1\":{\"243\":1}}],[\"年美国著名建筑大师\",{\"1\":{\"243\":1}}],[\"花园和房间等进行设计的基本模式\",{\"1\":{\"243\":1}}],[\"花费的价格\",{\"1\":{\"86\":3}}],[\"住宅\",{\"1\":{\"243\":1}}],[\"邻里\",{\"1\":{\"243\":1}}],[\"城镇\",{\"1\":{\"243\":1}}],[\"亚历山大\",{\"1\":{\"243\":1}}],[\"背景\",{\"1\":{\"243\":1}}],[\"采用抽象工厂模式则是不需要关心构建过程\",{\"1\":{\"240\":1}}],[\"采用命令模式增加与删除命令不会影响其他类\",{\"1\":{\"132\":1}}],[\"具有一定的普遍性\",{\"1\":{\"244\":1}}],[\"具有不同分类维度的产品组合\",{\"1\":{\"240\":1}}],[\"具体建造者类\",{\"1\":{\"235\":1}}],[\"具体原型类\",{\"1\":{\"232\":1}}],[\"具体工厂\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"具体产品\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"具体节点\",{\"1\":{\"170\":1}}],[\"具体点可以理解为一个具有容器性质或者复合对象特性的类\",{\"1\":{\"169\":1}}],[\"具体元素角色\",{\"1\":{\"170\":1}}],[\"具体元素\",{\"1\":{\"169\":1}}],[\"具体访问者角色\",{\"1\":{\"170\":1}}],[\"具体访问者\",{\"1\":{\"169\":1}}],[\"具体的来看看\",{\"1\":{\"166\":1}}],[\"具体的聚合类\",{\"1\":{\"166\":1}}],[\"具体的命令\",{\"1\":{\"130\":1}}],[\"具体迭代器\",{\"1\":{\"162\":1}}],[\"具体聚合\",{\"1\":{\"162\":1}}],[\"具体同事类\",{\"1\":{\"156\":1,\"157\":2}}],[\"具体中介者\",{\"1\":{\"156\":1}}],[\"具体观察者\",{\"1\":{\"149\":1}}],[\"具体被观察者\",{\"1\":{\"149\":1,\"150\":1}}],[\"具体主题\",{\"1\":{\"149\":1}}],[\"具体状态\",{\"1\":{\"143\":1}}],[\"具体处理者\",{\"1\":{\"137\":1}}],[\"具体命令\",{\"1\":{\"130\":1}}],[\"具体策略\",{\"1\":{\"123\":1}}],[\"具体如何读取一个字节数据呢\",{\"1\":{\"120\":1}}],[\"具体子类\",{\"1\":{\"116\":1}}],[\"具体方法\",{\"1\":{\"116\":1}}],[\"具体享元\",{\"1\":{\"110\":1}}],[\"具体实现化\",{\"1\":{\"92\":1}}],[\"具体装饰\",{\"1\":{\"86\":1}}],[\"具体构件\",{\"1\":{\"86\":1}}],[\"于是一个超人就诞生了\",{\"1\":{\"239\":1}}],[\"躯干等部分\",{\"1\":{\"239\":1}}],[\"脚\",{\"1\":{\"239\":1}}],[\"头\",{\"1\":{\"239\":1}}],[\"意在通过一步一步地精确构造创建出一个复杂的对象\",{\"1\":{\"239\":1}}],[\"过于复杂\",{\"1\":{\"236\":1}}],[\"过滤器2\",{\"1\":{\"140\":2}}],[\"过滤器1\",{\"1\":{\"140\":2}}],[\"过滤器\",{\"1\":{\"140\":2}}],[\"车座等组件\",{\"1\":{\"236\":1}}],[\"车座等组件的生产\",{\"1\":{\"236\":1}}],[\"车座有橡胶\",{\"1\":{\"236\":1}}],[\"铝合金等材质的\",{\"1\":{\"236\":1}}],[\"装配算法的解耦\",{\"1\":{\"235\":1}}],[\"装饰模式可以动态扩展一个实现类的功能\",{\"1\":{\"86\":1}}],[\"装饰模式是继承的一个替代模式\",{\"1\":{\"86\":1}}],[\"装饰类和被装饰类可以独立发展\",{\"1\":{\"86\":1}}],[\"装饰者是由外界传递进来\",{\"1\":{\"89\":1}}],[\"装饰者是为了增强目标对象\",{\"1\":{\"89\":1}}],[\"装饰者则是动态的附加责任\",{\"1\":{\"86\":1}}],[\"装饰者模式比继承更具良好的扩展性\",{\"1\":{\"86\":1}}],[\"装饰者模式\",{\"1\":{\"70\":1,\"86\":3,\"214\":1}}],[\"装饰\",{\"1\":{\"86\":1,\"246\":1}}],[\"某个对象的构建过程复杂的情况\",{\"1\":{\"235\":1}}],[\"建筑\",{\"1\":{\"243\":1}}],[\"建筑模式语言\",{\"1\":{\"243\":1}}],[\"建议还是封装到\",{\"1\":{\"236\":1}}],[\"建议默认\",{\"1\":{\"22\":2}}],[\"建造者等\",{\"1\":{\"246\":1}}],[\"建造者\",{\"1\":{\"235\":1,\"236\":1}}],[\"建造者模式则是要求按照指定的蓝图建造产品\",{\"1\":{\"240\":1}}],[\"建造者模式除了上面的用途外\",{\"1\":{\"237\":1}}],[\"建造者模式类图\",{\"1\":{\"235\":1}}],[\"建造者模式可以将部件和其组装过程分开\",{\"1\":{\"235\":1}}],[\"建造者模式\",{\"0\":{\"235\":1,\"239\":1,\"240\":1}}],[\"异常\",{\"1\":{\"234\":1}}],[\"西数等\",{\"1\":{\"258\":1}}],[\"西安\",{\"1\":{\"234\":1}}],[\"西红柿鸡蛋面\",{\"1\":{\"131\":1}}],[\"奖状的案例中\",{\"1\":{\"234\":1}}],[\"奖状出来\",{\"1\":{\"233\":1}}],[\"奖状除了获奖人姓名不同\",{\"1\":{\"233\":1}}],[\"奖状\",{\"1\":{\"233\":1,\"234\":1}}],[\"属性的完整表示方式是\",{\"1\":{\"251\":1}}],[\"属性\",{\"1\":{\"251\":2}}],[\"属性值改为\",{\"1\":{\"234\":1}}],[\"属性修改为\",{\"1\":{\"234\":1}}],[\"属性中引用的其他对象也会被克隆\",{\"1\":{\"233\":1}}],[\"属于延时加载\",{\"1\":{\"189\":1}}],[\"属于具体\",{\"1\":{\"134\":1}}],[\"深克隆\",{\"0\":{\"234\":1},\"1\":{\"233\":1}}],[\"仍指向原有属性所指向的对象的内存地址\",{\"1\":{\"233\":1}}],[\"浅克隆\",{\"1\":{\"233\":1}}],[\"另\",{\"1\":{\"231\":1}}],[\"风清扬\",{\"1\":{\"231\":1}}],[\"令狐冲\",{\"1\":{\"231\":1}}],[\"拿铁咖啡和提拉米苏是同一产品族\",{\"1\":{\"229\":1}}],[\"甜点工厂类\",{\"1\":{\"229\":1}}],[\"抹茶慕斯也是一个产品等级\",{\"1\":{\"229\":1}}],[\"抹茶慕斯工厂\",{\"1\":{\"229\":1}}],[\"抹茶慕斯类\",{\"1\":{\"229\":1}}],[\"抹茶慕斯等\",{\"1\":{\"229\":1}}],[\"纵轴是产品族\",{\"1\":{\"229\":1}}],[\"能表达软件设计中的动态与静态信息\",{\"1\":{\"247\":1}}],[\"能生产多等级\",{\"1\":{\"229\":1}}],[\"能够飞翔\",{\"1\":{\"239\":1}}],[\"能够逐个节点的进行读取解析运算\",{\"1\":{\"183\":1}}],[\"能够解析由数字以及\",{\"1\":{\"183\":1}}],[\"能够得到的备忘录对象是以\",{\"1\":{\"179\":1}}],[\"针对上例中的缺点\",{\"1\":{\"228\":1}}],[\"针对不同的节日\",{\"1\":{\"124\":1}}],[\"省去其他的修改操作\",{\"1\":{\"227\":1}}],[\"违反了开闭原则\",{\"1\":{\"227\":1}}],[\"违反了依赖倒置原则\",{\"1\":{\"171\":1}}],[\"达到了与对象解耦的目的\",{\"1\":{\"226\":1}}],[\"彻底和对象解耦\",{\"1\":{\"226\":1}}],[\"万物皆对象\",{\"1\":{\"226\":1}}],[\"咖啡店具有点咖啡的功能\",{\"1\":{\"226\":1}}],[\"再设计一个咖啡店类\",{\"1\":{\"226\":1}}],[\"再次启动又报错了\",{\"1\":{\"7\":1}}],[\"美式咖啡和抹茶慕斯是同一产品族\",{\"1\":{\"229\":1}}],[\"美式咖啡是一个产品等级\",{\"1\":{\"229\":1}}],[\"美式咖啡\",{\"1\":{\"226\":1}}],[\"美女服务员\",{\"1\":{\"131\":1}}],[\"需求\",{\"1\":{\"226\":1}}],[\"需要配件\",{\"1\":{\"258\":1}}],[\"需要定义提拉米苏类\",{\"1\":{\"229\":1}}],[\"需要交由\",{\"1\":{\"201\":1}}],[\"需要提供一个可回滚操作的场景\",{\"1\":{\"181\":1}}],[\"需要保存与恢复数据的场景\",{\"1\":{\"181\":1}}],[\"需要租三室的房子\",{\"1\":{\"157\":1}}],[\"需要通过子类来决定父类算法中某个步骤是否执行\",{\"1\":{\"119\":1}}],[\"需要将享元对象的部分状态外部化\",{\"1\":{\"112\":1}}],[\"需要开发一个跨平台视频播放器\",{\"1\":{\"93\":1}}],[\"需要创建不同的图形\",{\"1\":{\"91\":1}}],[\"需要去火车站买票\",{\"1\":{\"74\":1}}],[\"需要自己编译\",{\"1\":{\"46\":1}}],[\"需要用的时候克隆修改\",{\"1\":{\"34\":1}}],[\"需要一会\",{\"1\":{\"32\":1}}],[\"私有构造方法\",{\"1\":{\"224\":1}}],[\"出来的对象\",{\"1\":{\"224\":1}}],[\"出现版本号就说明对了\",{\"1\":{\"33\":1}}],[\"序列化\",{\"1\":{\"224\":1}}],[\"问题的解决\",{\"0\":{\"224\":1}}],[\"问题分析\",{\"1\":{\"142\":1}}],[\"枚举方式不会出现这两个问题\",{\"1\":{\"223\":1}}],[\"懒汉式\",{\"1\":{\"222\":1}}],[\"饿汉式\",{\"1\":{\"222\":1}}],[\"怎样创建对象\",{\"1\":{\"221\":1,\"246\":1}}],[\"学习设计模式的必要性\",{\"0\":{\"245\":1}}],[\"学习的入门成本\",{\"1\":{\"216\":1}}],[\"学生列表\",{\"1\":{\"163\":1}}],[\"底层对对象的大体管理机制\",{\"1\":{\"216\":1}}],[\"底层采用\",{\"1\":{\"77\":1}}],[\"整个设计和\",{\"0\":{\"216\":1}}],[\"单例设计模式分类两种\",{\"1\":{\"222\":1}}],[\"单例类\",{\"1\":{\"222\":1}}],[\"单例模式的主要有以下角色\",{\"1\":{\"222\":1}}],[\"单例模式角色与种类\",{\"1\":{\"222\":1}}],[\"单例模式\",{\"0\":{\"222\":1},\"1\":{\"214\":1,\"222\":1}}],[\"单列集合都使用到了迭代器\",{\"1\":{\"166\":1}}],[\"哪儿个子实现类对象\",{\"1\":{\"211\":1}}],[\"及子标签\",{\"1\":{\"201\":1}}],[\"及其他对象看到的仅仅是标识接口\",{\"1\":{\"179\":1}}],[\"及其他对象使用\",{\"1\":{\"179\":1}}],[\"信息的\",{\"1\":{\"201\":1}}],[\"体现到上面的配置文件就是封装\",{\"1\":{\"199\":1}}],[\"体会装饰者模式的精髓\",{\"1\":{\"86\":1}}],[\"规定了具体原型对象必须实现的的\",{\"1\":{\"232\":1}}],[\"规定了\",{\"1\":{\"196\":1}}],[\"规则\",{\"1\":{\"183\":1}}],[\"规则为\",{\"1\":{\"183\":1}}],[\"往注册表中注册bean\",{\"1\":{\"195\":1}}],[\"答案就是\",{\"1\":{\"195\":1}}],[\"标签可以有多个\",{\"1\":{\"200\":1}}],[\"标签数据\",{\"1\":{\"199\":1}}],[\"标签的子标签\",{\"1\":{\"199\":1}}],[\"标签\",{\"1\":{\"195\":1}}],[\"功能被分得很细\",{\"1\":{\"194\":1}}],[\"加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫\",{\"1\":{\"243\":1}}],[\"加载beandefinition\",{\"1\":{\"211\":1}}],[\"加载配置文件并在注册表中进行注册\",{\"1\":{\"206\":1}}],[\"加载配置文件\",{\"1\":{\"206\":1,\"210\":1}}],[\"加载注解类配置\",{\"1\":{\"192\":1}}],[\"加法表达式\",{\"1\":{\"185\":1}}],[\"正方形毫无疑问是长方形\",{\"1\":{\"257\":1}}],[\"正方形不是长方形\",{\"1\":{\"257\":4}}],[\"正确使用设计模式具有以下优点\",{\"1\":{\"245\":1}}],[\"正如我们只关心能从工厂里得到什么产品\",{\"1\":{\"192\":1}}],[\"正常的很\",{\"1\":{\"144\":1}}],[\"正常情况下\",{\"1\":{\"142\":1}}],[\"根本不关心你的\",{\"1\":{\"192\":1}}],[\"根据注册表中的\",{\"1\":{\"210\":1}}],[\"根据bean的id属性值获取bean对象\",{\"1\":{\"212\":1}}],[\"根据bean的名称判断是否是单例\",{\"1\":{\"192\":1}}],[\"根据bean的名称获取ioc容器中的的bean对象\",{\"1\":{\"192\":2}}],[\"根据bean对象的名称获取bean对象\",{\"1\":{\"209\":2}}],[\"根据名称从注册表中获取beandefinition对象\",{\"1\":{\"203\":1}}],[\"根据名称从注册表中获取\",{\"1\":{\"203\":1}}],[\"根据系统路径加载\",{\"1\":{\"192\":1}}],[\"根据类路径加载\",{\"1\":{\"192\":1}}],[\"根据对象的类型而对方法进行的选择\",{\"1\":{\"173\":1}}],[\"根据这个策略来进行排序\",{\"1\":{\"127\":1}}],[\"根据抽象构件类的定义形式\",{\"1\":{\"105\":1}}],[\"根据多态的特性\",{\"1\":{\"75\":1}}],[\"里氏代换原则\",{\"0\":{\"257\":1}}],[\"里只对\",{\"1\":{\"192\":1}}],[\"里面\",{\"1\":{\"179\":1}}],[\"里面存储了订阅该公众号的微信用户\",{\"1\":{\"150\":1}}],[\"里面实现了更新的方法\",{\"1\":{\"150\":1}}],[\"里面定义一个更新的方法\",{\"1\":{\"150\":1}}],[\"存在的问题\",{\"0\":{\"223\":1}}],[\"存在的意义\",{\"1\":{\"190\":1}}],[\"存储配置文件的路径\",{\"1\":{\"211\":1}}],[\"存储子节点\",{\"1\":{\"103\":1}}],[\"产品类\",{\"1\":{\"235\":1}}],[\"产品族与产品等级\",{\"1\":{\"229\":1}}],[\"产品的需求而设计的\",{\"1\":{\"189\":1}}],[\"产生过多的子类\",{\"1\":{\"86\":1}}],[\"扫描组件\",{\"1\":{\"189\":1}}],[\"任我行\",{\"1\":{\"231\":1}}],[\"任务调度等\",{\"1\":{\"189\":1}}],[\"任何基类可以出现的地方\",{\"1\":{\"257\":1}}],[\"任何一个类的变动\",{\"1\":{\"155\":1}}],[\"任何类都可能成为一个接收者\",{\"1\":{\"130\":1}}],[\"核心容器由\",{\"1\":{\"189\":1}}],[\"核心容器\",{\"1\":{\"189\":1}}],[\"核心功能结构\",{\"0\":{\"189\":1}}],[\"核心启动文件\",{\"0\":{\"49\":1}}],[\"已经将\",{\"1\":{\"188\":1}}],[\"已经是运行状态了\",{\"1\":{\"142\":1}}],[\"已经是关门状态\",{\"1\":{\"142\":1}}],[\"层\",{\"1\":{\"188\":1}}],[\"层名\",{\"1\":{\"5\":1}}],[\"业务逻辑层\",{\"1\":{\"188\":1}}],[\"框架底层是很复杂的\",{\"1\":{\"216\":1}}],[\"框架其实使用到了很多设计模式\",{\"1\":{\"214\":1}}],[\"框架对每一个\",{\"1\":{\"214\":1}}],[\"框架事件体系及资源加载透明化等功能\",{\"1\":{\"189\":1}}],[\"框架的核心模块\",{\"1\":{\"189\":1}}],[\"框架的总体架构图\",{\"1\":{\"189\":1}}],[\"框架的\",{\"1\":{\"188\":1,\"197\":1}}],[\"框架的使用\",{\"1\":{\"188\":1}}],[\"框架前\",{\"1\":{\"188\":1}}],[\"易于维护和升级\",{\"1\":{\"256\":1}}],[\"易于改变和扩展文法\",{\"1\":{\"186\":1}}],[\"易于扩展\",{\"1\":{\"125\":1}}],[\"减法表达式\",{\"1\":{\"185\":1}}],[\"减少了客户处理的对象数目\",{\"1\":{\"98\":1}}],[\"非终结符表达式角色\",{\"1\":{\"185\":2}}],[\"非终结符表达式\",{\"1\":{\"184\":1}}],[\"非享元\",{\"1\":{\"110\":1}}],[\"终结符表达式角色\",{\"1\":{\"185\":2}}],[\"终结符表达式\",{\"1\":{\"184\":1}}],[\"树上的每个节点都表示源代码中的一种结构\",{\"1\":{\"183\":1}}],[\"树枝节点\",{\"1\":{\"103\":1}}],[\"或简称语法树\",{\"1\":{\"183\":1}}],[\"或者\",{\"1\":{\"139\":1,\"183\":1}}],[\"或者说某些步骤的实现与具体的环境相关\",{\"1\":{\"115\":1}}],[\"或者尝试构建自己的镜像\",{\"1\":{\"38\":1}}],[\"值的类型为整型数\",{\"1\":{\"183\":1}}],[\"表达式可以是一个值\",{\"1\":{\"183\":1}}],[\"表示这些\",{\"1\":{\"192\":1}}],[\"表示这个服务会起\",{\"1\":{\"43\":1}}],[\"表示或\",{\"1\":{\"183\":1}}],[\"表示\",{\"1\":{\"183\":1,\"251\":3}}],[\"表示对象的全部或部分层次\",{\"1\":{\"106\":1}}],[\"左右的其中一个\",{\"1\":{\"183\":1}}],[\"竖线\",{\"1\":{\"183\":1}}],[\"符号组成的合法序列\",{\"1\":{\"183\":1}}],[\"符号构成的合法的运算序列\",{\"1\":{\"183\":1}}],[\"符合大部分设计原则\",{\"0\":{\"215\":1}}],[\"符合单一职责原则\",{\"1\":{\"211\":1}}],[\"符合类的单一职责原则\",{\"1\":{\"139\":1}}],[\"符合\",{\"1\":{\"106\":1,\"125\":1,\"186\":1}}],[\"显然\",{\"1\":{\"183\":1}}],[\"显然比较麻烦\",{\"1\":{\"74\":1}}],[\"两者都应该依赖其抽象\",{\"1\":{\"258\":1}}],[\"两者之间是抽象耦合关系\",{\"1\":{\"151\":1}}],[\"两个\",{\"1\":{\"234\":1}}],[\"两个运算符与数值可以有无限种组合方式\",{\"1\":{\"183\":1}}],[\"资源消耗大\",{\"1\":{\"180\":1}}],[\"资深大厨类\",{\"1\":{\"131\":1}}],[\"资深大厨\",{\"1\":{\"131\":1}}],[\"语法\",{\"1\":{\"183\":1}}],[\"语言\",{\"1\":{\"183\":1}}],[\"语言中\",{\"1\":{\"179\":1}}],[\"语句\",{\"1\":{\"139\":1}}],[\"恢复之前状态\",{\"1\":{\"178\":2,\"179\":2}}],[\"损耗严重\",{\"1\":{\"178\":1,\"179\":1}}],[\"回复角色状态\",{\"1\":{\"178\":1,\"179\":1}}],[\"战斗\",{\"1\":{\"178\":1,\"179\":1}}],[\"战狼3\",{\"1\":{\"93\":1}}],[\"白箱备忘录模式是破坏封装性的\",{\"1\":{\"178\":1}}],[\"白箱\",{\"0\":{\"178\":1},\"1\":{\"177\":1}}],[\"决斗的效果不理想可以让游戏恢复到决斗之前的状态\",{\"1\":{\"177\":1}}],[\"防火的功能\",{\"1\":{\"259\":1}}],[\"防火墙就将你的浏览器的请求转给互联网\",{\"1\":{\"79\":1}}],[\"防火墙\",{\"1\":{\"79\":1}}],[\"防盗功能提取成一个接口\",{\"1\":{\"259\":1}}],[\"防盗的功能\",{\"1\":{\"259\":1}}],[\"防水功能呢\",{\"1\":{\"259\":1}}],[\"防水\",{\"1\":{\"259\":3}}],[\"防御力\",{\"1\":{\"178\":1,\"179\":1}}],[\"防御力等数据\",{\"1\":{\"177\":1}}],[\"攻击力\",{\"1\":{\"177\":1,\"178\":1,\"179\":1}}],[\"游戏状态存储类\",{\"1\":{\"178\":1}}],[\"游戏角色类\",{\"1\":{\"178\":1,\"179\":1}}],[\"游戏中的某个场景\",{\"1\":{\"177\":1}}],[\"游戏挑战\",{\"1\":{\"177\":1}}],[\"游戏等\",{\"1\":{\"136\":1}}],[\"宽接口\",{\"1\":{\"176\":1}}],[\"看如下类图\",{\"1\":{\"259\":1}}],[\"看看\",{\"1\":{\"194\":2}}],[\"看到的是备忘录的窄接口\",{\"1\":{\"176\":1}}],[\"看完这段代码是不是很熟悉\",{\"1\":{\"166\":1}}],[\"窄接口memento\",{\"1\":{\"179\":1}}],[\"窄接口\",{\"1\":{\"176\":1}}],[\"管理的\",{\"1\":{\"214\":1}}],[\"管理的类的全类名\",{\"1\":{\"201\":1}}],[\"管理运行中的对象\",{\"1\":{\"189\":1}}],[\"管理了\",{\"1\":{\"188\":1}}],[\"管理者\",{\"1\":{\"176\":2}}],[\"管理机构收取一定比例的托管管理费用\",{\"1\":{\"96\":1}}],[\"捕获一个对象的内部状态\",{\"1\":{\"175\":1}}],[\"棋类游戏中的悔棋功能等都属于这类\",{\"1\":{\"175\":1}}],[\"玩游戏时的中间结果存档功能\",{\"1\":{\"175\":1}}],[\"浏览器\",{\"1\":{\"175\":1}}],[\"记录当前时刻的内部状态信息\",{\"1\":{\"176\":1}}],[\"记录遍历的当前位置\",{\"1\":{\"162\":1}}],[\"记事本\",{\"1\":{\"175\":1,\"181\":1}}],[\"很容易发生类爆炸情况\",{\"1\":{\"229\":1}}],[\"很多软件都提供了撤销\",{\"1\":{\"175\":1}}],[\"很显然如果实现\",{\"1\":{\"259\":1}}],[\"很显然\",{\"1\":{\"76\":1}}],[\"说话\",{\"1\":{\"260\":1}}],[\"说到这里\",{\"1\":{\"173\":1}}],[\"说明\",{\"1\":{\"5\":1,\"188\":1,\"236\":1}}],[\"双分派实现动态绑定的本质\",{\"1\":{\"173\":1}}],[\"双分派\",{\"1\":{\"173\":1}}],[\"静态属性\",{\"1\":{\"225\":1}}],[\"静态分派对于我们来说并不陌生\",{\"1\":{\"173\":1}}],[\"静态分派\",{\"1\":{\"173\":2}}],[\"静态代理是在代理类内部创建\",{\"1\":{\"89\":1}}],[\"静态代理是为了保护和隐藏目标对象\",{\"1\":{\"89\":1}}],[\"静态代理和装饰者模式的区别\",{\"1\":{\"89\":1}}],[\"静态代理模式除了所有实现类需要实现这个方法外\",{\"1\":{\"77\":1}}],[\"静态代理\",{\"0\":{\"74\":1}}],[\"静态代理代理类在编译期就生成\",{\"1\":{\"72\":1}}],[\"变量\",{\"1\":{\"188\":1}}],[\"变量我们并没有进行赋值\",{\"1\":{\"188\":1}}],[\"变量表达式\",{\"1\":{\"185\":1}}],[\"变量的静态类型是\",{\"1\":{\"173\":1}}],[\"变量被声明时的类型叫做变量的静态类型\",{\"1\":{\"173\":1}}],[\"构件图\",{\"1\":{\"247\":1}}],[\"构造\",{\"1\":{\"243\":1}}],[\"构成一个访问者\",{\"1\":{\"171\":1}}],[\"构建xmlbeandefinitionreader对象\",{\"1\":{\"212\":1}}],[\"构建镜像\",{\"0\":{\"50\":1},\"1\":{\"50\":1}}],[\"构建缓存\",{\"1\":{\"32\":1}}],[\"复用性好\",{\"1\":{\"171\":1}}],[\"此时我们需要重新设计他们之间的关系\",{\"1\":{\"257\":1}}],[\"此时就可以利用建造者模式进行重构\",{\"1\":{\"237\":1}}],[\"此处的单例不是通过构造器进行单例的控制的\",{\"1\":{\"214\":1}}],[\"此外\",{\"1\":{\"189\":1}}],[\"此案例中就是主人的家\",{\"1\":{\"170\":1}}],[\"此角色给出所有的具体策略类所需的接口\",{\"1\":{\"123\":1}}],[\"喵喵喵\",{\"1\":{\"170\":1}}],[\"汪汪汪\",{\"1\":{\"170\":1}}],[\"好好吃\",{\"1\":{\"170\":2}}],[\"好处\",{\"1\":{\"86\":1,\"93\":1,\"98\":1}}],[\"宠物\",{\"1\":{\"170\":1}}],[\"宠物猫\",{\"1\":{\"170\":1}}],[\"宠物狗\",{\"1\":{\"170\":1}}],[\"猫等\",{\"1\":{\"170\":1}}],[\"封装一些作用于某种数据结构中的各元素的操作\",{\"1\":{\"168\":1}}],[\"与\",{\"1\":{\"189\":1}}],[\"与管理者看到的窄接口相反\",{\"1\":{\"176\":1}}],[\"与我们上面代码基本类似\",{\"1\":{\"166\":1}}],[\"与中介者联系\",{\"1\":{\"157\":2}}],[\"源码\",{\"1\":{\"216\":1}}],[\"源码中是如何使用迭代器模式的\",{\"1\":{\"166\":1}}],[\"源码解析\",{\"0\":{\"86\":1,\"88\":1,\"100\":1,\"113\":1,\"120\":1,\"127\":1,\"134\":1,\"140\":1,\"166\":1,\"225\":1,\"231\":1}}],[\"迭代器\",{\"1\":{\"246\":1}}],[\"迭代器简化了聚合类\",{\"1\":{\"164\":1}}],[\"迭代器模式在\",{\"1\":{\"166\":1}}],[\"迭代器模式主要包含以下角色\",{\"1\":{\"162\":1}}],[\"迭代器模式\",{\"0\":{\"160\":1},\"1\":{\"113\":1,\"214\":1}}],[\"涉及到的类如下\",{\"1\":{\"163\":1}}],[\"返回值类型是\",{\"1\":{\"251\":1}}],[\"返回值类型放在方法名前面\",{\"1\":{\"251\":1}}],[\"返回值类型为\",{\"1\":{\"116\":1,\"251\":1}}],[\"返回类型\",{\"1\":{\"251\":1}}],[\"返回的是实现了\",{\"1\":{\"166\":1}}],[\"返回一个具体迭代器的实例\",{\"1\":{\"162\":1}}],[\"被使用时\",{\"1\":{\"189\":1}}],[\"被封装在中介者对象里面集中管理\",{\"1\":{\"158\":1}}],[\"被观察者\",{\"1\":{\"153\":1}}],[\"被观察者发送通知\",{\"1\":{\"151\":1}}],[\"集合\",{\"1\":{\"211\":1}}],[\"集合作为注册表容器\",{\"1\":{\"204\":1}}],[\"集合等\",{\"1\":{\"189\":1}}],[\"集合成员变量\",{\"1\":{\"153\":1}}],[\"集中控制交互\",{\"1\":{\"158\":1}}],[\"了解设计模式在具体的开发中的使用\",{\"1\":{\"216\":1}}],[\"了解\",{\"1\":{\"216\":1}}],[\"了\",{\"1\":{\"158\":1}}],[\"牵一处而动全身\",{\"1\":{\"158\":1}}],[\"松散耦合\",{\"1\":{\"158\":1}}],[\"李四\",{\"1\":{\"157\":1,\"234\":2}}],[\"张三\",{\"1\":{\"157\":1,\"234\":1}}],[\"首先中介结构必须知道所有房主和租房者的信息\",{\"1\":{\"157\":1}}],[\"首先需要创建一个文件夹\",{\"1\":{\"43\":1}}],[\"承租人\",{\"1\":{\"157\":1}}],[\"申明一个联络方法\",{\"1\":{\"157\":1}}],[\"房主和租房者只需要知道中介机构即可\",{\"1\":{\"157\":1}}],[\"房主\",{\"1\":{\"157\":1}}],[\"房主将房屋托管给房屋中介\",{\"1\":{\"157\":1}}],[\"房屋拥有者\",{\"1\":{\"157\":1}}],[\"房屋中介充当租房者与房屋所有者之间的中介者\",{\"1\":{\"157\":1}}],[\"租房者\",{\"1\":{\"157\":1}}],[\"租房\",{\"1\":{\"157\":1}}],[\"保存进度\",{\"1\":{\"178\":1,\"179\":1}}],[\"保存角色状态\",{\"1\":{\"178\":1,\"179\":1}}],[\"保存中介者对象\",{\"1\":{\"156\":1}}],[\"保护\",{\"1\":{\"79\":1}}],[\"协作图\",{\"1\":{\"247\":1}}],[\"协调各个同事角色之间的交互关系\",{\"1\":{\"156\":1}}],[\"协议存在的组成\",{\"1\":{\"54\":1}}],[\"来开发程序\",{\"1\":{\"255\":1}}],[\"来负责\",{\"1\":{\"235\":1}}],[\"来完成\",{\"1\":{\"194\":1}}],[\"来描述的\",{\"1\":{\"193\":1}}],[\"来看一下它的源码\",{\"1\":{\"192\":1}}],[\"来管理同事对象\",{\"1\":{\"156\":1}}],[\"来获取代理对象\",{\"1\":{\"75\":1}}],[\"必须保证足够的灵活性\",{\"1\":{\"194\":1}}],[\"必须有区别地对待叶子构件和容器构件\",{\"1\":{\"105\":1}}],[\"必定不会把所有的对象关系处理逻辑封装在本类中\",{\"1\":{\"155\":1}}],[\"假如我们再把一个正方形作为参数传入\",{\"1\":{\"257\":1}}],[\"假如我们再增加一个形状或再增加一种颜色\",{\"1\":{\"91\":1}}],[\"假如我们把一个普通长方形作为参数传入\",{\"1\":{\"257\":1}}],[\"假如我们要更换对象\",{\"1\":{\"226\":1}}],[\"假如对象\",{\"1\":{\"155\":1}}],[\"他们之间的关系会呈现为复杂的网状结构\",{\"1\":{\"155\":1}}],[\"他们的插座如下图最左边\",{\"1\":{\"81\":1}}],[\"隔壁老王\",{\"1\":{\"153\":1}}],[\"警察\",{\"1\":{\"153\":1}}],[\"警察是一个观察者\",{\"1\":{\"153\":1}}],[\"警察是观察者\",{\"1\":{\"153\":1}}],[\"警察抓小偷也可以使用观察者模式来实现\",{\"1\":{\"153\":1}}],[\"警察抓小偷\",{\"1\":{\"153\":1}}],[\"观察者\",{\"1\":{\"246\":1}}],[\"观察者得到通知\",{\"1\":{\"153\":1}}],[\"观察者模式等\",{\"1\":{\"214\":1}}],[\"观察者模式\",{\"0\":{\"147\":1},\"1\":{\"113\":1}}],[\"才会对该\",{\"1\":{\"189\":1}}],[\"才会通知观察者\",{\"1\":{\"153\":1}}],[\"才需要\",{\"1\":{\"43\":1}}],[\"公众号更新发出消息给订阅的微信用户\",{\"1\":{\"150\":1}}],[\"公司员工请假\",{\"1\":{\"136\":1}}],[\"沙悟净\",{\"1\":{\"150\":1}}],[\"猪悟能\",{\"1\":{\"150\":1}}],[\"孙悟空\",{\"1\":{\"150\":1}}],[\"储存订阅公众号的微信用户\",{\"1\":{\"150\":1}}],[\"删除元素\",{\"1\":{\"163\":1}}],[\"删除聚合元素以及创建迭代器对象的接口\",{\"1\":{\"162\":1}}],[\"删除订阅者\",{\"1\":{\"150\":1}}],[\"删除失败\",{\"1\":{\"13\":1}}],[\"三好学生\",{\"1\":{\"233\":3,\"234\":1}}],[\"三个方法\",{\"1\":{\"150\":1}}],[\"三种代理的对比\",{\"0\":{\"77\":1}}],[\"微信用户名\",{\"1\":{\"150\":1}}],[\"微信用户是观察者\",{\"1\":{\"150\":1}}],[\"微信用户就是观察者\",{\"1\":{\"150\":1}}],[\"微信公众号是具体主题\",{\"1\":{\"150\":1}}],[\"微信公众号是被观察者\",{\"1\":{\"150\":1}}],[\"微信公众号\",{\"1\":{\"150\":1}}],[\"订阅公众号\",{\"1\":{\"150\":1}}],[\"订阅\",{\"1\":{\"148\":1}}],[\"订单来了\",{\"1\":{\"131\":2}}],[\"订单\",{\"1\":{\"131\":1}}],[\"允许状态转换逻辑与状态对象合成一体\",{\"1\":{\"145\":1}}],[\"允许状态对象在其内部状态发生改变时改变其行为\",{\"1\":{\"142\":1}}],[\"逗你玩呢\",{\"1\":{\"144\":1}}],[\"估计只有上帝了\",{\"1\":{\"144\":1}}],[\"光运行不停止还有谁敢做这个电梯\",{\"1\":{\"144\":1}}],[\"虽然可以关门\",{\"1\":{\"144\":2}}],[\"你需要租吗\",{\"1\":{\"157\":1}}],[\"你可以保持沉默\",{\"1\":{\"153\":1}}],[\"你疯了\",{\"1\":{\"144\":1}}],[\"你也可以根据自己的需要改写默认实现\",{\"1\":{\"104\":1}}],[\"动力源\",{\"1\":{\"261\":1}}],[\"动物抽象类\",{\"1\":{\"170\":1}}],[\"动作委托为closestate来执行\",{\"1\":{\"144\":4}}],[\"动态分派动态地置换掉某个方法\",{\"1\":{\"173\":1}}],[\"动态分派\",{\"1\":{\"173\":2}}],[\"动态地给该对象增加一些职责\",{\"1\":{\"86\":1}}],[\"动态代理与静态代理相比较\",{\"1\":{\"77\":1}}],[\"动态代理和静态代理\",{\"1\":{\"77\":1}}],[\"动态代理优化之后\",{\"1\":{\"77\":1}}],[\"动态代理方式\",{\"1\":{\"76\":1}}],[\"动态代理的\",{\"1\":{\"76\":1}}],[\"动态代理的执行流程是什么样\",{\"1\":{\"75\":1}}],[\"动态代理要求必须定义接口\",{\"1\":{\"76\":1}}],[\"动态代理\",{\"0\":{\"75\":1,\"76\":1},\"1\":{\"77\":1}}],[\"动态代理又有\",{\"1\":{\"72\":1}}],[\"维护一个当前状态\",{\"1\":{\"143\":1}}],[\"维度层\",{\"1\":{\"5\":1}}],[\"判断stu对象和stu1对象是否是同一个对象\",{\"1\":{\"234\":1}}],[\"判断注册表中是否包含指定名称的\",{\"1\":{\"203\":1}}],[\"判断注册表中是否已经注册了指定名称的bean\",{\"1\":{\"195\":1}}],[\"判断容器中是否包含指定名称的bean对象\",{\"1\":{\"192\":1}}],[\"判断是否还有元素\",{\"1\":{\"166\":1}}],[\"判断逻辑\",{\"1\":{\"142\":1}}],[\"判断能否处理本次请求\",{\"1\":{\"137\":1}}],[\"门关了\",{\"1\":{\"142\":1}}],[\"门打开\",{\"1\":{\"142\":1}}],[\"门已经开了\",{\"1\":{\"142\":1}}],[\"停止和开门\",{\"1\":{\"144\":1}}],[\"停止\",{\"1\":{\"142\":1}}],[\"停止时电梯也是关着的\",{\"1\":{\"142\":1}}],[\"停止状态是怎么发生的呢\",{\"1\":{\"144\":1}}],[\"停止状态再跑起来\",{\"1\":{\"144\":1}}],[\"停止状态\",{\"1\":{\"142\":2,\"144\":3}}],[\"停顿一下\",{\"1\":{\"131\":1}}],[\"链式调用\",{\"1\":{\"140\":1}}],[\"链接克隆\",{\"1\":{\"35\":1}}],[\"响应\",{\"1\":{\"140\":1}}],[\"职责链\",{\"1\":{\"246\":1}}],[\"职责链建立的合理性要靠客户端来保证\",{\"1\":{\"139\":1}}],[\"职责链模式主要包含以下角色\",{\"1\":{\"137\":1}}],[\"职责链模式\",{\"1\":{\"113\":1}}],[\"责任分担\",{\"1\":{\"139\":1}}],[\"责任链简化了对象之间的连接\",{\"1\":{\"139\":1}}],[\"责任链模式\",{\"0\":{\"135\":1}}],[\"增强了给对象指派职责的灵活性\",{\"1\":{\"139\":1}}],[\"增强了系统的可扩展性\",{\"1\":{\"139\":1}}],[\"增加软件的可扩展性和灵活性\",{\"1\":{\"255\":1}}],[\"增加新的解释表达式较为方便\",{\"1\":{\"186\":1}}],[\"增加新的聚合类和迭代器类都很方便\",{\"1\":{\"164\":1}}],[\"增加订阅者\",{\"1\":{\"150\":1}}],[\"增加或删除命令非常方便\",{\"1\":{\"132\":1}}],[\"增加与管理\",{\"1\":{\"129\":1}}],[\"增加一个新的策略只需要添加一个具体的策略类即可\",{\"1\":{\"125\":1}}],[\"增加了类的个数\",{\"1\":{\"164\":1}}],[\"增加了客户端的复杂性\",{\"1\":{\"139\":1}}],[\"增加了系统的复杂度\",{\"1\":{\"78\":1}}],[\"增加了代码维护的复杂度\",{\"1\":{\"77\":1}}],[\"则需要组装手\",{\"1\":{\"239\":1}}],[\"则返回新\",{\"1\":{\"224\":1}}],[\"则租房者获得信息\",{\"1\":{\"157\":1}}],[\"则可以移到领导实现类中\",{\"1\":{\"138\":1}}],[\"则创建一个新的享元对象\",{\"1\":{\"110\":1}}],[\"各个配件的接口\",{\"1\":{\"258\":1}}],[\"各部件面临着复杂的变化\",{\"1\":{\"236\":1}}],[\"各位领导\",{\"1\":{\"138\":1}}],[\"各级领导处理请假条方法\",{\"1\":{\"138\":1}}],[\"身体不适\",{\"1\":{\"138\":1}}],[\"流程结束\",{\"1\":{\"138\":1}}],[\"流中的包装类使用到了装饰者模式\",{\"1\":{\"88\":1}}],[\"继续提交\",{\"1\":{\"138\":1}}],[\"继承性和多态性以及类的关联关系和组合关系的充分理解\",{\"1\":{\"245\":1}}],[\"继承结构图如下\",{\"1\":{\"195\":1}}],[\"继承是静态的附加责任\",{\"1\":{\"86\":1}}],[\"继承或实现抽象构件\",{\"1\":{\"86\":1}}],[\"继承自\",{\"1\":{\"86\":1}}],[\"领导上面还有领导\",{\"1\":{\"138\":1}}],[\"姓名\",{\"1\":{\"138\":1}}],[\"天\",{\"1\":{\"138\":3}}],[\"天还需要总经理同意才行\",{\"1\":{\"138\":1}}],[\"天的假还需要部门经理同意\",{\"1\":{\"138\":1}}],[\"天到\",{\"1\":{\"138\":2}}],[\"请求的处理可能涉及多个处理对象\",{\"1\":{\"139\":1}}],[\"请求\",{\"1\":{\"138\":1,\"140\":1}}],[\"请求者\",{\"1\":{\"130\":1}}],[\"请假内容\",{\"1\":{\"138\":1}}],[\"请假天数\",{\"1\":{\"138\":1}}],[\"请假条来一张\",{\"1\":{\"138\":1}}],[\"请假条\",{\"1\":{\"138\":1}}],[\"请假\",{\"1\":{\"138\":4}}],[\"请假一天以下的假只需要小组长同意即可\",{\"1\":{\"138\":1}}],[\"直至系统产生溢出错误\",{\"1\":{\"257\":1}}],[\"直到\",{\"1\":{\"243\":1}}],[\"直到有对象处理它为止\",{\"1\":{\"136\":1}}],[\"直接产生出来的就是一个力大无穷\",{\"1\":{\"239\":1}}],[\"直接进行获取即可\",{\"1\":{\"230\":1}}],[\"直接在工厂里更换该对象即可\",{\"1\":{\"226\":1}}],[\"直接抛异常\",{\"1\":{\"224\":1}}],[\"直接给\",{\"1\":{\"113\":1}}],[\"直接使用打包好的镜像\",{\"0\":{\"41\":1}}],[\"直接使用即可\",{\"1\":{\"13\":1}}],[\"击鼓传花\",{\"1\":{\"136\":1}}],[\"员工必须根据自己要请假的天数去找不同的领导签名\",{\"1\":{\"136\":1}}],[\"总结\",{\"0\":{\"213\":1}}],[\"总结如下\",{\"1\":{\"120\":1}}],[\"总经理审批\",{\"1\":{\"138\":1}}],[\"总经理\",{\"1\":{\"138\":1}}],[\"总经理等\",{\"1\":{\"136\":1}}],[\"副总经理\",{\"1\":{\"136\":1}}],[\"担当命令的角色\",{\"1\":{\"134\":1}}],[\"降低了目标与观察者之间的耦合关系\",{\"1\":{\"151\":1}}],[\"降低了对象之间的耦合度\",{\"1\":{\"139\":1}}],[\"降低了子系统与客户端之间的耦合度\",{\"1\":{\"98\":1}}],[\"降低系统的耦合度\",{\"1\":{\"132\":1}}],[\"尖椒肉丝盖饭\",{\"1\":{\"131\":1}}],[\"小李\",{\"1\":{\"153\":1}}],[\"小偷偷东西\",{\"1\":{\"153\":1}}],[\"小偷\",{\"1\":{\"153\":1}}],[\"小偷是一个被观察者\",{\"1\":{\"153\":1}}],[\"小偷是被观察者\",{\"1\":{\"153\":1}}],[\"小花\",{\"1\":{\"138\":1}}],[\"小组长的领导是部门经理\",{\"1\":{\"138\":1}}],[\"小组长审批\",{\"1\":{\"138\":1}}],[\"小组长处理1\",{\"1\":{\"138\":1}}],[\"小组长\",{\"1\":{\"138\":1}}],[\"小杯雪碧\",{\"1\":{\"131\":1}}],[\"小杯可乐\",{\"1\":{\"131\":1}}],[\"小明的爷爷已经\",{\"1\":{\"98\":1}}],[\"新对象的属性和原来对象完全相同\",{\"1\":{\"233\":1}}],[\"新订单来了\",{\"1\":{\"131\":1}}],[\"新增或者更新\",{\"1\":{\"13\":1}}],[\"新增失败\",{\"1\":{\"13\":1}}],[\"新增\",{\"1\":{\"13\":1}}],[\"大学既有软件专业又有生物专业等\",{\"1\":{\"229\":1}}],[\"大约有\",{\"1\":{\"189\":1}}],[\"大战boss时\",{\"1\":{\"178\":1,\"179\":1}}],[\"大战boss后\",{\"1\":{\"178\":1,\"179\":1}}],[\"大战boss前\",{\"1\":{\"178\":2,\"179\":2}}],[\"大致就是在\",{\"1\":{\"166\":1}}],[\"大家都会有这样的体验\",{\"1\":{\"150\":1}}],[\"大厨\",{\"1\":{\"131\":1}}],[\"大数据\",{\"2\":{\"36\":1,\"52\":1,\"64\":1}}],[\"叮咚\",{\"1\":{\"131\":1}}],[\"厨师开始执行\",{\"1\":{\"131\":1}}],[\"喊\",{\"1\":{\"131\":1}}],[\"发起人不需要管理和保存其内部状态的各个备份\",{\"1\":{\"180\":1}}],[\"发起人对象可以看到一个宽接口\",{\"1\":{\"176\":1}}],[\"发起人\",{\"1\":{\"176\":1}}],[\"发生在运行时期\",{\"1\":{\"173\":1}}],[\"发生在编译时期\",{\"1\":{\"173\":1}}],[\"发生变化\",{\"1\":{\"155\":2}}],[\"发出命令\",{\"1\":{\"131\":1}}],[\"发送请求的一方\",{\"1\":{\"54\":1}}],[\"份\",{\"1\":{\"131\":1}}],[\"餐桌号码\",{\"1\":{\"131\":1}}],[\"桌的饭弄好了\",{\"1\":{\"131\":1}}],[\"桌的订单\",{\"1\":{\"131\":1}}],[\"那这个允许呀\",{\"1\":{\"144\":1}}],[\"那是要的\",{\"1\":{\"144\":1}}],[\"那我们就需要分析命令模式的角色在该案例中由谁来充当\",{\"1\":{\"131\":1}}],[\"那么就不应当发生直接的相互调用\",{\"1\":{\"260\":1}}],[\"那么就扩展中介者对象\",{\"1\":{\"158\":1}}],[\"那么我们如何进行修改呢\",{\"1\":{\"259\":1}}],[\"那么建造者模式就是一个汽车组装工厂\",{\"1\":{\"240\":1}}],[\"那么为何要定义这么多层次的接口呢\",{\"1\":{\"192\":1}}],[\"那么同事类之间的关系将变为星型结构\",{\"1\":{\"155\":1}}],[\"那么将会有\",{\"1\":{\"155\":2}}],[\"那么被观察者发送通知会使观察者循环调用\",{\"1\":{\"151\":1}}],[\"那么所有的观察者收到被观察者发送的通知会耗时\",{\"1\":{\"151\":1}}],[\"那么\",{\"1\":{\"127\":1}}],[\"那么计算总价就会显得比较麻烦\",{\"1\":{\"86\":1}}],[\"真皮等材质\",{\"1\":{\"236\":1}}],[\"真正命令执行的对象\",{\"1\":{\"131\":1}}],[\"真正执行命令的对象\",{\"1\":{\"130\":1}}],[\"真实对象中的方法的\",{\"1\":{\"76\":1}}],[\"真实对象所实现的接口\",{\"1\":{\"75\":1}}],[\"真实主题\",{\"1\":{\"73\":1}}],[\"声明\",{\"1\":{\"163\":1,\"211\":1}}],[\"声明执行的方法\",{\"1\":{\"130\":1}}],[\"声明了\",{\"1\":{\"105\":1}}],[\"日常生活中\",{\"1\":{\"129\":1}}],[\"日期和时间\",{\"0\":{\"24\":1}}],[\"让用户程序依赖于抽象\",{\"1\":{\"258\":1}}],[\"让\",{\"1\":{\"257\":1,\"258\":1}}],[\"让子类决定实例化哪个产品类对象\",{\"1\":{\"228\":1}}],[\"让外界可以通过该对象获取注册表对象\",{\"1\":{\"206\":1}}],[\"让警察盯着小偷\",{\"1\":{\"153\":1}}],[\"让多个观察者对象同时监听某一个主题对象\",{\"1\":{\"148\":1}}],[\"让我们继续查看\",{\"1\":{\"127\":1}}],[\"让客户按目标接口的格式访问适配者\",{\"1\":{\"82\":1}}],[\"充当的是调用者\",{\"1\":{\"134\":1}}],[\"充当的是抽象策略角色\",{\"1\":{\"127\":1}}],[\"充分体现面向对象设计思想\",{\"1\":{\"125\":1}}],[\"多数人知晓的\",{\"1\":{\"244\":1}}],[\"多个不同的文件构成\",{\"1\":{\"189\":1}}],[\"多个同事对象的交互\",{\"1\":{\"158\":1}}],[\"多个同事类之间互相关联时\",{\"1\":{\"155\":1}}],[\"多个类只区别在表现行为不同\",{\"1\":{\"126\":1}}],[\"多级目录呈现等树形结构数据的操作\",{\"1\":{\"107\":1}}],[\"基本上可以做到互补依赖\",{\"1\":{\"158\":1}}],[\"基本不需要改变原有的代码\",{\"1\":{\"125\":1}}],[\"基本方法又可以分为三种\",{\"1\":{\"116\":1}}],[\"基本方法\",{\"1\":{\"116\":1}}],[\"策略\",{\"1\":{\"246\":1}}],[\"策略类之间可以自由切换\",{\"1\":{\"125\":1}}],[\"策略模式将造成产生很多策略类\",{\"1\":{\"125\":1}}],[\"策略模式的主要角色如下\",{\"1\":{\"123\":1}}],[\"策略模式属于对象行为模式\",{\"1\":{\"122\":1}}],[\"策略模式\",{\"0\":{\"121\":1},\"1\":{\"113\":1}}],[\"向客户展示促销活动\",{\"1\":{\"124\":1}}],[\"持有接受者对象\",{\"1\":{\"131\":1}}],[\"持有抽象策略角色的引用\",{\"1\":{\"124\":1}}],[\"持有一个策略类的引用\",{\"1\":{\"123\":1}}],[\"满1000元加一元换购任意200元以下商品\",{\"1\":{\"124\":1}}],[\"满200元减50元\",{\"1\":{\"124\":1}}],[\"满足开闭原则\",{\"1\":{\"139\":1}}],[\"满足\",{\"1\":{\"70\":1,\"113\":1,\"164\":1}}],[\"买一送一\",{\"1\":{\"124\":1}}],[\"推出不同的促销活动\",{\"1\":{\"124\":1}}],[\"推荐\",{\"1\":{\"15\":3}}],[\"圣诞节\",{\"1\":{\"124\":1}}],[\"春节\",{\"1\":{\"124\":1}}],[\"促销活动\",{\"1\":{\"124\":1}}],[\"最初并不是出现在软件设计中\",{\"1\":{\"243\":1}}],[\"最基本的\",{\"1\":{\"192\":1}}],[\"最出色的要数函数调用和简单字符串的模板函数\",{\"1\":{\"189\":1}}],[\"最终给客户端调用\",{\"1\":{\"123\":1}}],[\"最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理\",{\"1\":{\"77\":1}}],[\"最大延长时间\",{\"1\":{\"58\":1}}],[\"把相关的行为封装在一起\",{\"1\":{\"171\":1}}],[\"把当前的环境通知到各个实现类中\",{\"1\":{\"144\":1}}],[\"把复杂的\",{\"1\":{\"142\":1}}],[\"把使用算法的责任和算法的实现分割开来\",{\"1\":{\"122\":1}}],[\"把适配者接口转换成目标接口\",{\"1\":{\"82\":1}}],[\"开发的时候\",{\"1\":{\"166\":1}}],[\"开发需要选择一款开发工具\",{\"1\":{\"122\":1}}],[\"开启当然可以关闭了\",{\"1\":{\"144\":1}}],[\"开启状态\",{\"1\":{\"144\":1}}],[\"开启一个线程\",{\"1\":{\"134\":1}}],[\"开门\",{\"1\":{\"142\":1,\"144\":1}}],[\"开门的电梯已经是是停止的了\",{\"1\":{\"142\":1}}],[\"开门状态已经是停止的了\",{\"1\":{\"144\":1}}],[\"开门状态\",{\"1\":{\"142\":1,\"144\":1}}],[\"开闭原则\",{\"0\":{\"256\":1},\"1\":{\"106\":1,\"118\":1,\"125\":1,\"132\":1,\"145\":1,\"164\":1,\"171\":1,\"186\":1,\"256\":1}}],[\"父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节\",{\"1\":{\"120\":1}}],[\"父类中的抽象方法由子类实现\",{\"1\":{\"118\":1}}],[\"行为\",{\"1\":{\"192\":1}}],[\"行为型模式\",{\"1\":{\"246\":1}}],[\"行为型模式分为\",{\"1\":{\"113\":1}}],[\"行为型模式分为类行为模式和对象行为模式\",{\"1\":{\"113\":1}}],[\"行为型模式用于描述程序在运行时复杂的流程控制\",{\"1\":{\"113\":1}}],[\"行\",{\"1\":{\"120\":2}}],[\"无须修改原有代码\",{\"1\":{\"164\":1}}],[\"无须对现有类库进行任何修改\",{\"1\":{\"106\":1}}],[\"无参的\",{\"1\":{\"120\":1}}],[\"调用具体建造者来创建复杂对象的各个部分\",{\"1\":{\"235\":1}}],[\"调用userservice对象的add方法\",{\"1\":{\"188\":1}}],[\"调用集合中的所有观察者对象的\",{\"1\":{\"153\":1}}],[\"调用系统方法\",{\"1\":{\"134\":1}}],[\"调用者通过它访问具体工厂的工厂方法来创建产品\",{\"1\":{\"228\":1}}],[\"调用者通过该方法来获取产品\",{\"1\":{\"227\":1}}],[\"调用者\",{\"1\":{\"130\":1,\"134\":1}}],[\"调用\",{\"1\":{\"129\":1,\"212\":1}}],[\"调用了无参的read方法\",{\"1\":{\"120\":1}}],[\"调整时间\",{\"1\":{\"24\":1}}],[\"要创建的复杂对象\",{\"1\":{\"235\":1}}],[\"要是按照工厂方法模式\",{\"1\":{\"229\":1}}],[\"要增加产品类时也要相应地增加工厂类\",{\"1\":{\"228\":1}}],[\"要知道工厂是如何产生对象的\",{\"1\":{\"192\":1}}],[\"要实现上述案例\",{\"1\":{\"177\":1}}],[\"要实现该案例\",{\"1\":{\"104\":1}}],[\"要给宠物喂食的话\",{\"1\":{\"170\":1}}],[\"要求命令对象执行请求\",{\"1\":{\"130\":1}}],[\"要求子类必须实现\",{\"1\":{\"120\":1}}],[\"要求子类必须重写\",{\"1\":{\"120\":1}}],[\"供访问者访问\",{\"1\":{\"169\":1}}],[\"供子类实现\",{\"1\":{\"119\":1}}],[\"供扩展抽象化角色调用\",{\"1\":{\"92\":1}}],[\"算法的整体步骤很固定\",{\"1\":{\"119\":1}}],[\"关门\",{\"1\":{\"142\":1}}],[\"关门时才可以停止\",{\"1\":{\"142\":1}}],[\"关门之后电梯就是关闭状态了\",{\"1\":{\"142\":1}}],[\"关门状态\",{\"1\":{\"142\":3}}],[\"关键词\",{\"1\":{\"117\":1}}],[\"关闭状态\",{\"1\":{\"144\":2}}],[\"关闭家电\",{\"1\":{\"98\":1}}],[\"关闭\",{\"1\":{\"98\":1}}],[\"关闭了空调\",{\"1\":{\"98\":1}}],[\"关闭了电视\",{\"1\":{\"98\":1}}],[\"关闭了灯\",{\"1\":{\"98\":1}}],[\"关闭空调\",{\"1\":{\"98\":1}}],[\"关闭电视\",{\"1\":{\"98\":1}}],[\"关闭并禁用swap\",{\"1\":{\"32\":1}}],[\"关闭并禁用selinux\",{\"1\":{\"32\":1}}],[\"关闭并禁用防火墙\",{\"1\":{\"32\":1}}],[\"关闭并禁用networkmanager\",{\"1\":{\"32\":1}}],[\"翻炒是一样的\",{\"1\":{\"117\":1}}],[\"翻炒\",{\"1\":{\"117\":1}}],[\"翻炒等步骤\",{\"1\":{\"117\":1}}],[\"倒调味料是不一样\",{\"1\":{\"117\":1}}],[\"倒调味料\",{\"1\":{\"117\":1}}],[\"倒调料品\",{\"1\":{\"117\":1}}],[\"倒油\",{\"1\":{\"117\":2}}],[\"倒蔬菜是不一样的\",{\"1\":{\"117\":1}}],[\"倒蔬菜\",{\"1\":{\"117\":2}}],[\"热油是一样的\",{\"1\":{\"117\":1}}],[\"热油\",{\"1\":{\"117\":3}}],[\"钩子方法\",{\"1\":{\"116\":1}}],[\"由多个部件构成\",{\"1\":{\"236\":1}}],[\"由具体工厂来创建\",{\"1\":{\"228\":1,\"229\":1}}],[\"由\",{\"1\":{\"189\":1,\"235\":2}}],[\"由数值和+\",{\"1\":{\"183\":1}}],[\"由中介者对象负责后续的交互\",{\"1\":{\"156\":1}}],[\"由她来发起命令\",{\"1\":{\"131\":1}}],[\"由促销员将促销活动展示给客户\",{\"1\":{\"124\":1}}],[\"由子类实现\",{\"1\":{\"120\":1}}],[\"由其具体子类实现\",{\"1\":{\"116\":1}}],[\"由于实现了构建和装配的解耦\",{\"1\":{\"235\":1}}],[\"由于使用了多态性\",{\"1\":{\"228\":1}}],[\"由于在解释器模式中使用了大量的循环和递归调用\",{\"1\":{\"186\":1}}],[\"由于在解释器模式中使用类来表示语言的文法规则\",{\"1\":{\"186\":1}}],[\"由于这个接口仅仅是一个标识接口\",{\"1\":{\"179\":1}}],[\"由于覆盖是动态的\",{\"1\":{\"173\":1}}],[\"由于引入了抽象层\",{\"1\":{\"164\":1}}],[\"由于引入了迭代器\",{\"1\":{\"164\":1}}],[\"由于一个请求没有明确的接收者\",{\"1\":{\"139\":1}}],[\"由于策略类都实现同一个接口\",{\"1\":{\"125\":1}}],[\"由于某些原因需要给某对象提供一个代理以控制对该对象的访问\",{\"1\":{\"72\":1}}],[\"由于组合关系或聚合关系比继承关系耦合度低\",{\"1\":{\"70\":1,\"113\":1}}],[\"按\",{\"1\":{\"261\":1}}],[\"按某种顺序调用其包含的基本方法\",{\"1\":{\"116\":1}}],[\"按照id删除\",{\"1\":{\"13\":1}}],[\"按照id查询\",{\"1\":{\"13\":1}}],[\"负责\",{\"1\":{\"235\":1}}],[\"负责人角色类\",{\"1\":{\"179\":1}}],[\"负责存储发起人的内部状态\",{\"1\":{\"176\":1}}],[\"负责给出一个算法的轮廓和骨架\",{\"1\":{\"116\":1}}],[\"负责创建和管理享元角色\",{\"1\":{\"110\":1}}],[\"取款或者转账等\",{\"1\":{\"115\":1}}],[\"取号\",{\"1\":{\"115\":1}}],[\"办理具体业务\",{\"1\":{\"115\":1}}],[\"排队和对银行工作人员进行评分的业务对每个客户是一样的\",{\"1\":{\"115\":1}}],[\"排队\",{\"1\":{\"115\":1}}],[\"排队等一系列的操作\",{\"1\":{\"74\":1}}],[\"个属性\",{\"1\":{\"251\":1}}],[\"个设计模式\",{\"1\":{\"243\":1}}],[\"个模块组成\",{\"1\":{\"189\":1}}],[\"个模块\",{\"1\":{\"189\":1}}],[\"个对象受到影响\",{\"1\":{\"155\":2}}],[\"个方法\",{\"1\":{\"153\":1}}],[\"个字节数据\",{\"1\":{\"120\":1}}],[\"个流程\",{\"1\":{\"115\":1}}],[\"个副本\",{\"1\":{\"43\":1}}],[\"去银行办理业务一般要经过以下\",{\"1\":{\"115\":1}}],[\"程序运行出错的概率会非常大\",{\"1\":{\"257\":1}}],[\"程序运行过程中动态生成的代理类\",{\"1\":{\"75\":1}}],[\"程序员要尽量根据\",{\"1\":{\"255\":1}}],[\"程序员常常会遇到这种情况\",{\"1\":{\"115\":1}}],[\"解耦\",{\"1\":{\"226\":1}}],[\"解析bean标签\",{\"1\":{\"207\":1}}],[\"解析的\",{\"1\":{\"195\":1}}],[\"解析\",{\"0\":{\"192\":1,\"193\":1,\"194\":1,\"195\":1}}],[\"解释器等\",{\"1\":{\"246\":1}}],[\"解释器就是要解析出来语句的含义\",{\"1\":{\"183\":1}}],[\"解释器模式包含以下主要角色\",{\"1\":{\"184\":1}}],[\"解释器模式\",{\"0\":{\"182\":1},\"1\":{\"113\":1}}],[\"解压\",{\"1\":{\"33\":1}}],[\"访问类\",{\"1\":{\"222\":1,\"232\":1}}],[\"访问者\",{\"1\":{\"246\":1}}],[\"访问者角色\",{\"1\":{\"170\":1}}],[\"访问者模式用到了一种双分派的技术\",{\"1\":{\"173\":1}}],[\"访问者模式依赖了具体类\",{\"1\":{\"171\":1}}],[\"访问者模式要求元素类的个数不能改变\",{\"1\":{\"169\":1}}],[\"访问者模式包含以下主要角色\",{\"1\":{\"169\":1}}],[\"访问者模式\",{\"0\":{\"167\":1},\"1\":{\"113\":1}}],[\"访问的行为\",{\"1\":{\"169\":1}}],[\"访问对象不适合或者不能直接引用目标对象\",{\"1\":{\"72\":1}}],[\"状态图\",{\"1\":{\"247\":1}}],[\"状态\",{\"1\":{\"246\":1}}],[\"状态修改\",{\"1\":{\"144\":4}}],[\"状态模式对\",{\"1\":{\"145\":1}}],[\"状态模式的结构与实现都较为复杂\",{\"1\":{\"145\":1}}],[\"状态模式的使用必然会增加系统类和对象的个数\",{\"1\":{\"145\":1}}],[\"状态模式包含以下主要角色\",{\"1\":{\"143\":1}}],[\"状态模式\",{\"0\":{\"141\":1},\"1\":{\"113\":1}}],[\"状态码\",{\"1\":{\"10\":1}}],[\"命令\",{\"1\":{\"246\":1}}],[\"命令接口\",{\"1\":{\"134\":1}}],[\"命令中包含订单\",{\"1\":{\"131\":1}}],[\"命令模式可以与后面介绍的备忘录模式结合\",{\"1\":{\"132\":1}}],[\"命令模式可以与组合模式结合\",{\"1\":{\"132\":1}}],[\"命令模式能将调用操作的对象与实现该操作的对象解耦\",{\"1\":{\"132\":1}}],[\"命令模式包含以下主要角色\",{\"1\":{\"130\":1}}],[\"命令模式\",{\"0\":{\"128\":1},\"1\":{\"113\":1,\"134\":1}}],[\"命令可以分段执行\",{\"1\":{\"32\":1}}],[\"否则会抛\",{\"1\":{\"234\":1}}],[\"否则将该请求转给它的后继者\",{\"1\":{\"137\":1}}],[\"否则创建一个新的\",{\"1\":{\"113\":1}}],[\"否则都建议配上具体的dbtype\",{\"1\":{\"15\":1}}],[\"时序图\",{\"1\":{\"247\":1}}],[\"时\",{\"1\":{\"153\":1}}],[\"时如果参数在\",{\"1\":{\"113\":1}}],[\"时区\",{\"1\":{\"47\":1}}],[\"之所以在这里设置上级领导\",{\"1\":{\"138\":1}}],[\"之间的关系及\",{\"1\":{\"192\":1}}],[\"之间则计算下标并从缓存中返回\",{\"1\":{\"113\":1}}],[\"之间数的\",{\"1\":{\"113\":1}}],[\"之前比使用\",{\"1\":{\"77\":1}}],[\"~\",{\"1\":{\"113\":2}}],[\"结果如下\",{\"1\":{\"113\":1}}],[\"结构对象角色\",{\"1\":{\"170\":1}}],[\"结构\",{\"0\":{\"73\":1,\"82\":1,\"92\":1,\"97\":1,\"103\":1,\"110\":1,\"116\":1,\"123\":1,\"130\":1,\"137\":1,\"143\":1,\"149\":1,\"156\":1,\"162\":1,\"169\":1,\"176\":1,\"184\":1},\"1\":{\"86\":1}}],[\"结构型模式\",{\"1\":{\"246\":1}}],[\"结构型模式分为以下\",{\"1\":{\"70\":1}}],[\"结构型模式描述如何将类或对象按某种布局组成更大的结构\",{\"1\":{\"70\":1}}],[\"应用开发中\",{\"1\":{\"140\":1}}],[\"应用场景\",{\"0\":{\"85\":1}}],[\"应该持有抽象策略的引用来调用\",{\"1\":{\"127\":1}}],[\"应当在需要多次重复使用享元对象时才值得使用享元模式\",{\"1\":{\"112\":1}}],[\"造成内存的大量耗费\",{\"1\":{\"112\":1}}],[\"极大减少内存中相似或相同对象数量\",{\"1\":{\"112\":1}}],[\"颜色\",{\"1\":{\"111\":1,\"261\":1}}],[\"俄罗斯方块有不同的形状\",{\"1\":{\"111\":1}}],[\"俄罗斯方块\",{\"1\":{\"111\":1}}],[\"称为享元对象\",{\"1\":{\"110\":1}}],[\"指挥者类\",{\"1\":{\"235\":1,\"236\":1}}],[\"指随环境改变而改变的不可以共享的部分\",{\"1\":{\"110\":1}}],[\"指在不改变现有对象结构的情况下\",{\"1\":{\"86\":1}}],[\"内裤外穿的超人\",{\"1\":{\"239\":1}}],[\"内部类是具体的商品类\",{\"1\":{\"231\":1}}],[\"内部操作过程中对象的传递和转化\",{\"1\":{\"192\":1}}],[\"内部状态\",{\"1\":{\"110\":2}}],[\"内存条只能是金士顿的\",{\"1\":{\"258\":1}}],[\"内存条可以选择金士顿\",{\"1\":{\"258\":1}}],[\"内存条\",{\"1\":{\"258\":1}}],[\"内存\",{\"1\":{\"22\":1}}],[\"享元工厂检査系统中是否存在符合要求的享元对象\",{\"1\":{\"110\":1}}],[\"享元工厂\",{\"1\":{\"110\":1}}],[\"享元\",{\"1\":{\"110\":1,\"246\":1}}],[\"享元模式中的外部状态相对独立\",{\"1\":{\"112\":1}}],[\"享元模式的主要有以下角色\",{\"1\":{\"110\":1}}],[\"享元模式的实现要领就是区分应用中的这两种状态\",{\"1\":{\"110\":1}}],[\"享元模式\",{\"0\":{\"108\":1},\"1\":{\"70\":1}}],[\"避免使用多重条件选择语句\",{\"1\":{\"125\":1}}],[\"避免大量相似对象的开销\",{\"1\":{\"109\":1}}],[\"避免在两个层次之间建立静态的继承联系\",{\"1\":{\"94\":1}}],[\"运算\",{\"1\":{\"183\":1}}],[\"运用共享技术来有效地支持大量细粒度对象的复用\",{\"1\":{\"109\":1}}],[\"运行结果为\",{\"1\":{\"234\":2}}],[\"运行结果如下\",{\"1\":{\"173\":1}}],[\"运行结果\",{\"1\":{\"173\":1}}],[\"运行执行的是子类中的方法\",{\"1\":{\"173\":1}}],[\"运行的时候开电梯门\",{\"1\":{\"144\":1}}],[\"运行\",{\"1\":{\"142\":1,\"144\":1}}],[\"运行时当然可以停止了\",{\"1\":{\"142\":1}}],[\"运行时电梯不能开门\",{\"1\":{\"142\":1}}],[\"运行时电梯门是关着的\",{\"1\":{\"142\":1}}],[\"运行时动态生成\",{\"1\":{\"72\":1}}],[\"运行状态\",{\"1\":{\"142\":2,\"144\":2}}],[\"运行上面代码\",{\"1\":{\"113\":1}}],[\"运行截图\",{\"0\":{\"51\":1}}],[\"运行发现报错了\",{\"1\":{\"6\":1}}],[\"简言之\",{\"1\":{\"256\":1}}],[\"简化了发起人类\",{\"1\":{\"180\":1}}],[\"简化了客户端代码\",{\"1\":{\"106\":1}}],[\"简单的说就是要求对抽象进行编程\",{\"1\":{\"258\":1}}],[\"简单工厂+配置文件解除耦合\",{\"1\":{\"230\":1}}],[\"简单工厂包含如下角色\",{\"1\":{\"227\":1}}],[\"简单工厂不是一种设计模式\",{\"1\":{\"227\":1}}],[\"简单工厂模式类图\",{\"1\":{\"227\":1}}],[\"简单工厂模式\",{\"0\":{\"227\":1}}],[\"简单介绍一下镜像的基本信息\",{\"1\":{\"38\":1}}],[\"简单密码点击两次完成即可\",{\"1\":{\"28\":1}}],[\"方式来实现单例模式的\",{\"1\":{\"225\":1}}],[\"方便实现\",{\"1\":{\"132\":1}}],[\"方便对整个层次结构进行控制\",{\"1\":{\"106\":1}}],[\"方块形状\",{\"1\":{\"111\":1}}],[\"方法后\",{\"1\":{\"257\":1}}],[\"方法的完整表示方式是\",{\"1\":{\"251\":1}}],[\"方法的可见性\",{\"1\":{\"251\":1}}],[\"方法的其他所有方法\",{\"1\":{\"104\":1}}],[\"方法名称前加的加号和减号表示了这个属性\",{\"1\":{\"251\":1}}],[\"方法来实现浅克隆\",{\"1\":{\"233\":1}}],[\"方法来复制新的对象\",{\"1\":{\"232\":1}}],[\"方法创建具体的商品类的对象\",{\"1\":{\"231\":1}}],[\"方法使用的是工厂模式\",{\"1\":{\"231\":2}}],[\"方法使用到了模板方法模式\",{\"1\":{\"211\":1}}],[\"方法使其返回一个\",{\"1\":{\"166\":1}}],[\"方法启动整个\",{\"1\":{\"196\":1}}],[\"方法是一个模板方法\",{\"1\":{\"196\":1}}],[\"方法是抽象方法\",{\"1\":{\"120\":1}}],[\"方法开始的\",{\"1\":{\"196\":1}}],[\"方法模拟\",{\"1\":{\"188\":1}}],[\"方法重载就是静态分派\",{\"1\":{\"173\":1}}],[\"方法中调用\",{\"1\":{\"211\":1}}],[\"方法中返回了一个实例化的\",{\"1\":{\"166\":1}}],[\"方法中又调用了\",{\"1\":{\"75\":1}}],[\"方法返回的肯定是iterator接口的子实现类对象\",{\"1\":{\"166\":1}}],[\"方法就是其执行方法\",{\"1\":{\"134\":1}}],[\"方法只传具体\",{\"1\":{\"127\":1}}],[\"方法吗\",{\"1\":{\"127\":1}}],[\"方法到底有没有使用\",{\"1\":{\"127\":1}}],[\"方法时\",{\"1\":{\"127\":1}}],[\"方法可以传一个新策略让\",{\"1\":{\"127\":1}}],[\"方法调用了子类的\",{\"1\":{\"214\":1}}],[\"方法调用了\",{\"1\":{\"120\":1}}],[\"方法通过反射执行了真实对象所属类\",{\"1\":{\"75\":1}}],[\"方法参数说明\",{\"1\":{\"75\":1,\"76\":1}}],[\"方法\",{\"0\":{\"231\":1},\"1\":{\"75\":5,\"100\":1,\"104\":1,\"105\":1,\"120\":3,\"127\":3,\"134\":1,\"153\":5,\"163\":1,\"188\":1,\"210\":1,\"212\":2,\"214\":1,\"224\":1,\"232\":2,\"251\":4,\"257\":1}}],[\"方法进行了增强\",{\"1\":{\"74\":1}}],[\"叶子对象不可能有下一个层次的对象\",{\"1\":{\"105\":1}}],[\"叶子节点对象\",{\"1\":{\"103\":1}}],[\"叶子节点\",{\"1\":{\"103\":1}}],[\"透明组合模式的缺点是不够安全\",{\"1\":{\"105\":1}}],[\"透明组合模式也是组合模式的标准形式\",{\"1\":{\"105\":1}}],[\"透明组合模式中\",{\"1\":{\"105\":1}}],[\"透明组合模式\",{\"1\":{\"105\":1}}],[\"透明的方式给单个对象添加职责\",{\"1\":{\"87\":1}}],[\"移除菜单和获取子菜单的功能并不能实现\",{\"1\":{\"104\":1}}],[\"移除菜单和获取子菜单的功能\",{\"1\":{\"104\":1}}],[\"移除菜单\",{\"1\":{\"104\":1}}],[\"菜单组件\",{\"1\":{\"104\":1}}],[\"菜单项是指不再包含其他内容的菜单条目\",{\"1\":{\"104\":1}}],[\"打印出其包含的所有菜单以及菜单项的名称\",{\"1\":{\"104\":1}}],[\"打开家电\",{\"1\":{\"98\":1}}],[\"打开\",{\"1\":{\"98\":1}}],[\"打开了空调\",{\"1\":{\"98\":1}}],[\"打开了电视\",{\"1\":{\"98\":1}}],[\"打开了灯\",{\"1\":{\"98\":1}}],[\"打开空调\",{\"1\":{\"98\":1}}],[\"打开电视\",{\"1\":{\"98\":1}}],[\"经过分类编目的\",{\"1\":{\"244\":1}}],[\"经过重新编译\",{\"1\":{\"39\":1}}],[\"经常可以看到类似的菜单\",{\"1\":{\"104\":1}}],[\"容器相关类\",{\"0\":{\"208\":1}}],[\"容器对\",{\"1\":{\"196\":1}}],[\"容器对象\",{\"1\":{\"192\":2}}],[\"容器对象获取到的\",{\"1\":{\"188\":1}}],[\"容器管理我们定义的各种\",{\"1\":{\"193\":1}}],[\"容器实现\",{\"1\":{\"192\":2}}],[\"容器接口是\",{\"1\":{\"192\":1}}],[\"容器的统一规范即获取\",{\"1\":{\"209\":1}}],[\"容器的启动流程\",{\"1\":{\"196\":1}}],[\"容器的基本行为做了定义\",{\"1\":{\"192\":1}}],[\"容器的基本功能规范\",{\"1\":{\"192\":1}}],[\"容器的实现供用户选择\",{\"1\":{\"192\":1}}],[\"容器\",{\"1\":{\"192\":2}}],[\"容器进行管理\",{\"1\":{\"190\":1}}],[\"容器通过配置文件或者注解的方式来管理\",{\"1\":{\"190\":1}}],[\"容器及\",{\"1\":{\"189\":1}}],[\"容器里面包含很多的成员对象\",{\"1\":{\"102\":1}}],[\"容器时\",{\"1\":{\"100\":1}}],[\"又称设计模式\",{\"1\":{\"244\":1}}],[\"又是由表达式结合运算符构成\",{\"1\":{\"183\":1}}],[\"又叫快照模式\",{\"1\":{\"175\":1}}],[\"又叫调停模式\",{\"1\":{\"155\":1}}],[\"又分为两种\",{\"1\":{\"173\":1}}],[\"又不想生成新的子类时\",{\"1\":{\"159\":1}}],[\"又被称为发布\",{\"1\":{\"148\":1}}],[\"又名职责链模式\",{\"1\":{\"136\":1}}],[\"又名部分整体模式\",{\"1\":{\"102\":1}}],[\"又名门面模式\",{\"1\":{\"96\":1}}],[\"又能防止其中方法被不合理的访问\",{\"1\":{\"100\":1}}],[\"既用了\",{\"1\":{\"100\":1}}],[\"传智播客只培养计算机软件专业的学生等\",{\"1\":{\"229\":1}}],[\"传智黑马的专栏更新了\",{\"1\":{\"150\":1}}],[\"传递\",{\"1\":{\"129\":1}}],[\"传递的环境变量会覆盖默认值\",{\"1\":{\"40\":1}}],[\"传给\",{\"1\":{\"100\":1}}],[\"然后再把内裤外穿\",{\"1\":{\"239\":1}}],[\"然后在修改奖状上的名字即可\",{\"1\":{\"233\":1}}],[\"然后调用解释器的解释方法\",{\"1\":{\"184\":1}}],[\"然后\",{\"1\":{\"100\":1}}],[\"到底是哪个类的对象呢\",{\"1\":{\"100\":1}}],[\"处理创建对象的细节\",{\"1\":{\"227\":1}}],[\"处理者抽象类\",{\"1\":{\"138\":1}}],[\"处理其中可能的异常\",{\"1\":{\"79\":1}}],[\"处对象\",{\"1\":{\"100\":1}}],[\"①\",{\"1\":{\"100\":1}}],[\"会导致系统崩溃\",{\"1\":{\"151\":1}}],[\"会通知所有的观察者对象\",{\"1\":{\"148\":1}}],[\"会调用一个\",{\"1\":{\"134\":1}}],[\"会将请求信息封装成\",{\"1\":{\"100\":1}}],[\"会根据规则填充字段\",{\"1\":{\"15\":1}}],[\"作为最顶层的一个接口\",{\"1\":{\"192\":1}}],[\"作为一个程序猿\",{\"1\":{\"122\":1}}],[\"作为客户而已\",{\"1\":{\"102\":1}}],[\"作为\",{\"1\":{\"100\":1,\"211\":2}}],[\"作为访问对象和目标对象的中介\",{\"1\":{\"74\":1}}],[\"睡觉了\",{\"1\":{\"98\":1}}],[\"睡觉一键关电器\",{\"1\":{\"98\":1}}],[\"睡觉时关闭灯\",{\"1\":{\"98\":1}}],[\"起床了\",{\"1\":{\"98\":1}}],[\"起床后一键开电器\",{\"1\":{\"98\":1}}],[\"起始版本\",{\"1\":{\"15\":3}}],[\"智能音箱\",{\"1\":{\"98\":1}}],[\"智能家电控制\",{\"1\":{\"98\":1}}],[\"电动汽车等\",{\"1\":{\"261\":1}}],[\"电视机厂只生产电视机\",{\"1\":{\"229\":1}}],[\"电视类\",{\"1\":{\"98\":1}}],[\"电梯正在运行\",{\"1\":{\"144\":1}}],[\"电梯不会给你开的\",{\"1\":{\"144\":1}}],[\"电梯不能开着门就走\",{\"1\":{\"142\":1}}],[\"电梯运行动作\",{\"1\":{\"144\":1}}],[\"电梯关门动作\",{\"1\":{\"144\":1}}],[\"电梯关门了\",{\"1\":{\"142\":1}}],[\"电梯开门动作\",{\"1\":{\"144\":1}}],[\"电梯开始运行了\",{\"1\":{\"142\":2}}],[\"电梯是停止的\",{\"1\":{\"142\":1}}],[\"电梯停止动作\",{\"1\":{\"144\":1}}],[\"电梯停止了\",{\"1\":{\"142\":2,\"144\":1}}],[\"电梯停了\",{\"1\":{\"142\":1}}],[\"电梯门关着\",{\"1\":{\"144\":1}}],[\"电梯门关了就跑\",{\"1\":{\"144\":1}}],[\"电梯门关了再打开\",{\"1\":{\"144\":1}}],[\"电梯门关闭\",{\"1\":{\"144\":3}}],[\"电梯门不能开着就跑\",{\"1\":{\"144\":1}}],[\"电梯门开启\",{\"1\":{\"144\":1}}],[\"电梯门开了\",{\"1\":{\"142\":1}}],[\"电梯门打开了\",{\"1\":{\"142\":1}}],[\"电梯的动作\",{\"1\":{\"142\":1}}],[\"电梯的4个状态\",{\"1\":{\"142\":1}}],[\"电话和地址等信息\",{\"1\":{\"136\":1}}],[\"电脑类\",{\"1\":{\"83\":1}}],[\"灯类\",{\"1\":{\"98\":1}}],[\"岁了\",{\"1\":{\"98\":1}}],[\"客户程序就不需要变化\",{\"1\":{\"258\":1}}],[\"客户类\",{\"1\":{\"137\":1}}],[\"客户可以通过外观角色访问它\",{\"1\":{\"97\":1}}],[\"客户端不应该被迫依赖于它不使用的方法\",{\"1\":{\"259\":1}}],[\"客户端如果需要对象\",{\"1\":{\"230\":1}}],[\"客户端测试类\",{\"1\":{\"179\":1}}],[\"客户端将\",{\"1\":{\"173\":1}}],[\"客户端代码\",{\"1\":{\"153\":1}}],[\"客户端程序\",{\"1\":{\"150\":1}}],[\"客户端必须知道所有的策略类\",{\"1\":{\"125\":1}}],[\"客户端可以一致地使用一个组合结构或其中单个对象\",{\"1\":{\"106\":1}}],[\"客户端直接与外观对象进行交互\",{\"1\":{\"98\":1}}],[\"客户端\",{\"1\":{\"54\":1,\"55\":1,\"184\":1}}],[\"子标签\",{\"1\":{\"200\":1}}],[\"子容器的扩展支持\",{\"1\":{\"189\":1}}],[\"子实现类对象也交由\",{\"1\":{\"188\":1}}],[\"子实现类中的\",{\"1\":{\"127\":1}}],[\"子实现类进行了增强\",{\"1\":{\"88\":1}}],[\"子类继承父类时\",{\"1\":{\"257\":1}}],[\"子类可以扩展父类的功能\",{\"1\":{\"257\":1}}],[\"子类一定可以出现\",{\"1\":{\"257\":1}}],[\"子类执行的结果会影响父类的结果\",{\"1\":{\"118\":1}}],[\"子类对象\",{\"1\":{\"111\":1}}],[\"子系统\",{\"1\":{\"97\":1}}],[\"迪米特法则中的\",{\"1\":{\"260\":1}}],[\"迪米特法则又叫最少知道原则\",{\"1\":{\"260\":1}}],[\"迪米特法则\",{\"0\":{\"260\":1},\"1\":{\"96\":1,\"260\":1}}],[\"债券\",{\"1\":{\"96\":1}}],[\"投资于股票\",{\"1\":{\"96\":1}}],[\"交由专业的经理人进行管理\",{\"1\":{\"96\":1}}],[\"支付宝里就有许多的基金\",{\"1\":{\"96\":1}}],[\"支持的检验方式\",{\"1\":{\"57\":1}}],[\"刚开始炒股肯定都会想\",{\"1\":{\"96\":1}}],[\"且带有分割线的矩形来表示\",{\"1\":{\"251\":1}}],[\"且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构\",{\"1\":{\"229\":1}}],[\"且可以用一种简单的语言来进行表达时\",{\"1\":{\"187\":1}}],[\"且可以独立地改变它们之间的交互\",{\"1\":{\"155\":1}}],[\"且执行效率不是关键问题时\",{\"1\":{\"187\":1}}],[\"且要求对客户隐藏具体算法的实现细节时\",{\"1\":{\"126\":1}}],[\"且要求程序员了解现有组件库中的相关组件的内部结构\",{\"1\":{\"81\":1}}],[\"且算法的变化不会影响使用算法的客户\",{\"1\":{\"122\":1}}],[\"且不影响内部状态\",{\"1\":{\"112\":1}}],[\"且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义\",{\"1\":{\"105\":1}}],[\"且这两个维度都需要进行扩展时\",{\"1\":{\"94\":1}}],[\"视频文件\",{\"1\":{\"93\":1}}],[\"视频播放器\",{\"1\":{\"93\":1}}],[\"适应性广\",{\"1\":{\"256\":1}}],[\"适用场景\",{\"0\":{\"119\":1}}],[\"适合使用桥接模式\",{\"1\":{\"93\":1}}],[\"适配器\",{\"1\":{\"82\":1,\"246\":1}}],[\"适配器模式分为类适配器模式和对象适配器模式\",{\"1\":{\"81\":1}}],[\"适配器模式\",{\"0\":{\"80\":1},\"1\":{\"70\":1,\"82\":1}}],[\"适配者\",{\"1\":{\"82\":1}}],[\"该安全门具有防火\",{\"1\":{\"259\":1}}],[\"该对象\",{\"1\":{\"226\":1}}],[\"该方法主要完成以下两个功能\",{\"1\":{\"210\":1}}],[\"该方法是每次读取一个字节数据\",{\"1\":{\"120\":1}}],[\"该接口的所以的子实现类对\",{\"1\":{\"210\":1}}],[\"该接口主要来规范容器中的\",{\"1\":{\"192\":1}}],[\"该类负责创建自己的对象\",{\"1\":{\"222\":1}}],[\"该类主要是加载类路径下的配置文件\",{\"1\":{\"212\":1}}],[\"该类\",{\"1\":{\"211\":1}}],[\"该类实现\",{\"1\":{\"207\":1}}],[\"该类实现了\",{\"1\":{\"204\":1}}],[\"该类同时实现当前系统的业务接口\",{\"1\":{\"84\":1}}],[\"该模块还提供了许多企业级支持\",{\"1\":{\"189\":1}}],[\"该模式降低了请求发送者和接收者的耦合度\",{\"1\":{\"139\":1}}],[\"该模式定义了一系列算法\",{\"1\":{\"122\":1}}],[\"该模式对外有一个统一接口\",{\"1\":{\"96\":1}}],[\"该内部类设置为私有的\",{\"1\":{\"179\":1}}],[\"该角色将有关状态存入具体观察者对象\",{\"1\":{\"149\":1}}],[\"该请求可能一直传到链的末端都得不到处理\",{\"1\":{\"139\":1}}],[\"该领导处理的请假天数区间\",{\"1\":{\"138\":1}}],[\"该工厂类对象只需要一个\",{\"1\":{\"111\":1}}],[\"该播放器包含了两个维度\",{\"1\":{\"93\":1}}],[\"常常会出现这样的事例\",{\"1\":{\"136\":1}}],[\"常见的视频格式包括\",{\"1\":{\"93\":1}}],[\"常用命令\",{\"0\":{\"63\":1}}],[\"常用作\",{\"1\":{\"15\":1}}],[\"上图\",{\"1\":{\"251\":1}}],[\"上图我们可以看做是一个文件系统\",{\"1\":{\"102\":1}}],[\"上一个返回元素的索引\",{\"1\":{\"166\":1}}],[\"上不封顶\",{\"1\":{\"138\":1}}],[\"上面示例是\",{\"1\":{\"236\":1}}],[\"上面三点体现了\",{\"1\":{\"188\":1}}],[\"上面结果可以看到调用了\",{\"1\":{\"188\":1}}],[\"上面规则描述为\",{\"1\":{\"183\":1}}],[\"上面的设计我们发现了它存在的问题\",{\"1\":{\"259\":1}}],[\"上面的形式比较单一\",{\"1\":{\"183\":1}}],[\"上面的代码中最终会跑到\",{\"1\":{\"127\":1}}],[\"上面代码的结果大家应该直接可以说出来\",{\"1\":{\"173\":1}}],[\"上面代码可以看到已经组装了一台电脑\",{\"1\":{\"258\":1}}],[\"上面代码可以看到\",{\"1\":{\"113\":1}}],[\"上转为\",{\"1\":{\"100\":1}}],[\"上播放多种格式的视频文件\",{\"1\":{\"93\":1}}],[\"上传安装包\",{\"1\":{\"33\":1}}],[\"等等\",{\"1\":{\"183\":1}}],[\"等软件在编辑时按\",{\"1\":{\"175\":1,\"181\":1}}],[\"等方法\",{\"1\":{\"162\":1}}],[\"等方法是没有意义的\",{\"1\":{\"105\":1}}],[\"等\",{\"1\":{\"93\":2,\"243\":1,\"258\":1}}],[\"桥接\",{\"1\":{\"92\":1,\"246\":1}}],[\"桥接模式提高了系统的可扩充性\",{\"1\":{\"93\":1}}],[\"桥接模式\",{\"0\":{\"90\":1},\"1\":{\"22\":1,\"70\":1}}],[\"每增加一个新的元素类\",{\"1\":{\"171\":1}}],[\"每一条规则至少需要定义一个类\",{\"1\":{\"186\":1}}],[\"每一条文法规则都可以表示为一个类\",{\"1\":{\"186\":1}}],[\"每一个元素都要可以被访问者访问\",{\"1\":{\"169\":1}}],[\"每一种状态改变\",{\"1\":{\"142\":1}}],[\"每个接口都有它的使用场合\",{\"1\":{\"192\":1}}],[\"每个主题都可以有任意数量的观察者\",{\"1\":{\"149\":1}}],[\"每个类只需要处理自己该处理的工作\",{\"1\":{\"139\":1}}],[\"每个节日具体的促销活动\",{\"1\":{\"124\":1}}],[\"每个不同的方块都是一个实例对象\",{\"1\":{\"111\":1}}],[\"每个配菜的价钱通常不太一样\",{\"1\":{\"86\":1}}],[\"每次都需要打开灯\",{\"1\":{\"98\":1}}],[\"每次在一个维度上新增一个具体实现都要增加多个子类\",{\"1\":{\"91\":1}}],[\"扩展了\",{\"1\":{\"189\":1}}],[\"扩展\",{\"0\":{\"173\":1,\"234\":1}}],[\"扩展性好\",{\"1\":{\"171\":1}}],[\"扩展性很差\",{\"1\":{\"142\":1}}],[\"扩展性不好\",{\"1\":{\"86\":1}}],[\"扩展抽象化\",{\"1\":{\"92\":1}}],[\"扩展起来不灵活\",{\"1\":{\"91\":1}}],[\"试想\",{\"1\":{\"91\":1}}],[\"现要组装一台电脑\",{\"1\":{\"258\":1}}],[\"现要对下面的配置文件进行解析\",{\"1\":{\"197\":1}}],[\"现咖啡店业务发生改变\",{\"1\":{\"229\":1}}],[\"现在如果我们还需要再创建一个传智品牌的安全门\",{\"1\":{\"259\":1}}],[\"现在需要一种翻译识别机器\",{\"1\":{\"183\":1}}],[\"现在养宠物的人特别多\",{\"1\":{\"170\":1}}],[\"现在租房基本都是通过房屋中介\",{\"1\":{\"157\":1}}],[\"现在是运行状态\",{\"1\":{\"142\":1}}],[\"现在有一个需求\",{\"1\":{\"91\":1}}],[\"现需要开发一个请假流程控制系统\",{\"1\":{\"138\":1}}],[\"现通过模板方法模式来用代码模拟\",{\"1\":{\"117\":1}}],[\"现有一台电脑只能读取\",{\"1\":{\"83\":1}}],[\"相同的构建器\",{\"1\":{\"235\":1}}],[\"相同的装配\",{\"1\":{\"235\":1}}],[\"相同点\",{\"1\":{\"89\":1}}],[\"相关的\",{\"0\":{\"198\":1}}],[\"相关接口分析\",{\"0\":{\"191\":1}}],[\"相关信息\",{\"1\":{\"22\":1,\"35\":1,\"54\":1}}],[\"写数据\",{\"1\":{\"88\":1}}],[\"写入tf卡功能\",{\"1\":{\"83\":1}}],[\"写入sd卡功能\",{\"1\":{\"83\":1}}],[\"也有将类型放在变量名前面\",{\"1\":{\"251\":1}}],[\"也属于一个容器\",{\"1\":{\"214\":1}}],[\"也就没有\",{\"1\":{\"190\":1}}],[\"也就是实现了构建算法\",{\"1\":{\"235\":1}}],[\"也就是同一品牌的产品\",{\"1\":{\"229\":1}}],[\"也就是同一类产品\",{\"1\":{\"229\":1}}],[\"也就是每个\",{\"1\":{\"192\":1}}],[\"也就是执行实际类型中的方法\",{\"1\":{\"173\":1}}],[\"也就是委托给了closingstate子类执行这个动作\",{\"1\":{\"144\":4}}],[\"也就是封装状态的变化引起的功能变化\",{\"1\":{\"144\":1}}],[\"也就是\",{\"1\":{\"111\":1,\"188\":1}}],[\"也就是说在实例化容器对象后并不会自动实例化\",{\"1\":{\"189\":1}}],[\"也就是说员工必须记住每个领导的姓名\",{\"1\":{\"136\":1}}],[\"也就是说相当于使用命令对象的入口\",{\"1\":{\"130\":1}}],[\"也就是说\",{\"1\":{\"74\":1,\"155\":1,\"188\":1,\"229\":1,\"244\":1}}],[\"也是抽象表达式的子类\",{\"1\":{\"184\":1}}],[\"也是一样\",{\"1\":{\"142\":1}}],[\"也不是太符合单一职责原则\",{\"1\":{\"236\":1}}],[\"也不稳定\",{\"1\":{\"155\":1}}],[\"也不能访问私有成员变量对象中的方法\",{\"1\":{\"100\":1}}],[\"也称为上下文\",{\"1\":{\"143\":1}}],[\"也可动态地新增或者删除责任\",{\"1\":{\"139\":1}}],[\"也可以从网上下载新的皮肤\",{\"1\":{\"256\":1}}],[\"也可以做出不同的对象\",{\"1\":{\"235\":1}}],[\"也可以是\",{\"1\":{\"183\":1}}],[\"也可以使用其他的一些开发工具\",{\"1\":{\"122\":1}}],[\"也可以使用\",{\"1\":{\"122\":1}}],[\"也可以包含带有其他菜单项的菜单\",{\"1\":{\"104\":1}}],[\"也可以再动态地撤销时\",{\"1\":{\"87\":1}}],[\"以后学习\",{\"1\":{\"216\":1}}],[\"以应对可能的变化\",{\"1\":{\"194\":1}}],[\"以便根据这些数据恢复这个发起人对象的内部状态\",{\"1\":{\"176\":1}}],[\"以便以后当需要时能将该对象恢复到原先保存的状态\",{\"1\":{\"175\":1}}],[\"以便在得到主题更改通知时更新自身的状态\",{\"1\":{\"149\":1}}],[\"以至于系统难以维护\",{\"1\":{\"158\":1}}],[\"以及怎样分配职责\",{\"1\":{\"246\":1}}],[\"以及该问题的解决方案\",{\"1\":{\"244\":1}}],[\"以及操作数组\",{\"1\":{\"189\":1}}],[\"以及中介者\",{\"1\":{\"155\":1}}],[\"以及\",{\"1\":{\"140\":1,\"251\":1}}],[\"以下是\",{\"1\":{\"140\":1}}],[\"以上\",{\"1\":{\"113\":1}}],[\"以此来隐藏目标对象\",{\"1\":{\"89\":1}}],[\"以动态\",{\"1\":{\"87\":1}}],[\"以前开发的系统存在满足新系统功能需求的类\",{\"1\":{\"85\":1}}],[\"饰者模式可以带来比继承更加灵活性的扩展功能\",{\"1\":{\"86\":1}}],[\"元素\",{\"1\":{\"170\":1}}],[\"元\",{\"1\":{\"86\":3}}],[\"元数据工具\",{\"1\":{\"7\":1}}],[\"点一份加培根的炒面\",{\"1\":{\"86\":1}}],[\"点一份加鸡蛋的炒饭\",{\"1\":{\"86\":1}}],[\"点一份炒饭\",{\"1\":{\"86\":1}}],[\"点击开始安装\",{\"1\":{\"27\":1}}],[\"点击创建新的虚拟机\",{\"1\":{\"22\":1}}],[\"培根\",{\"1\":{\"86\":1}}],[\"培根配料\",{\"1\":{\"86\":1}}],[\"培根这些配菜\",{\"1\":{\"86\":1}}],[\"鸡蛋\",{\"1\":{\"86\":1}}],[\"鸡蛋配料\",{\"1\":{\"86\":1}}],[\"配料类\",{\"1\":{\"86\":1}}],[\"配置资源进行载入\",{\"1\":{\"196\":1}}],[\"配置资源的载入是从\",{\"1\":{\"196\":1}}],[\"配置文件的方式\",{\"1\":{\"214\":1}}],[\"配置文件的\",{\"1\":{\"207\":1}}],[\"配置文件的解析\",{\"1\":{\"194\":1,\"211\":1}}],[\"配置文件\",{\"1\":{\"192\":2}}],[\"配置文件列表\",{\"0\":{\"48\":1}}],[\"配置了\",{\"1\":{\"38\":1}}],[\"配置数据源\",{\"0\":{\"8\":1}}],[\"配置类\",{\"1\":{\"7\":1}}],[\"获取c2奖状所属学生对象\",{\"1\":{\"234\":1}}],[\"获取集合中的元素\",{\"1\":{\"231\":1}}],[\"获取迭代器对象\",{\"1\":{\"231\":1}}],[\"获取迭代器对象的方法\",{\"1\":{\"163\":1}}],[\"获取注册表对象\",{\"1\":{\"206\":1}}],[\"获取注册表的功能\",{\"1\":{\"206\":1}}],[\"获取注册表中所有的\",{\"1\":{\"203\":1}}],[\"获取注册表中所有的bean的名称\",{\"1\":{\"195\":1}}],[\"获取注册表中\",{\"1\":{\"203\":1}}],[\"获取注册表中指定名称的bean\",{\"1\":{\"195\":1}}],[\"获取beandefinitionregistry注册器对象\",{\"1\":{\"194\":1}}],[\"获取下一个元素\",{\"1\":{\"166\":1}}],[\"获取到的信息\",{\"1\":{\"157\":2}}],[\"获取信息\",{\"1\":{\"157\":2}}],[\"获取菜单名称\",{\"1\":{\"104\":1}}],[\"获取指定的子菜单\",{\"1\":{\"104\":1}}],[\"获取目标对象构建的地方不同\",{\"1\":{\"89\":1}}],[\"获取价格\",{\"1\":{\"86\":1}}],[\"获取代理对象\",{\"1\":{\"75\":2,\"76\":1}}],[\"案例实现\",{\"0\":{\"104\":1,\"111\":1,\"117\":1,\"124\":1,\"131\":1,\"138\":1,\"144\":1,\"150\":1,\"157\":1,\"163\":1,\"170\":1,\"177\":1,\"185\":1}}],[\"案例\",{\"0\":{\"93\":1,\"98\":1},\"1\":{\"86\":1}}],[\"角色状态管理者类\",{\"1\":{\"178\":1,\"179\":1}}],[\"角色防御力\",{\"1\":{\"178\":1,\"179\":1}}],[\"角色攻击力\",{\"1\":{\"178\":1,\"179\":1}}],[\"角色生命力\",{\"1\":{\"178\":1,\"179\":1}}],[\"角色\",{\"1\":{\"86\":4,\"92\":4,\"97\":2,\"110\":3,\"130\":4,\"137\":3,\"143\":3,\"156\":4,\"162\":4,\"169\":5,\"176\":3,\"184\":4}}],[\"抽象不应该依赖细节\",{\"1\":{\"258\":1}}],[\"抽象出来一个四边形接口\",{\"1\":{\"257\":1}}],[\"抽象\",{\"1\":{\"236\":1}}],[\"抽象建造者类\",{\"1\":{\"235\":1}}],[\"抽象原型类\",{\"1\":{\"232\":1}}],[\"抽象工厂模式实现对产品家族的创建\",{\"1\":{\"240\":1}}],[\"抽象工厂模式有多个抽象产品\",{\"1\":{\"229\":1}}],[\"抽象工厂模式的主要角色如下\",{\"1\":{\"229\":1}}],[\"抽象工厂模式是工厂方法模式的升级版本\",{\"1\":{\"229\":1}}],[\"抽象工厂模式是一种为访问类提供一个创建一组相关或相互依赖对象的接口\",{\"1\":{\"229\":1}}],[\"抽象工厂模式将考虑多等级产品的生产\",{\"1\":{\"229\":1}}],[\"抽象工厂模式\",{\"0\":{\"229\":1,\"240\":1}}],[\"抽象工厂\",{\"1\":{\"228\":1,\"229\":1,\"246\":1}}],[\"抽象产品\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"抽象角色abstractexpression\",{\"1\":{\"185\":1}}],[\"抽象表达式\",{\"1\":{\"184\":1}}],[\"抽象语法树\",{\"1\":{\"183\":2}}],[\"抽象为一种\",{\"1\":{\"183\":1}}],[\"抽象元素角色\",{\"1\":{\"170\":1}}],[\"抽象元素\",{\"1\":{\"169\":1}}],[\"抽象访问者\",{\"1\":{\"169\":1}}],[\"抽象迭代器\",{\"1\":{\"162\":1,\"166\":1}}],[\"抽象聚合类\",{\"1\":{\"166\":1}}],[\"抽象聚合\",{\"1\":{\"162\":1}}],[\"抽象同事类\",{\"1\":{\"156\":1,\"157\":1}}],[\"抽象中介者\",{\"1\":{\"156\":1,\"157\":1}}],[\"抽象观察者\",{\"1\":{\"149\":1}}],[\"抽象被观察者\",{\"1\":{\"149\":1}}],[\"抽象状态类\",{\"1\":{\"144\":1}}],[\"抽象状态\",{\"1\":{\"143\":1}}],[\"抽象处理者\",{\"1\":{\"137\":1}}],[\"抽象命令角色\",{\"1\":{\"134\":1}}],[\"抽象命令类\",{\"1\":{\"130\":1}}],[\"抽象策略\",{\"1\":{\"123\":1}}],[\"抽象方法\",{\"1\":{\"116\":1,\"120\":1}}],[\"抽象类\",{\"1\":{\"116\":1}}],[\"抽象享元角色\",{\"1\":{\"110\":1}}],[\"抽象根节点角色中声明了所有用于管理成员对象的方法\",{\"1\":{\"105\":1}}],[\"抽象根节点\",{\"1\":{\"103\":1}}],[\"抽象化\",{\"1\":{\"92\":1}}],[\"抽象装饰\",{\"1\":{\"86\":1}}],[\"抽象构件\",{\"1\":{\"86\":1}}],[\"抽象主题提供一个接口\",{\"1\":{\"149\":1}}],[\"抽象主题角色把所有观察者对象保存在一个集合里\",{\"1\":{\"149\":1}}],[\"抽象主题\",{\"1\":{\"73\":1,\"149\":1}}],[\"即使实现细节不断变动\",{\"1\":{\"258\":1}}],[\"即产品的构建过程和最终的表示是独立的\",{\"1\":{\"236\":1}}],[\"即在创建容器对象的时候就对象\",{\"1\":{\"192\":1}}],[\"即\",{\"1\":{\"192\":1,\"201\":1}}],[\"即宽接口\",{\"1\":{\"178\":1}}],[\"即静态分派和动态分派\",{\"1\":{\"173\":1}}],[\"即宏命令\",{\"1\":{\"132\":1}}],[\"即把促销活动推销给客户\",{\"1\":{\"124\":1}}],[\"即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务\",{\"1\":{\"113\":1}}],[\"即不利于类的复用\",{\"1\":{\"155\":1}}],[\"即不会随着环境的改变而改变的可共享部分\",{\"1\":{\"110\":1}}],[\"即不可能包含成员对象\",{\"1\":{\"105\":1}}],[\"即增加其额外功能\",{\"1\":{\"86\":1}}],[\"即可\",{\"1\":{\"34\":1}}],[\"炒蒜蓉菜心\",{\"1\":{\"117\":1}}],[\"炒手撕包菜\",{\"1\":{\"117\":1}}],[\"炒啊炒啊炒到熟啊\",{\"1\":{\"117\":1}}],[\"炒菜的步骤是固定的\",{\"1\":{\"117\":1}}],[\"炒菜\",{\"1\":{\"117\":1}}],[\"炒面\",{\"1\":{\"86\":2}}],[\"炒饭\",{\"1\":{\"86\":2}}],[\"炒饭这些快餐\",{\"1\":{\"86\":1}}],[\"炒河粉\",{\"1\":{\"86\":1}}],[\"火腿肠\",{\"1\":{\"86\":1}}],[\"火腿\",{\"1\":{\"86\":1}}],[\"火车站类\",{\"1\":{\"76\":1}}],[\"火车站具有卖票功能\",{\"1\":{\"74\":1,\"75\":1}}],[\"火车站\",{\"1\":{\"74\":1,\"75\":1,\"76\":1}}],[\"火车站是目标对象\",{\"1\":{\"74\":1}}],[\"火车站卖票\",{\"1\":{\"74\":2,\"75\":1,\"76\":1}}],[\"快餐接口\",{\"1\":{\"86\":1}}],[\"快餐店有炒面\",{\"1\":{\"86\":1}}],[\"快速启动\",{\"0\":{\"38\":1}}],[\"快速创建项目\",{\"1\":{\"3\":1}}],[\"做了\",{\"1\":{\"86\":1}}],[\"从目标系统的不同角度出发\",{\"1\":{\"247\":1}}],[\"从以上的编写的代码可以看到\",{\"1\":{\"228\":1}}],[\"从下面源代码中可以看出\",{\"1\":{\"225\":1}}],[\"从下右图中可以看到\",{\"1\":{\"155\":1}}],[\"从注册表中删除指定名称的\",{\"1\":{\"203\":1}}],[\"从注册表中删除指定名称的beandefinition对象\",{\"1\":{\"203\":1}}],[\"从注册表中删除指定名称的bean\",{\"1\":{\"195\":1}}],[\"从指定的资源中\",{\"1\":{\"194\":1}}],[\"从ioc容器中获取userservice对象\",{\"1\":{\"188\":1}}],[\"从这点不难看出\",{\"1\":{\"169\":1}}],[\"从而缩短软件的开发周期\",{\"1\":{\"245\":1}}],[\"从而可以构造出复杂的对象\",{\"1\":{\"235\":1}}],[\"从而分析\",{\"1\":{\"188\":1}}],[\"从而维护了封装型\",{\"1\":{\"179\":1}}],[\"从而将\",{\"1\":{\"179\":1}}],[\"从而使得同事对象之间松散耦合\",{\"1\":{\"158\":1}}],[\"从而提高软件开发效率\",{\"1\":{\"255\":1}}],[\"从而提高复用程度\",{\"1\":{\"171\":1}}],[\"从而提高系统资源的利用率\",{\"1\":{\"109\":1}}],[\"从而提高子系统的独立性和可移植性\",{\"1\":{\"99\":1}}],[\"从而降低了抽象和实现这两个可变维度的耦合度\",{\"1\":{\"91\":1}}],[\"从表层来看\",{\"1\":{\"86\":1}}],[\"从上图可以看出\",{\"1\":{\"86\":1}}],[\"从上面类图我们可以看到使用继承复用产生了很多子类\",{\"1\":{\"261\":1}}],[\"从上面类图可以看到\",{\"1\":{\"195\":1}}],[\"从上面代码可以看到\",{\"1\":{\"120\":1}}],[\"从上面代码中可以看出测试类直接访问的是\",{\"1\":{\"74\":1}}],[\"从上面的类中\",{\"1\":{\"75\":1}}],[\"并提出了\",{\"1\":{\"243\":1}}],[\"并不涉及具体的部件对象的创建\",{\"1\":{\"235\":1}}],[\"并不是所有的抽象享元类的子类都需要被共享\",{\"1\":{\"110\":1}}],[\"并不是我们上述所说的代理对象的类\",{\"1\":{\"75\":1}}],[\"并定义其两个子类\",{\"1\":{\"226\":1}}],[\"并定义一个解释器\",{\"1\":{\"183\":1}}],[\"并对外提供了很好的扩展性\",{\"1\":{\"216\":1}}],[\"并对核心功能进行模拟\",{\"1\":{\"188\":1}}],[\"并实现依赖注入操作\",{\"1\":{\"212\":1}}],[\"并实现了抽象主题中的方法\",{\"1\":{\"150\":1}}],[\"并进行\",{\"1\":{\"212\":1}}],[\"并进行类型转换\",{\"1\":{\"209\":1}}],[\"并注册\",{\"1\":{\"206\":1}}],[\"并自定义\",{\"1\":{\"197\":1}}],[\"并自行决定使用哪一个策略类\",{\"1\":{\"125\":1}}],[\"并封装\",{\"1\":{\"195\":1}}],[\"并创建对象进行存储\",{\"1\":{\"230\":1}}],[\"并创建\",{\"1\":{\"192\":3}}],[\"并存储到一个容器中\",{\"1\":{\"192\":1}}],[\"并指定获取到的bean对象的类型\",{\"1\":{\"192\":1}}],[\"并由\",{\"1\":{\"190\":1}}],[\"并由管理者进行管理\",{\"1\":{\"180\":1}}],[\"并在内部定义备忘录内部类\",{\"1\":{\"179\":1}}],[\"并在该对象之外保存这个状态\",{\"1\":{\"175\":1}}],[\"并调用\",{\"1\":{\"153\":1}}],[\"并调用接收者的功能来完成命令要执行的操作\",{\"1\":{\"130\":1}}],[\"并向调用者返回完整的产品类\",{\"1\":{\"236\":1}}],[\"并向链头的具体处理者对象提交请求\",{\"1\":{\"137\":1}}],[\"并向厨师喊\",{\"1\":{\"131\":1}}],[\"并委派给不同的对象对这些算法进行管理\",{\"1\":{\"122\":1}}],[\"并将与状态相关的操作委托给当前状态对象来处理\",{\"1\":{\"143\":1}}],[\"并将每个算法封装起来\",{\"1\":{\"122\":1}}],[\"并将其存储到数组的第一个索引位置\",{\"1\":{\"120\":1}}],[\"并将外部状态外部化\",{\"1\":{\"110\":1}}],[\"并符合\",{\"1\":{\"118\":1}}],[\"并给工厂类提供一个获取形状的方法\",{\"1\":{\"111\":1}}],[\"并给具体构件对象添加附加的责任\",{\"1\":{\"86\":1}}],[\"并且语言中的句子可以表示为一个抽象语法树的时候\",{\"1\":{\"187\":1}}],[\"并且可以迭代这些元素\",{\"1\":{\"169\":1}}],[\"并且可以方便地增加新的状态\",{\"1\":{\"145\":1}}],[\"并且这些分支决定于对象的状态时\",{\"1\":{\"146\":1}}],[\"并且这些行为在这个类的操作中以多个条件语句的形式出现\",{\"1\":{\"126\":1}}],[\"并且它必须在运行时根据状态改变它的行为时\",{\"1\":{\"146\":1}}],[\"并且请假天数超过了当前领导的处理范围\",{\"1\":{\"138\":1}}],[\"并且方法的实现调用\",{\"1\":{\"100\":1}}],[\"并且每个图形都有可能会有不同的颜色\",{\"1\":{\"91\":1}}],[\"并使得子系统使用起来更加容易\",{\"1\":{\"98\":1}}],[\"并通过组合关系调用实现化角色中的业务方法\",{\"1\":{\"92\":1}}],[\"并通过该类进行了字节流和字符流之间的解码转换\",{\"1\":{\"86\":1}}],[\"并包含一个对实现化对象的引用\",{\"1\":{\"92\":1}}],[\"并包含具体构件的实例\",{\"1\":{\"86\":1}}],[\"给定一个语言\",{\"1\":{\"183\":1}}],[\"给\",{\"1\":{\"179\":1}}],[\"给宠物喂食的人\",{\"1\":{\"170\":1}}],[\"给宠物喂食\",{\"1\":{\"170\":1}}],[\"给所有注册过的观察者发送通知\",{\"1\":{\"149\":1}}],[\"给出对每一个元素类访问时所产生的具体行为\",{\"1\":{\"169\":1}}],[\"给出实现化角色接口的具体实现\",{\"1\":{\"92\":1}}],[\"给出的自身实现\",{\"1\":{\"86\":1}}],[\"给管理员实例的所有主体授权\",{\"1\":{\"60\":1}}],[\"​```java\",{\"1\":{\"86\":1}}],[\"但不能改变父类原有的功能\",{\"1\":{\"257\":1}}],[\"但构件间的建造顺序是稳定的\",{\"1\":{\"236\":1}}],[\"但将它们组合在一起的算法却相对稳定\",{\"1\":{\"236\":1}}],[\"但同时也加重了抽象建造者类的职责\",{\"1\":{\"236\":1}}],[\"但提供了额外的功能\",{\"1\":{\"189\":1}}],[\"但你所说的将成为呈堂证供\",{\"1\":{\"153\":1}}],[\"但这个动作不归我执行\",{\"1\":{\"144\":2}}],[\"但每个领导能批准的天数不同\",{\"1\":{\"136\":1}}],[\"但每个对象的处理条件或权限不同\",{\"1\":{\"136\":1}}],[\"但某些步骤的具体实现还未知\",{\"1\":{\"115\":1}}],[\"但对树形结构的控制却非常简单\",{\"1\":{\"106\":1}}],[\"但在运行阶段如果调用这些方法可能会出错\",{\"1\":{\"105\":1}}],[\"但其不能对备忘录的内容进行访问与修改\",{\"1\":{\"176\":1}}],[\"但其操作算法经常变化的程序\",{\"1\":{\"172\":1}}],[\"但其中个别部分易变时\",{\"1\":{\"119\":1}}],[\"但其实大部分人都不太懂\",{\"1\":{\"96\":1}}],[\"但其接口同新系统的接口不一致\",{\"1\":{\"85\":1}}],[\"但我们知道他们对构造方法中的字节流类\",{\"1\":{\"86\":1}}],[\"但组件接口定义和自己要求的接口定义不同\",{\"1\":{\"85\":1}}],[\"但是似乎组装的电脑的\",{\"1\":{\"258\":1}}],[\"但是整个继承体系的可复用性会比较差\",{\"1\":{\"257\":1}}],[\"但是有些情况下需要简化系统结构\",{\"1\":{\"236\":1}}],[\"但是在现实生活中许多工厂是综合型的工厂\",{\"1\":{\"229\":1}}],[\"但是从类图中我们可以发现最终的默认实现类是\",{\"1\":{\"192\":1}}],[\"但是可以正常使用\",{\"1\":{\"188\":1}}],[\"但是如何描述规则呢\",{\"1\":{\"183\":1}}],[\"但是通过程序员自律\",{\"1\":{\"178\":1}}],[\"但是它有什么效果呢\",{\"1\":{\"173\":1}}],[\"但是办理具体业务却因人而异\",{\"1\":{\"115\":1}}],[\"但是\",{\"1\":{\"104\":1}}],[\"但是这样就会给客户带来不必要的麻烦\",{\"1\":{\"102\":1}}],[\"但是由于容器对象和叶子对象在功能上面的区别\",{\"1\":{\"102\":1}}],[\"但是大家想想\",{\"1\":{\"100\":1}}],[\"但是到\",{\"1\":{\"77\":1}}],[\"但是当业务复杂时\",{\"1\":{\"16\":1}}],[\"但是尝试启动项目发现报错\",{\"1\":{\"7\":1}}],[\"反而比较像是一种编程习惯\",{\"1\":{\"227\":1}}],[\"反射破解单例模式需要添加的代码\",{\"1\":{\"224\":1}}],[\"反射方式破解单例的解决方法\",{\"1\":{\"224\":1}}],[\"反射效率要高\",{\"1\":{\"77\":1}}],[\"反序列方式破坏单例模式的解决方法\",{\"1\":{\"224\":1}}],[\"反正则是房主获得信息\",{\"1\":{\"157\":1}}],[\"反之不可用\",{\"1\":{\"83\":1}}],[\"读取对象\",{\"1\":{\"234\":1}}],[\"读取\",{\"1\":{\"120\":1}}],[\"读取tf卡方法\",{\"1\":{\"83\":1}}],[\"读取sd卡方法\",{\"1\":{\"83\":1}}],[\"读卡器\",{\"1\":{\"83\":1,\"84\":1}}],[\"读卡器等\",{\"1\":{\"81\":1}}],[\"卡中的内容读取出来\",{\"1\":{\"83\":1}}],[\"卡中的内容的话就需要使用到适配器模式\",{\"1\":{\"83\":1}}],[\"卡\",{\"1\":{\"83\":1}}],[\"目的不同\",{\"1\":{\"89\":1}}],[\"目标\",{\"1\":{\"82\":1}}],[\"目录结构\",{\"0\":{\"46\":1}}],[\"定义解析器相关类\",{\"0\":{\"205\":1}}],[\"定义解释器的接口\",{\"1\":{\"184\":1}}],[\"定义如下功能\",{\"1\":{\"203\":1}}],[\"定义注册表相关类\",{\"0\":{\"202\":1}}],[\"定义的载入过程\",{\"1\":{\"196\":1}}],[\"定义为\",{\"1\":{\"183\":1}}],[\"定义为抽象类\",{\"1\":{\"104\":1}}],[\"定义它的文法表示\",{\"1\":{\"183\":1}}],[\"定义发起人类\",{\"1\":{\"179\":1}}],[\"定义对象结构\",{\"1\":{\"170\":1}}],[\"定义实现animal接口的\",{\"1\":{\"170\":1}}],[\"定义实现化角色的接口\",{\"1\":{\"92\":1}}],[\"定义当中所提到的对象结构\",{\"1\":{\"169\":1}}],[\"定义了用例图\",{\"1\":{\"247\":1}}],[\"定义了产品的规范\",{\"1\":{\"227\":1,\"228\":1,\"229\":1}}],[\"定义了两个规范\",{\"1\":{\"206\":1}}],[\"定义了\",{\"1\":{\"192\":1,\"204\":1}}],[\"定义了一个接受访问者的方法\",{\"1\":{\"169\":1}}],[\"定义了对每一个元素\",{\"1\":{\"169\":1}}],[\"定义了算法的骨架\",{\"1\":{\"116\":1}}],[\"定义迭代器接口\",{\"1\":{\"163\":1}}],[\"定义访问和遍历聚合元素的接口\",{\"1\":{\"162\":1}}],[\"定义存储\",{\"1\":{\"162\":1}}],[\"定义同事类的接口\",{\"1\":{\"156\":1}}],[\"定义具体的容器类\",{\"1\":{\"163\":1}}],[\"定义具体的迭代器类\",{\"1\":{\"163\":1}}],[\"定义具体观察者类\",{\"1\":{\"150\":1}}],[\"定义具体策略角色\",{\"1\":{\"124\":1}}],[\"定义抽象节点\",{\"1\":{\"170\":1}}],[\"定义抽象容器类\",{\"1\":{\"163\":1}}],[\"定义抽象主题类\",{\"1\":{\"150\":1}}],[\"定义抽象观察者类\",{\"1\":{\"150\":1}}],[\"定义抽象类\",{\"1\":{\"92\":1}}],[\"定义出所有的电梯状态\",{\"1\":{\"144\":1}}],[\"定义命令的接口\",{\"1\":{\"130\":1}}],[\"定义环境角色\",{\"1\":{\"124\":1}}],[\"定义百货公司所有促销活动的共同接口\",{\"1\":{\"124\":1}}],[\"定义树枝节点的行为\",{\"1\":{\"103\":1}}],[\"定义系统各层次对象的共有方法和属性\",{\"1\":{\"103\":1}}],[\"定义一个用于创建对象的接口\",{\"1\":{\"228\":1}}],[\"定义一个可以存储学生对象的容器对象\",{\"1\":{\"163\":1}}],[\"定义一个\",{\"1\":{\"156\":1}}],[\"定义一个中介角色来封装一系列对象之间的交互\",{\"1\":{\"155\":1}}],[\"定义一个当前电梯状态\",{\"1\":{\"144\":1}}],[\"定义一个环境角色\",{\"1\":{\"144\":1}}],[\"定义一个接口\",{\"1\":{\"143\":1}}],[\"定义一个处理请求的接口\",{\"1\":{\"137\":1}}],[\"定义一个操作中的算法骨架\",{\"1\":{\"115\":1}}],[\"定义一个抽象接口以规范准备接收附加责任的对象\",{\"1\":{\"86\":1}}],[\"定义一个适配器类来实现当前系统的业务接口\",{\"1\":{\"83\":1}}],[\"定义适配器类\",{\"1\":{\"83\":1}}],[\"定义\",{\"0\":{\"198\":1},\"1\":{\"81\":1,\"86\":1,\"91\":1,\"96\":1,\"100\":1,\"102\":1,\"109\":1,\"115\":1,\"122\":1,\"129\":1,\"136\":1,\"142\":1,\"148\":1,\"155\":1,\"161\":1,\"168\":1,\"175\":1,\"183\":1,\"188\":3,\"195\":1}}],[\"定义切面\",{\"1\":{\"16\":1}}],[\"转换为\",{\"1\":{\"81\":1}}],[\"转换器第\",{\"1\":{\"81\":1}}],[\"手机充电器\",{\"1\":{\"81\":1}}],[\"手机在当地不能直接充电\",{\"1\":{\"81\":1}}],[\"生产一个产品族的产品\",{\"1\":{\"240\":1}}],[\"生产自行车是一个复杂的过程\",{\"1\":{\"236\":1}}],[\"生命周期控制\",{\"1\":{\"189\":1}}],[\"生命力\",{\"1\":{\"178\":1,\"179\":1}}],[\"生活中的\",{\"1\":{\"136\":1}}],[\"生活中这样的例子很多\",{\"1\":{\"81\":1}}],[\"生成keytab\",{\"1\":{\"63\":1}}],[\"生成\",{\"0\":{\"59\":1}}],[\"生成多张表增删改查\",{\"0\":{\"17\":1}}],[\"面向对象的开发很好的解决了这个问题\",{\"1\":{\"258\":1}}],[\"面供我们充电\",{\"1\":{\"81\":1}}],[\"面插入当地的插座\",{\"1\":{\"81\":1}}],[\"第五步\",{\"1\":{\"117\":2}}],[\"第四步\",{\"1\":{\"117\":2}}],[\"第三步\",{\"1\":{\"117\":2}}],[\"第一个参数类型为\",{\"1\":{\"251\":1}}],[\"第一步\",{\"1\":{\"117\":1}}],[\"第一类是系统中存在大量独立的扩展\",{\"1\":{\"87\":1}}],[\"第二个参数类型为\",{\"1\":{\"251\":1}}],[\"第二个参数传递的是\",{\"1\":{\"127\":1}}],[\"第二个输出语句输出的是\",{\"1\":{\"113\":1}}],[\"第二步\",{\"1\":{\"117\":2}}],[\"第二类是因为类定义不能继承\",{\"1\":{\"87\":1}}],[\"第\",{\"1\":{\"81\":1}}],[\"因此在解释较为复杂的句子时其速度很慢\",{\"1\":{\"186\":1}}],[\"因此如果一个语言包含太多文法规则\",{\"1\":{\"186\":1}}],[\"因此可以方便地实现一个简单的语言\",{\"1\":{\"186\":1}}],[\"因此可以通过继承等机制来改变或扩展文法\",{\"1\":{\"186\":1}}],[\"因此负责人角色不可能改变这个备忘录对象的内容\",{\"1\":{\"179\":1}}],[\"因此没有定义出任何的方法\",{\"1\":{\"179\":1}}],[\"因此它依赖于同事角色\",{\"1\":{\"156\":1}}],[\"因此\",{\"1\":{\"112\":1,\"257\":1}}],[\"因此客户端不能完全针对抽象编程\",{\"1\":{\"105\":1}}],[\"因此为其提供\",{\"1\":{\"105\":1}}],[\"因此需要覆盖\",{\"1\":{\"104\":1}}],[\"因此使用组合模式描述菜单就很恰当\",{\"1\":{\"104\":1}}],[\"因此我们的笔记本电脑\",{\"1\":{\"81\":1}}],[\"因为抽象灵活性好\",{\"1\":{\"256\":1}}],[\"因为此类存储并管理\",{\"1\":{\"214\":1}}],[\"因为只有子类明确到底创建\",{\"1\":{\"211\":1}}],[\"因为这里需要被扩展的地方很多\",{\"1\":{\"194\":1}}],[\"因为加法和减法运算\",{\"1\":{\"183\":1}}],[\"因为编译器仅仅知道对象的静态类型\",{\"1\":{\"173\":1}}],[\"因为叶子构件和容器构件具有不同的方法\",{\"1\":{\"105\":1}}],[\"因为叶子对象和容器对象在本质上是有区别的\",{\"1\":{\"105\":1}}],[\"因为有一些共有的属性和行为要在该类中实现\",{\"1\":{\"104\":1}}],[\"因为\",{\"1\":{\"76\":1,\"77\":1,\"104\":1,\"214\":1}}],[\"因为要适配高版本\",{\"1\":{\"46\":1}}],[\"因为后面会关掉的\",{\"1\":{\"25\":1}}],[\"本地服务通过网络请求远程服务\",{\"1\":{\"79\":1}}],[\"远程访问\",{\"1\":{\"189\":1}}],[\"远程\",{\"1\":{\"79\":1}}],[\"优点\",{\"0\":{\"106\":1},\"1\":{\"78\":1,\"112\":1,\"118\":1,\"125\":1,\"132\":1,\"139\":1,\"145\":1,\"151\":1,\"158\":1,\"164\":1,\"171\":1,\"180\":1,\"186\":1}}],[\"优缺点和使用场景\",{\"0\":{\"112\":1}}],[\"优缺点\",{\"0\":{\"78\":1,\"118\":1,\"125\":1,\"132\":1,\"139\":1,\"145\":1,\"151\":1,\"158\":1,\"164\":1,\"171\":1,\"180\":1,\"186\":1}}],[\"比\",{\"1\":{\"77\":1}}],[\"比如下图表示一个\",{\"1\":{\"251\":1}}],[\"比如创建美团外卖等\",{\"1\":{\"227\":1}}],[\"比如加减法运算\",{\"1\":{\"183\":1}}],[\"比如在示例中\",{\"1\":{\"105\":1}}],[\"比如\",{\"1\":{\"15\":1,\"107\":1,\"173\":1,\"183\":1,\"192\":1}}],[\"逐步对\",{\"1\":{\"77\":1}}],[\"唯一需要注意的是\",{\"1\":{\"77\":1}}],[\"字节流类到\",{\"1\":{\"86\":1}}],[\"字节流\",{\"1\":{\"86\":1}}],[\"字节码生成框架\",{\"1\":{\"77\":1}}],[\"字符流之间的转换\",{\"1\":{\"86\":1}}],[\"字符流\",{\"1\":{\"86\":1}}],[\"字段填充\",{\"1\":{\"15\":3}}],[\"下图所示横轴是产品等级\",{\"1\":{\"229\":1}}],[\"下一个要返回元素的索引\",{\"1\":{\"166\":1}}],[\"下一步就是设置几个参数\",{\"1\":{\"76\":1}}],[\"下锅的酱料是蒜蓉\",{\"1\":{\"117\":1}}],[\"下锅的酱料是辣椒\",{\"1\":{\"117\":1}}],[\"下锅的蔬菜是菜心\",{\"1\":{\"117\":1}}],[\"下锅的蔬菜是包菜\",{\"1\":{\"117\":1}}],[\"下面的loadbeandefinitions都是加载bean定义\",{\"1\":{\"194\":1}}],[\"下面的图片是众所周知的俄罗斯方块中的一个个方块\",{\"1\":{\"111\":1}}],[\"下面是\",{\"1\":{\"189\":1}}],[\"下面是摘取的重点代码\",{\"1\":{\"75\":1}}],[\"下面来介绍它最重要的\",{\"1\":{\"153\":1}}],[\"下面利用享元模式进行实现\",{\"1\":{\"111\":1}}],[\"包含车架\",{\"1\":{\"236\":1}}],[\"包含了控制反转\",{\"1\":{\"189\":1}}],[\"包含添加元素\",{\"1\":{\"163\":1}}],[\"包含抽象处理方法和一个后继连接\",{\"1\":{\"137\":1}}],[\"包含以下主要角色\",{\"1\":{\"82\":1}}],[\"包括用于判断的逻辑方法和需要子类重写的空方法两种\",{\"1\":{\"116\":1}}],[\"包中的\",{\"1\":{\"86\":1}}],[\"包的坐标\",{\"1\":{\"76\":1}}],[\"包下符合命名规则的方法\",{\"1\":{\"16\":1}}],[\"为开发者管理对象之间的依赖关系提供了很多便利和基础服务\",{\"1\":{\"192\":1}}],[\"为它添加了\",{\"1\":{\"189\":1}}],[\"为接口的\",{\"1\":{\"179\":1}}],[\"为对象结构中的元素添加新的功能\",{\"1\":{\"171\":1}}],[\"为圣诞准备的促销活动c\",{\"1\":{\"124\":1}}],[\"为中秋准备的促销活动b\",{\"1\":{\"124\":1}}],[\"为春节准备的促销活动a\",{\"1\":{\"124\":1}}],[\"为防止恶意操作\",{\"1\":{\"117\":1}}],[\"为什么\",{\"1\":{\"190\":1}}],[\"为什么呢\",{\"1\":{\"173\":1}}],[\"为什么第一个输出语句输出的是\",{\"1\":{\"113\":1}}],[\"为什么在此处使用外观模式呢\",{\"1\":{\"100\":1}}],[\"为每一个具体享元类提供唯一的享元对象\",{\"1\":{\"110\":1}}],[\"为多个子系统对外提供一个共同的接口\",{\"1\":{\"97\":1}}],[\"为了提高软件系统的可维护性和可复用性\",{\"1\":{\"255\":1}}],[\"为了避免请求发送者与多个请求处理者耦合在一起\",{\"1\":{\"136\":1}}],[\"为了使对象可以共享\",{\"1\":{\"112\":1}}],[\"为了更加灵活的设计系统\",{\"1\":{\"91\":1}}],[\"为了实现本地到远程的通信\",{\"1\":{\"79\":1}}],[\"为支持每一种组合将产生大量的子类\",{\"1\":{\"87\":1}}],[\"为良好的代码设计和可维护性\",{\"1\":{\"79\":1}}],[\"为\",{\"1\":{\"76\":1}}],[\"对修改关闭\",{\"1\":{\"256\":1}}],[\"对扩展开放\",{\"1\":{\"256\":1}}],[\"对扩展比较灵活\",{\"1\":{\"132\":1}}],[\"对具体原型类\",{\"1\":{\"234\":1}}],[\"对上面的代码大家应该很熟\",{\"1\":{\"231\":1}}],[\"对上述电梯的案例使用状态模式进行改进\",{\"1\":{\"144\":1}}],[\"对外提供静态方法获取该对象\",{\"1\":{\"224\":1}}],[\"对涉及到的对象进行管理\",{\"1\":{\"197\":1}}],[\"对\",{\"1\":{\"196\":1}}],[\"对对象的数据访问所做的限制\",{\"1\":{\"192\":1}}],[\"对于自行车的生产就可以使用建造者模式\",{\"1\":{\"236\":1}}],[\"对于非基本类型属性\",{\"1\":{\"233\":1}}],[\"对于\",{\"1\":{\"190\":2,\"214\":1}}],[\"对于复杂文法难以维护\",{\"1\":{\"186\":1}}],[\"对于这样的结构我们称之为树形结构\",{\"1\":{\"102\":1}}],[\"对于这个图片肯定会非常熟悉\",{\"1\":{\"102\":1}}],[\"对备忘录进行管理\",{\"1\":{\"176\":1}}],[\"对有状态的对象\",{\"1\":{\"142\":1}}],[\"对比较长的职责链\",{\"1\":{\"139\":1}}],[\"对每个不同的实现都需要定义一个子类\",{\"1\":{\"118\":1}}],[\"对银行工作人员进行评分等\",{\"1\":{\"115\":1}}],[\"对分层结构系统构建时\",{\"1\":{\"99\":1}}],[\"对客户屏蔽了子系统组件\",{\"1\":{\"98\":1}}],[\"对他中的抽象的未实现的方法给出实现\",{\"1\":{\"86\":1}}],[\"对象图\",{\"1\":{\"247\":1}}],[\"对象中显示的都是李四\",{\"1\":{\"234\":1}}],[\"对象中\",{\"1\":{\"234\":1}}],[\"对象中的\",{\"1\":{\"188\":1}}],[\"对象和\",{\"1\":{\"227\":1,\"234\":1}}],[\"对象直接从工厂中获取即可\",{\"1\":{\"227\":1}}],[\"对象都是单例的\",{\"1\":{\"214\":1}}],[\"对象并存储到容器中\",{\"1\":{\"212\":1}}],[\"对象存储的容器\",{\"1\":{\"211\":1}}],[\"对象存储到哪儿\",{\"1\":{\"195\":1}}],[\"对象封装的数据进行\",{\"1\":{\"210\":1}}],[\"对象封装在\",{\"1\":{\"179\":1}}],[\"对象到注册表中\",{\"1\":{\"203\":1}}],[\"对象在\",{\"1\":{\"193\":1}}],[\"对象及其相互关系\",{\"1\":{\"193\":1}}],[\"对象是同一个对象\",{\"1\":{\"234\":1}}],[\"对象是非延时加载\",{\"1\":{\"192\":1}}],[\"对象是从\",{\"1\":{\"188\":1}}],[\"对象之间的依赖关系在配置文件中体现\",{\"1\":{\"190\":1}}],[\"对象之间的依赖关系\",{\"1\":{\"190\":1}}],[\"对象赋值给了\",{\"1\":{\"188\":1}}],[\"对象交由一个叫\",{\"1\":{\"190\":1}}],[\"对象交由\",{\"1\":{\"188\":1}}],[\"对象做为参数传递给\",{\"1\":{\"173\":1}}],[\"对象结构中的对象需要提供多种不同且不相关的操作\",{\"1\":{\"172\":1}}],[\"对象结构相对稳定\",{\"1\":{\"172\":1}}],[\"对象结构变化很困难\",{\"1\":{\"171\":1}}],[\"对象结构是一个抽象表述\",{\"1\":{\"169\":1}}],[\"对象结构\",{\"1\":{\"169\":1}}],[\"对象间存在一对多关系\",{\"1\":{\"152\":1}}],[\"对象的地方都需要修改一遍\",{\"1\":{\"226\":1}}],[\"对象的创建\",{\"1\":{\"210\":1,\"212\":1}}],[\"对象的创建都是非延时的\",{\"1\":{\"210\":1}}],[\"对象的个数\",{\"1\":{\"203\":1}}],[\"对象的名称\",{\"1\":{\"201\":1}}],[\"对象的大部分状态都可以外部化\",{\"1\":{\"112\":1}}],[\"对象的子实现类对象\",{\"1\":{\"100\":1}}],[\"对象肯定是一个\",{\"1\":{\"100\":1}}],[\"对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中\",{\"1\":{\"84\":1}}],[\"对象适配器模式\",{\"0\":{\"84\":1}}],[\"对象\",{\"1\":{\"76\":1,\"100\":2,\"113\":2,\"166\":1,\"176\":1,\"195\":1,\"200\":1,\"203\":3,\"209\":1,\"212\":1,\"214\":1}}],[\"对接口进行代理\",{\"1\":{\"76\":1}}],[\"对应于在代理对象上调用的接口方法的\",{\"1\":{\"75\":1}}],[\"同一学校的\",{\"1\":{\"233\":1}}],[\"同一品牌的产品产自同一个工厂\",{\"1\":{\"229\":1}}],[\"同具体工厂之间是多对一的关系\",{\"1\":{\"229\":1}}],[\"同种类产品称为同等级产品\",{\"1\":{\"229\":1}}],[\"同样可以在一定程度上实现模式的大部分用意\",{\"1\":{\"178\":1}}],[\"同样是上面的案例\",{\"1\":{\"76\":1}}],[\"同事对象之间的关系通常是一对多的\",{\"1\":{\"158\":1}}],[\"同事对象就可以独立地变化和复用\",{\"1\":{\"158\":1}}],[\"同事类之间直接关联的设计是不好的\",{\"1\":{\"155\":1}}],[\"同事类之间的关系是比较复杂的\",{\"1\":{\"155\":1}}],[\"同意\",{\"1\":{\"138\":3}}],[\"同时又产生了新的耦合\",{\"1\":{\"227\":1}}],[\"同时又继承现有组件库中已经存在的组件\",{\"1\":{\"83\":1}}],[\"同时确保只有单个对象被创建\",{\"1\":{\"222\":1}}],[\"同时也可以方便地调用对象方法\",{\"1\":{\"189\":1}}],[\"同时也可以通过这些方法来设置外部数据\",{\"1\":{\"110\":1}}],[\"同时也将自己this作为参数传递进去\",{\"1\":{\"173\":1}}],[\"同时也对\",{\"1\":{\"74\":1}}],[\"同时定义私有成员变量\",{\"1\":{\"100\":1}}],[\"在数学领域里\",{\"1\":{\"257\":1}}],[\"在程序需要进行拓展的时候\",{\"1\":{\"256\":1}}],[\"在软件开发中\",{\"1\":{\"255\":1}}],[\"在软件工程中\",{\"1\":{\"249\":1}}],[\"在此书中收录了\",{\"1\":{\"243\":1}}],[\"在他的著作\",{\"1\":{\"243\":1}}],[\"在开发中还有一个常用的使用方式\",{\"1\":{\"237\":1}}],[\"在建造者模式中具有很重要的作用\",{\"1\":{\"236\":1}}],[\"在指导者中不涉及具体产品的信息\",{\"1\":{\"235\":1}}],[\"在构造过程完成后\",{\"1\":{\"235\":1}}],[\"在构造方法中\",{\"1\":{\"212\":2}}],[\"在工厂类中加载配置文件中的全类名\",{\"1\":{\"230\":1}}],[\"在反序列化时被反射调用\",{\"1\":{\"224\":1}}],[\"在该接口中定义\",{\"1\":{\"209\":1}}],[\"在该类中定义了如下代码\",{\"1\":{\"195\":2}}],[\"在该方法中第\",{\"1\":{\"120\":1}}],[\"在类路径下编写一个名为\",{\"1\":{\"188\":1}}],[\"在计算机科学中\",{\"1\":{\"183\":1}}],[\"在解释器模式中\",{\"1\":{\"183\":1,\"186\":1}}],[\"在外面提供一个标识接口\",{\"1\":{\"179\":1}}],[\"在打\",{\"1\":{\"177\":1}}],[\"在需要的时候提供这些内部状态给发起人\",{\"1\":{\"176\":1}}],[\"在上面代码中\",{\"1\":{\"173\":1}}],[\"在访问者模式中\",{\"1\":{\"171\":1}}],[\"在不破坏封装性的前提下\",{\"1\":{\"175\":1}}],[\"在不修改对象结构中的元素的情况下\",{\"1\":{\"171\":1}}],[\"在不影响其他对象的情况下\",{\"1\":{\"87\":1}}],[\"在迭代器模式中\",{\"1\":{\"164\":1}}],[\"在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法\",{\"1\":{\"164\":1}}],[\"在原有的聚合对象中不需要再自行提供数据遍历等方法\",{\"1\":{\"164\":1}}],[\"在同一个聚合对象上可以定义多种遍历方式\",{\"1\":{\"164\":1}}],[\"在具体的工厂类中\",{\"1\":{\"231\":1}}],[\"在具体主题的内部状态发生改变时\",{\"1\":{\"149\":1}}],[\"在具体享元类中为内部状态提供了存储空间\",{\"1\":{\"110\":1}}],[\"在观察者模式中有如下角色\",{\"1\":{\"149\":1}}],[\"在现实生活中\",{\"1\":{\"136\":1}}],[\"在运行时动态选择具体要执行的行为\",{\"1\":{\"126\":1}}],[\"在面向对象程序设计过程中\",{\"1\":{\"115\":1}}],[\"在使用微信公众号时\",{\"1\":{\"150\":1}}],[\"在使用享元模式时需要维护一个存储享元对象的享元池\",{\"1\":{\"112\":1}}],[\"在使用组合模式时\",{\"1\":{\"105\":1}}],[\"在抽象语法树中每一个表达式节点类的实现方式都是相似的\",{\"1\":{\"186\":1}}],[\"在抽象类中已经实现\",{\"1\":{\"116\":1}}],[\"在抽象享元类中声明了具体享元类公共的方法\",{\"1\":{\"110\":1}}],[\"在抽象构件角色中没有声明任何用于管理成员对象的方法\",{\"1\":{\"105\":1}}],[\"在组合模式中增加新的树枝节点和叶子节点都很方便\",{\"1\":{\"106\":1}}],[\"在安全组合模式中\",{\"1\":{\"105\":1}}],[\"在树形结构中可以通过调用某个方法来遍历整个树\",{\"1\":{\"102\":1}}],[\"在两个变化维度中任意扩展一个维度\",{\"1\":{\"93\":1}}],[\"在两个类中都要声明目标对象\",{\"1\":{\"89\":1}}],[\"在一个有多种可能会变化的维度的系统中\",{\"1\":{\"91\":1}}],[\"在一定程度上降低了系统的耦合度\",{\"1\":{\"78\":1}}],[\"在接口方法数量比较多的时候\",{\"1\":{\"77\":1}}],[\"在调用次数较少的情况下\",{\"1\":{\"77\":1}}],[\"在\",{\"1\":{\"77\":2,\"86\":1,\"120\":2,\"127\":1,\"140\":1,\"153\":1,\"179\":1,\"190\":1,\"192\":2,\"224\":1,\"226\":1,\"251\":1}}],[\"在测试类中通过代理对象调用\",{\"1\":{\"75\":1}}],[\"在启动类上加上就好了\",{\"1\":{\"7\":1}}],[\"测试访问类\",{\"1\":{\"75\":1}}],[\"测试类\",{\"1\":{\"74\":1,\"75\":1,\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"93\":1,\"98\":1,\"134\":1,\"138\":1,\"140\":1,\"144\":1,\"157\":1,\"170\":1,\"178\":1,\"185\":1}}],[\"阿尔萨斯\",{\"1\":{\"75\":1}}],[\"阿里云\",{\"1\":{\"45\":1}}],[\"阿里镜像源\",{\"1\":{\"32\":1}}],[\"诊断工具\",{\"1\":{\"75\":1}}],[\"执行效率较低\",{\"1\":{\"186\":1}}],[\"执行停止动作\",{\"1\":{\"142\":1}}],[\"执行运行动作\",{\"1\":{\"142\":1}}],[\"执行开门动作\",{\"1\":{\"142\":1}}],[\"执行关门动作\",{\"1\":{\"142\":1}}],[\"执行的是代理类\",{\"1\":{\"75\":1}}],[\"执行流程如下\",{\"1\":{\"75\":1}}],[\"执行真实对象\",{\"1\":{\"75\":1}}],[\"执行步骤\",{\"1\":{\"43\":1}}],[\"先回顾一下\",{\"1\":{\"188\":1}}],[\"先执行所有request再倒序执行所有response\",{\"1\":{\"140\":2}}],[\"先来看类图\",{\"1\":{\"111\":1}}],[\"先看下面的图片\",{\"1\":{\"122\":1}}],[\"先看结构图\",{\"1\":{\"100\":1}}],[\"先看看如何使用\",{\"1\":{\"88\":1}}],[\"先说说\",{\"1\":{\"75\":1}}],[\"先选择这些\",{\"1\":{\"3\":1}}],[\"接收两个参数\",{\"1\":{\"251\":1}}],[\"接收者\",{\"1\":{\"130\":2}}],[\"接收浏览器发送过来的请求\",{\"1\":{\"100\":1}}],[\"接收请求的一方\",{\"1\":{\"54\":1}}],[\"接下来看看\",{\"1\":{\"166\":1}}],[\"接下来看它们的结构\",{\"1\":{\"88\":1}}],[\"接下来就是定义不同的形状了\",{\"1\":{\"111\":1}}],[\"接下来我们使用动态代理实现上面案例\",{\"1\":{\"75\":1}}],[\"接口就违背了接口隔离原则\",{\"1\":{\"259\":1}}],[\"接口隔离原则\",{\"0\":{\"259\":1},\"1\":{\"259\":2}}],[\"接口是上面的类图中的抽象原型类\",{\"1\":{\"233\":1}}],[\"接口是抽象商品类\",{\"1\":{\"231\":1}}],[\"接口是抽象工厂类\",{\"1\":{\"231\":1}}],[\"接口是抽象观察者\",{\"1\":{\"153\":1}}],[\"接口并实现接口中的两个功能\",{\"1\":{\"207\":1}}],[\"接口并重写了其中的抽象方法\",{\"1\":{\"166\":1}}],[\"接口定义了注册表的相关操作\",{\"1\":{\"203\":1}}],[\"接口定义了观察者模式\",{\"1\":{\"153\":1}}],[\"接口定义的功能来理解它具体的作用\",{\"1\":{\"194\":1}}],[\"接口定义\",{\"1\":{\"192\":1}}],[\"接口表示这些\",{\"1\":{\"192\":1}}],[\"接口及其子实现类\",{\"1\":{\"188\":2}}],[\"接口的子类\",{\"1\":{\"211\":1}}],[\"接口的子实现类就是具体的原型类\",{\"1\":{\"233\":1}}],[\"接口的子实现类主要有以下几个\",{\"1\":{\"195\":1}}],[\"接口的子实现类对象\",{\"1\":{\"127\":1}}],[\"接口的子实现类对象的\",{\"1\":{\"75\":1}}],[\"接口的具体迭代器对象\",{\"1\":{\"166\":1}}],[\"接口中必须要子类实现的一个方法\",{\"1\":{\"127\":1}}],[\"接口即可\",{\"1\":{\"93\":1}}],[\"接口\",{\"0\":{\"203\":1,\"206\":1,\"209\":1,\"210\":1},\"1\":{\"76\":1,\"82\":1,\"153\":2,\"192\":1,\"204\":1,\"234\":1,\"235\":1,\"257\":1}}],[\"卖票接口\",{\"1\":{\"74\":1,\"75\":1}}],[\"而粉丝和媒体公司是陌生人\",{\"1\":{\"260\":1}}],[\"而该安全门只具有防盗\",{\"1\":{\"259\":1}}],[\"而该注册中心顶层接口就是\",{\"1\":{\"195\":1}}],[\"而每个具体的皮肤\",{\"1\":{\"256\":1}}],[\"而软件中易变的细节可以从抽象派生来的实现类来进行扩展\",{\"1\":{\"256\":1}}],[\"而如果使用建造者模式\",{\"1\":{\"239\":1}}],[\"而如果电梯门是停止状态\",{\"1\":{\"142\":1}}],[\"而建造者模式注重的是部件构建的过程\",{\"1\":{\"239\":1}}],[\"而车架又有碳纤维\",{\"1\":{\"236\":1}}],[\"而无须知道其内部的具体构造细节\",{\"1\":{\"235\":1}}],[\"而进行深克隆需要使用对象流\",{\"1\":{\"234\":1}}],[\"而实现了\",{\"1\":{\"233\":1}}],[\"而单列集合获取迭代器的方法就使用到了工厂方法模式\",{\"1\":{\"231\":1}}],[\"而抽象工厂模式可生产多个等级的产品\",{\"1\":{\"229\":1}}],[\"而rolestatecaretaker\",{\"1\":{\"179\":1}}],[\"而为其他对象提供一个窄接口\",{\"1\":{\"179\":1}}],[\"而传递进行的是\",{\"1\":{\"173\":1}}],[\"而方法的调用则是根据对象的真实类型\",{\"1\":{\"173\":1}}],[\"而变量所引用的对象的真实类型又叫做变量的实际类型\",{\"1\":{\"173\":1}}],[\"而且很容易引入错误\",{\"1\":{\"237\":1}}],[\"而且克服了它的缺点\",{\"1\":{\"228\":1}}],[\"而且代码的调试过程也比较麻烦\",{\"1\":{\"186\":1}}],[\"而且要避免让这些操作的变化影响对象的结构\",{\"1\":{\"172\":1}}],[\"而且确定了这些步骤的执行顺序\",{\"1\":{\"115\":1}}],[\"而没有依赖抽象类\",{\"1\":{\"171\":1}}],[\"而这个具体的实现\",{\"1\":{\"169\":1}}],[\"而这需要耗费一定的系统资源\",{\"1\":{\"112\":1}}],[\"而各个同事类不需要做修改\",{\"1\":{\"158\":1}}],[\"而租房者从房屋中介获取房屋信息\",{\"1\":{\"157\":1}}],[\"而接收者是对程序员开放的\",{\"1\":{\"134\":1}}],[\"而具体的子实现类充当的是具体策略角色\",{\"1\":{\"127\":1}}],[\"而\",{\"1\":{\"120\":1,\"183\":1,\"193\":1}}],[\"而将不同的代码放入不同的子类中\",{\"1\":{\"118\":1}}],[\"而将算法的一些步骤延迟到子类中\",{\"1\":{\"115\":1}}],[\"而是被用于建筑领域的设计中\",{\"1\":{\"243\":1}}],[\"而是首次使用该对象时才会创建\",{\"1\":{\"222\":1}}],[\"而是\",{\"1\":{\"214\":1}}],[\"而是使用一个专门的类来管理那些不属于自己的行为\",{\"1\":{\"155\":1}}],[\"而是在树枝节点\",{\"1\":{\"105\":1}}],[\"而是提供了一个创建代理对象的静态方法\",{\"1\":{\"75\":1}}],[\"而我们自定义\",{\"1\":{\"216\":1}}],[\"而我们定义的配置文件中定义了很多\",{\"1\":{\"195\":1}}],[\"而我们知道该\",{\"1\":{\"100\":1}}],[\"而我们使用的插头如下图最右边的\",{\"1\":{\"81\":1}}],[\"而使这些子系统更加容易被访问的模式\",{\"1\":{\"96\":1}}],[\"而基金投资的收益归持有者所有\",{\"1\":{\"96\":1}}],[\"而从如上\",{\"1\":{\"86\":1}}],[\"而此时我们只需要继承该抽象类即可\",{\"1\":{\"84\":1}}],[\"而要读取\",{\"1\":{\"83\":1}}],[\"而不需要修改原代码\",{\"1\":{\"256\":1}}],[\"而不需要像静态代理那样每一个方法进行中转\",{\"1\":{\"77\":1}}],[\"而不是依赖于各个组件具体的实现类\",{\"1\":{\"258\":1}}],[\"而不是静态类型\",{\"1\":{\"173\":1}}],[\"而不是某一个巨大的条件语句块\",{\"1\":{\"145\":1}}],[\"而不知道对象的真实类型\",{\"1\":{\"173\":1}}],[\"而不暴露聚合对象的内部表示\",{\"1\":{\"161\":1}}],[\"而不再像以前那样\",{\"1\":{\"158\":1}}],[\"而不用搭理不需要或者不感兴趣的方法\",{\"1\":{\"104\":1}}],[\"而不必过多关心通信部分的细节\",{\"1\":{\"79\":1}}],[\"而动态代理不会出现该问题\",{\"1\":{\"77\":1}}],[\"而动态代理代理类则是在\",{\"1\":{\"72\":1}}],[\"而代理类是程序在运行过程中动态的在内存中生成的类\",{\"1\":{\"75\":1}}],[\"而火车站在多个地方都有代售点\",{\"1\":{\"74\":1}}],[\"坐车到火车站\",{\"1\":{\"74\":1}}],[\"例如在下左图中\",{\"1\":{\"155\":1}}],[\"例如\",{\"1\":{\"115\":1,\"136\":1,\"142\":1,\"192\":1}}],[\"例\",{\"1\":{\"74\":1,\"83\":1,\"84\":1,\"93\":1,\"98\":1,\"104\":1,\"111\":1,\"117\":1,\"124\":1,\"142\":1,\"150\":1,\"153\":1,\"157\":1,\"163\":1,\"170\":1,\"177\":1,\"185\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1}}],[\"控制调用先后次序\",{\"1\":{\"236\":1}}],[\"控制类\",{\"1\":{\"98\":1}}],[\"控制对一个对象的访问\",{\"1\":{\"79\":1}}],[\"控制或扩展真实主题的功能\",{\"1\":{\"73\":1}}],[\"控制事务\",{\"0\":{\"16\":1}}],[\"它们之间的继承关系不成立\",{\"1\":{\"257\":1}}],[\"它们是一个顶级逻辑的组成步骤\",{\"1\":{\"116\":1}}],[\"它描述了在软件设计过程中的一些不断重复发生的问题\",{\"1\":{\"244\":1}}],[\"它用于指导具体构建者如何构建产品\",{\"1\":{\"236\":1}}],[\"它包含\",{\"1\":{\"251\":1}}],[\"它包含了车架\",{\"1\":{\"236\":1}}],[\"它包含多个创建产品的方法\",{\"1\":{\"229\":1}}],[\"它\",{\"1\":{\"229\":1}}],[\"它同具体工厂之间一一对应\",{\"1\":{\"228\":1}}],[\"它提供了一种创建对象的最佳方式\",{\"1\":{\"222\":1}}],[\"它提高了代码阅读的难度\",{\"1\":{\"118\":1}}],[\"它对\",{\"1\":{\"196\":1}}],[\"它以树状的形式表现编程语言的语法结构\",{\"1\":{\"183\":1}}],[\"它会含有一组元素\",{\"1\":{\"169\":1}}],[\"它会变得复杂而庞大\",{\"1\":{\"158\":1}}],[\"它的特点是简单\",{\"1\":{\"247\":1}}],[\"它的主要目的是通过组装零配件而产生一个新产品\",{\"1\":{\"240\":1}}],[\"它的主要特点是\",{\"1\":{\"221\":1,\"246\":1}}],[\"它的语法类似于传统\",{\"1\":{\"189\":1}}],[\"它的超类是\",{\"1\":{\"189\":1}}],[\"它的方法个数理论上来讲与元素类个数\",{\"1\":{\"169\":1}}],[\"它的参数就是可以访问的元素\",{\"1\":{\"169\":1}}],[\"它实现了所有的接口\",{\"1\":{\"192\":1}}],[\"它实现了\",{\"1\":{\"166\":1}}],[\"它实现了抽象享元类\",{\"1\":{\"110\":1}}],[\"它支持以不同的方式遍历一个聚合对象\",{\"1\":{\"164\":1}}],[\"它监视目标对象的变化\",{\"1\":{\"153\":1}}],[\"它有一个\",{\"1\":{\"153\":1}}],[\"它就会推送给关注公众号的微信用户端\",{\"1\":{\"150\":1}}],[\"它定义了一个更新接口\",{\"1\":{\"149\":1}}],[\"它定义了一种一对多的依赖关系\",{\"1\":{\"148\":1}}],[\"它定义了客户程序需要的接口\",{\"1\":{\"143\":1}}],[\"它不关心处理细节和请求的传递过程\",{\"1\":{\"137\":1}}],[\"它满足\",{\"1\":{\"132\":1}}],[\"它通过对算法进行封装\",{\"1\":{\"122\":1}}],[\"它通过共享已经存在的对象来大幅度减少需要创建的对象数量\",{\"1\":{\"109\":1}}],[\"它由一个模板方法和若干个基本方法构成\",{\"1\":{\"116\":1}}],[\"它可能是存款\",{\"1\":{\"115\":1}}],[\"它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作\",{\"1\":{\"168\":1}}],[\"它可以是抽象类或接口\",{\"1\":{\"82\":1}}],[\"它可以访问备忘录里的所有信息\",{\"1\":{\"176\":1}}],[\"它可以访问\",{\"1\":{\"73\":1}}],[\"它涉及算法与对象间职责的分配\",{\"1\":{\"113\":1}}],[\"它让客户端忽略了层次的差异\",{\"1\":{\"106\":1}}],[\"它创建了对象组的树形结构\",{\"1\":{\"102\":1}}],[\"它始终希望能够一致的对待容器对象和叶子对象\",{\"1\":{\"102\":1}}],[\"它还有一个子接口\",{\"1\":{\"100\":1}}],[\"它将投资者分散的资金集中起来\",{\"1\":{\"96\":1}}],[\"它是一个长宽相等的长方形\",{\"1\":{\"257\":1}}],[\"它是一个转换器\",{\"1\":{\"82\":1}}],[\"它是解决特定问题的一系列套路\",{\"1\":{\"244\":1}}],[\"它是可被复制的对象\",{\"1\":{\"232\":1}}],[\"它是中介者的接口\",{\"1\":{\"156\":1}}],[\"它是用组合关系代替继承关系来实现\",{\"1\":{\"91\":1}}],[\"它是被访问和适配的现存组件库中的组件接口\",{\"1\":{\"82\":1}}],[\"它为没有实现接口的类提供代理\",{\"1\":{\"76\":1}}],[\"它分为类结构型模式和对象结构型模式\",{\"1\":{\"70\":1}}],[\"其组合就很多\",{\"1\":{\"261\":1}}],[\"其次才考虑使用继承关系来实现\",{\"1\":{\"261\":1}}],[\"其目的是降低类之间的耦合度\",{\"1\":{\"260\":1}}],[\"其含义是\",{\"1\":{\"260\":1}}],[\"其产品的各个部分经常面临着剧烈的变化\",{\"1\":{\"236\":1}}],[\"其继承体系如下图所示\",{\"1\":{\"193\":1}}],[\"其相互关系如下图所示\",{\"1\":{\"192\":1}}],[\"其意义是指\",{\"1\":{\"169\":1}}],[\"其中拿铁咖啡\",{\"1\":{\"229\":1}}],[\"其中\",{\"1\":{\"192\":1}}],[\"其中一个方面依赖于另一方面时\",{\"1\":{\"152\":1}}],[\"其中取号\",{\"1\":{\"115\":1}}],[\"其子类可以进行覆盖也可以直接继承\",{\"1\":{\"116\":1}}],[\"其下再无分支\",{\"1\":{\"103\":1}}],[\"其实基金就是个好帮手\",{\"1\":{\"96\":1}}],[\"其实就是使用到了适配器模式\",{\"1\":{\"81\":1}}],[\"其他都相同\",{\"1\":{\"233\":1}}],[\"其他对象都不能够访问这些状态信息\",{\"1\":{\"180\":1}}],[\"其他人喂食狗\",{\"1\":{\"170\":1}}],[\"其他人喂食猫\",{\"1\":{\"170\":1}}],[\"其他人\",{\"1\":{\"170\":1}}],[\"其他人也可以喂食\",{\"1\":{\"170\":1}}],[\"其他的全部属于对象行为型模式\",{\"1\":{\"113\":1}}],[\"其他类不需要发生变化\",{\"1\":{\"93\":1}}],[\"其他时区以此类推\",{\"1\":{\"32\":1}}],[\"其内部含有对真实主题的引用\",{\"1\":{\"73\":1}}],[\"提拉米苏\",{\"1\":{\"229\":1}}],[\"提拉米苏工厂\",{\"1\":{\"229\":1}}],[\"提取出规则\",{\"1\":{\"183\":1}}],[\"提取到不同的状态对象中\",{\"1\":{\"142\":1}}],[\"提交申请\",{\"1\":{\"138\":1}}],[\"提交请假条\",{\"1\":{\"138\":1}}],[\"提高模块的相对独立性\",{\"1\":{\"260\":1}}],[\"提高代码复用性\",{\"1\":{\"118\":1}}],[\"提高了程序的可维护性\",{\"1\":{\"96\":1}}],[\"提高了写数据的效率\",{\"1\":{\"88\":1}}],[\"提供产品的实例\",{\"1\":{\"235\":1}}],[\"提供对应的加法和减法的工具方法\",{\"1\":{\"183\":1}}],[\"提供保存与获取备忘录的功能\",{\"1\":{\"176\":1}}],[\"提供创建备忘录和恢复备忘录数据的功能\",{\"1\":{\"176\":1}}],[\"提供接受访问方法的具体实现\",{\"1\":{\"169\":1}}],[\"提供一个对象来顺序访问聚合对象中的一系列数据\",{\"1\":{\"161\":1}}],[\"提供同事对象交互的抽象方法\",{\"1\":{\"156\":1}}],[\"提供具体的算法实现或行为\",{\"1\":{\"123\":1}}],[\"提供系统性能\",{\"1\":{\"112\":1}}],[\"提供了创建产品的接口\",{\"1\":{\"228\":1,\"229\":1}}],[\"提供了创建产品的方法\",{\"1\":{\"227\":1}}],[\"提供了许多\",{\"1\":{\"192\":1}}],[\"提供了一种可以恢复状态的机制\",{\"1\":{\"180\":1}}],[\"提供了一个工厂类\",{\"1\":{\"111\":1}}],[\"提供了同事对象注册与转发同事对象信息的抽象方法\",{\"1\":{\"156\":1}}],[\"提供了\",{\"1\":{\"150\":1}}],[\"提供了与真实主题相同的接口\",{\"1\":{\"73\":1}}],[\"提供的动态代理\",{\"1\":{\"75\":1}}],[\"提示有缓存\",{\"1\":{\"63\":1}}],[\"提示\",{\"1\":{\"15\":1,\"22\":1,\"63\":2}}],[\"类依赖抽象\",{\"1\":{\"258\":1}}],[\"类实现\",{\"1\":{\"257\":1}}],[\"类之间的继承关系违反了里氏代换原则\",{\"1\":{\"257\":1}}],[\"类与类之间关系的表示方式\",{\"0\":{\"252\":1}}],[\"类定义了三个方法\",{\"1\":{\"251\":1}}],[\"类定义使用到了迭代器模式\",{\"1\":{\"214\":1}}],[\"类图中表示可见性的符号有三种\",{\"1\":{\"251\":1}}],[\"类图中\",{\"1\":{\"251\":1}}],[\"类图表示法\",{\"0\":{\"250\":1}}],[\"类图是系统分析和设计阶段的重要产物\",{\"1\":{\"249\":1}}],[\"类图是一种静态的结构图\",{\"1\":{\"249\":1}}],[\"类图是面向对象建模的主要组成部分\",{\"1\":{\"248\":1}}],[\"类图的作用\",{\"0\":{\"249\":1}}],[\"类图不显示暂时性的信息\",{\"1\":{\"248\":1}}],[\"类图概述\",{\"0\":{\"248\":1}}],[\"类图\",{\"1\":{\"247\":1,\"248\":1}}],[\"类图如下\",{\"1\":{\"74\":1,\"83\":1,\"84\":1,\"86\":1,\"93\":1,\"98\":1,\"117\":1,\"124\":1,\"131\":1,\"138\":1,\"142\":1,\"144\":1,\"150\":1,\"157\":1,\"170\":1,\"178\":1,\"179\":1,\"229\":1,\"236\":1,\"259\":1,\"261\":1}}],[\"类必须实现\",{\"1\":{\"234\":1}}],[\"类似\",{\"1\":{\"230\":1}}],[\"类似于\",{\"1\":{\"76\":1}}],[\"类使用包含类名\",{\"1\":{\"251\":1}}],[\"类使用的是饿汉式\",{\"1\":{\"225\":1}}],[\"类使用了享元模式\",{\"1\":{\"113\":1}}],[\"类加载不会导致该单实例对象被创建\",{\"1\":{\"222\":1}}],[\"类加载就会导致该单实例对象被创建\",{\"1\":{\"222\":1}}],[\"类加载器\",{\"1\":{\"75\":1}}],[\"类是专门用来解析\",{\"1\":{\"207\":1}}],[\"类是抽象目标类\",{\"1\":{\"153\":1}}],[\"类用来封装\",{\"1\":{\"201\":1}}],[\"类看到的是\",{\"1\":{\"179\":1}}],[\"类和\",{\"1\":{\"153\":1,\"234\":1,\"257\":2}}],[\"类的表示方式\",{\"0\":{\"251\":1}}],[\"类的属性和类之间的关系\",{\"1\":{\"249\":1}}],[\"类的内部结构以及它们与其他类的关系等\",{\"1\":{\"248\":1}}],[\"类的个数将会急剧增加\",{\"1\":{\"186\":1}}],[\"类的\",{\"1\":{\"127\":2,\"234\":1}}],[\"类的同名方法的调用封装\",{\"1\":{\"86\":1}}],[\"类中提供了\",{\"1\":{\"233\":1}}],[\"类中添加\",{\"1\":{\"224\":1}}],[\"类中的\",{\"1\":{\"214\":1,\"227\":1,\"231\":3}}],[\"类中有多个重载的方法\",{\"1\":{\"173\":1}}],[\"类中有一个\",{\"1\":{\"127\":1}}],[\"类中定义了多个\",{\"1\":{\"120\":1}}],[\"类中声明并实现这些方法\",{\"1\":{\"105\":1}}],[\"类型的属性\",{\"1\":{\"234\":1}}],[\"类型的对象创建交由子类实现\",{\"1\":{\"211\":1}}],[\"类型的变量\",{\"1\":{\"211\":1}}],[\"类型的变量调用的方法\",{\"1\":{\"173\":1}}],[\"类型的变量赋值基本数据类型数据的操作底层使用的是\",{\"1\":{\"113\":1}}],[\"类型的内部标志\",{\"1\":{\"153\":1}}],[\"类型\",{\"1\":{\"116\":1,\"251\":1}}],[\"类等\",{\"1\":{\"111\":1}}],[\"类具有添加菜单\",{\"1\":{\"104\":1}}],[\"类已经实现了除了\",{\"1\":{\"104\":1}}],[\"类可以包含子菜单\",{\"1\":{\"104\":1}}],[\"类就是使用的单例设计模式\",{\"1\":{\"225\":1}}],[\"类就使用了模板方法模式\",{\"1\":{\"120\":1}}],[\"类就使用了外观模式\",{\"1\":{\"100\":1}}],[\"类就可以只覆盖自己感兴趣的方法\",{\"1\":{\"104\":1}}],[\"类结构图如下\",{\"1\":{\"86\":1}}],[\"类适配器是客户类有一个接口规范的情况下可用\",{\"1\":{\"83\":1}}],[\"类适配器模式的代码\",{\"1\":{\"84\":1}}],[\"类适配器模式违背了合成复用原则\",{\"1\":{\"83\":1}}],[\"类适配器模式\",{\"0\":{\"83\":1}}],[\"类对象\",{\"1\":{\"74\":1,\"86\":1}}],[\"类\",{\"0\":{\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"204\":1,\"207\":1,\"211\":1,\"212\":1,\"225\":1},\"1\":{\"73\":3,\"76\":1,\"82\":2,\"87\":1,\"100\":1,\"111\":2,\"123\":3,\"153\":2,\"188\":1,\"200\":1,\"236\":1,\"251\":1,\"258\":1}}],[\"中括号中的内容表示是可选的\",{\"1\":{\"251\":1}}],[\"中描述了一些常见的建筑设计问题\",{\"1\":{\"243\":1}}],[\"中最简单的设计模式之一\",{\"1\":{\"222\":1}}],[\"中有许多\",{\"1\":{\"192\":1}}],[\"中没有\",{\"1\":{\"190\":1}}],[\"中处于核心地位\",{\"1\":{\"190\":1}}],[\"中介者\",{\"1\":{\"246\":1}}],[\"中介者的职责将很大\",{\"1\":{\"158\":1}}],[\"中介者对象和同事对象的关系通常变成双向的一对一\",{\"1\":{\"158\":1}}],[\"中介者模式通过把多个同事对象之间的交互封装到中介者对象里面\",{\"1\":{\"158\":1}}],[\"中介者模式包含以下主要角色\",{\"1\":{\"156\":1}}],[\"中介者模式\",{\"0\":{\"154\":1},\"1\":{\"113\":1}}],[\"中介结构要知道房主和租房者\",{\"1\":{\"157\":1}}],[\"中介机构\",{\"1\":{\"157\":1}}],[\"中\",{\"1\":{\"153\":1,\"190\":1,\"192\":1,\"194\":1,\"226\":1,\"236\":1}}],[\"中提供的实现\",{\"0\":{\"153\":1}}],[\"中提供了一个动态代理类\",{\"1\":{\"75\":1}}],[\"中秋节\",{\"1\":{\"124\":1}}],[\"中被下转为\",{\"1\":{\"100\":1}}],[\"中的引用类型的属性进行引用的复制\",{\"1\":{\"234\":1}}],[\"中的后退键\",{\"1\":{\"175\":1}}],[\"中的策略模式\",{\"1\":{\"127\":1}}],[\"中的实现类关系结构中可以看出\",{\"1\":{\"86\":1}}],[\"中的内容\",{\"1\":{\"86\":1}}],[\"中的\",{\"1\":{\"75\":3,\"188\":1,\"233\":1}}],[\"中的代理按照代理类生成时机不同又分为静态代理和动态代理\",{\"1\":{\"72\":1}}],[\"中间表\",{\"1\":{\"5\":1}}],[\"概述\",{\"0\":{\"72\":1,\"81\":1,\"91\":1,\"96\":1,\"102\":1,\"109\":1,\"115\":1,\"122\":1,\"129\":1,\"136\":1,\"142\":1,\"148\":1,\"155\":1,\"161\":1,\"168\":1,\"175\":1,\"183\":1,\"190\":1,\"243\":1},\"1\":{\"86\":1}}],[\"组装电脑\",{\"1\":{\"258\":1}}],[\"组合等\",{\"1\":{\"246\":1}}],[\"组合键\",{\"1\":{\"181\":1}}],[\"组合键时能撤销当前操作\",{\"1\":{\"175\":1}}],[\"组合树枝节点和叶子节点形成一个树形结构\",{\"1\":{\"103\":1}}],[\"组合模式正是应树形结构而生\",{\"1\":{\"107\":1}}],[\"组合模式为树形结构的面向对象实现提供了一种灵活的解决方案\",{\"1\":{\"106\":1}}],[\"组合模式可以清楚地定义分层次的复杂对象\",{\"1\":{\"106\":1}}],[\"组合模式的分类\",{\"0\":{\"105\":1}}],[\"组合模式主要包含三种角色\",{\"1\":{\"103\":1}}],[\"组合模式依据树形结构来组合对象\",{\"1\":{\"102\":1}}],[\"组合模式\",{\"0\":{\"101\":1},\"1\":{\"70\":1}}],[\"组件\",{\"0\":{\"67\":1},\"1\":{\"189\":1}}],[\"外部状态\",{\"1\":{\"110\":2}}],[\"外部应用程序不用关心内部子系统的具体的细节\",{\"1\":{\"96\":1}}],[\"外观\",{\"1\":{\"96\":1,\"97\":2,\"246\":1}}],[\"外观模式可以为系统设计一个简单的接口供外界访问\",{\"1\":{\"99\":1}}],[\"外观模式\",{\"0\":{\"95\":1},\"1\":{\"70\":1}}],[\"外汇等领域\",{\"1\":{\"96\":1}}],[\"外网不能访问虚拟机\",{\"1\":{\"22\":1}}],[\"种图\",{\"1\":{\"247\":1}}],[\"种结构型模式\",{\"1\":{\"246\":1}}],[\"种创建型模式\",{\"1\":{\"246\":1}}],[\"种关于对城镇\",{\"1\":{\"243\":1}}],[\"种类\",{\"1\":{\"229\":1}}],[\"种行为型模式\",{\"1\":{\"113\":1,\"246\":1}}],[\"种\",{\"1\":{\"70\":1}}],[\"合成复用原则\",{\"0\":{\"261\":1},\"1\":{\"70\":1,\"113\":1,\"261\":2}}],[\"设为\",{\"1\":{\"179\":1}}],[\"设计实现加减法的软件\",{\"1\":{\"185\":1}}],[\"设计一个咖啡类\",{\"1\":{\"226\":1}}],[\"设计一个咖啡店点餐系统\",{\"1\":{\"226\":1}}],[\"设计一个软件用来进行加减计算\",{\"1\":{\"183\":1}}],[\"设计一个系统时知道了算法所需的关键步骤\",{\"1\":{\"115\":1}}],[\"设计也更加抽象\",{\"1\":{\"118\":1}}],[\"设计模式分类\",{\"0\":{\"246\":1}}],[\"设计模式的本质是面向对象设计原则的实际运用\",{\"1\":{\"245\":1}}],[\"设计模式\",{\"0\":{\"70\":1,\"219\":1},\"1\":{\"243\":2}}],[\"设置电梯的状态\",{\"1\":{\"142\":1}}],[\"设置上级领导\",{\"1\":{\"138\":1}}],[\"设置请假天数范围\",{\"1\":{\"138\":2}}],[\"设置回调函数\",{\"1\":{\"76\":1}}],[\"设置父类的字节码对象\",{\"1\":{\"76\":1}}],[\"设置父包名\",{\"1\":{\"6\":1,\"14\":1}}],[\"设置阿里云镜像加速\",{\"1\":{\"45\":1}}],[\"设置镜像仓库\",{\"1\":{\"45\":1}}],[\"设置环境变量\",{\"1\":{\"33\":1}}],[\"设置hostname\",{\"1\":{\"32\":2}}],[\"设置时区\",{\"1\":{\"32\":1}}],[\"设置过滤表前缀\",{\"1\":{\"6\":1,\"14\":1}}],[\"设置需要生成的表名\",{\"1\":{\"6\":1,\"14\":1}}],[\"设置mapperxml生成路径\",{\"1\":{\"6\":1,\"14\":1}}],[\"前面介绍的工厂方法模式中考虑的是一类产品的生产\",{\"1\":{\"229\":1}}],[\"前面的\",{\"1\":{\"60\":1}}],[\"前和后一定会不一样的\",{\"1\":{\"177\":1}}],[\"前置处理\",{\"1\":{\"140\":2}}],[\"前者采用继承机制来在类间分派行为\",{\"1\":{\"113\":1}}],[\"前者采用继承机制来组织接口和类\",{\"1\":{\"70\":1}}],[\"前者类之间的耦合度比后者高\",{\"1\":{\"81\":1}}],[\"前端\",{\"2\":{\"68\":1}}],[\"销毁凭证\",{\"1\":{\"63\":1}}],[\"输入\",{\"1\":{\"63\":2}}],[\"输入密码\",{\"1\":{\"59\":1,\"60\":1,\"62\":1}}],[\"登入shell\",{\"1\":{\"63\":2}}],[\"登入阿里云控制台查看\",{\"1\":{\"45\":1}}],[\"认证\",{\"1\":{\"63\":1}}],[\"代售点\",{\"1\":{\"74\":1}}],[\"代售点是代理对象\",{\"1\":{\"74\":1}}],[\"代码会一直运行下去\",{\"1\":{\"257\":1}}],[\"代码就会停止\",{\"1\":{\"257\":1}}],[\"代码编制更加工程化\",{\"1\":{\"245\":1}}],[\"代码设计经验的总结\",{\"1\":{\"244\":1}}],[\"代码可读性会非常差\",{\"1\":{\"237\":1}}],[\"代码运行结果如下\",{\"1\":{\"188\":1}}],[\"代码实现\",{\"1\":{\"104\":1}}],[\"代码如下\",{\"1\":{\"74\":1,\"75\":1,\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"93\":1,\"98\":1,\"111\":1,\"113\":1,\"117\":1,\"124\":1,\"127\":1,\"131\":1,\"138\":1,\"142\":1,\"144\":1,\"150\":1,\"153\":1,\"157\":1,\"163\":1,\"170\":1,\"178\":1,\"179\":1,\"185\":1,\"233\":1,\"234\":2}}],[\"代码生成模板文件\",{\"1\":{\"14\":1}}],[\"代码生成结果\",{\"1\":{\"6\":1}}],[\"代码生成工具需要的模板引擎\",{\"1\":{\"4\":1}}],[\"代码生成工具\",{\"1\":{\"4\":1}}],[\"代理使用到了策略模式\",{\"1\":{\"214\":1}}],[\"代理或者\",{\"1\":{\"214\":1}}],[\"代理服务器再把它转给你的浏览器\",{\"1\":{\"79\":1}}],[\"代理效率低一点\",{\"1\":{\"77\":1}}],[\"代理效率\",{\"1\":{\"77\":1}}],[\"代理效率高于\",{\"1\":{\"77\":2}}],[\"代理是无法使用了\",{\"1\":{\"76\":1}}],[\"代理实现\",{\"1\":{\"76\":1}}],[\"代理类\",{\"1\":{\"75\":3}}],[\"代理对象可以扩展目标对象的功能\",{\"1\":{\"78\":1}}],[\"代理对象中的方法的\",{\"1\":{\"76\":1}}],[\"代理对象调用接口方法时传递的实际参数\",{\"1\":{\"75\":1}}],[\"代理对象\",{\"1\":{\"75\":1,\"76\":1}}],[\"代理对象的调用处理程序\",{\"1\":{\"75\":1}}],[\"代理对象作为访问对象和目标对象之间的中介\",{\"1\":{\"72\":1}}],[\"代理工厂类\",{\"1\":{\"75\":1}}],[\"代理工厂\",{\"1\":{\"75\":1,\"76\":1}}],[\"代理点收取一些服务费用\",{\"1\":{\"74\":2,\"75\":2,\"76\":1}}],[\"代理\",{\"1\":{\"73\":2,\"77\":3,\"79\":3}}],[\"代理两种\",{\"1\":{\"72\":1}}],[\"代理和装饰者的区别\",{\"0\":{\"89\":1}}],[\"代理和\",{\"1\":{\"72\":1,\"77\":1}}],[\"代理模式能将客户端与目标对象分离\",{\"1\":{\"78\":1}}],[\"代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用\",{\"1\":{\"78\":1}}],[\"代理模式真实对象和代理对象实现相同的接口\",{\"1\":{\"75\":1}}],[\"代理模式\",{\"0\":{\"71\":1},\"1\":{\"70\":1}}],[\"代表所有权限\",{\"1\":{\"60\":1}}],[\"代表所有主体\",{\"1\":{\"60\":1}}],[\"替换内容\",{\"1\":{\"60\":1}}],[\"实现的细节也依赖于抽象\",{\"1\":{\"258\":1}}],[\"实现一个热插拔的效果\",{\"1\":{\"256\":1}}],[\"实现\",{\"0\":{\"233\":1},\"1\":{\"235\":1}}],[\"实现类的耦合\",{\"1\":{\"227\":1}}],[\"实现或者继承抽象产品的子类\",{\"1\":{\"227\":1}}],[\"实现文法较为容易\",{\"1\":{\"186\":1}}],[\"实现双重接口的办法就是将备忘录类设计成发起人类的内部成员类\",{\"1\":{\"179\":1}}],[\"实现其他业务功能\",{\"1\":{\"176\":1}}],[\"实现所有相互影响的同事类的公共功能\",{\"1\":{\"156\":1}}],[\"实现所有方法\",{\"1\":{\"84\":1}}],[\"实现命令的撤销与恢复\",{\"1\":{\"132\":1}}],[\"实现命令接口\",{\"1\":{\"130\":1}}],[\"实现者\",{\"1\":{\"130\":1}}],[\"实现降序排序\",{\"1\":{\"127\":1}}],[\"实现子类对父类的反向控制\",{\"1\":{\"119\":1}}],[\"实现系统的部分功能\",{\"1\":{\"97\":1}}],[\"实现细节对客户透明\",{\"1\":{\"93\":1}}],[\"实现化\",{\"1\":{\"92\":1}}],[\"实现父类中的业务方法\",{\"1\":{\"92\":1}}],[\"实现抽象原型类的\",{\"1\":{\"232\":1}}],[\"实现抽象迭代器接口中所定义的方法\",{\"1\":{\"162\":1}}],[\"实现抽象聚合类\",{\"1\":{\"162\":1}}],[\"实现抽象观察者定义的更新接口\",{\"1\":{\"149\":1}}],[\"实现抽象状态所对应的行为\",{\"1\":{\"143\":1}}],[\"实现抽象处理者的处理方法\",{\"1\":{\"137\":1}}],[\"实现抽象类中所定义的抽象方法和钩子方法\",{\"1\":{\"116\":1}}],[\"实现抽象装饰的相关方法\",{\"1\":{\"86\":1}}],[\"实现抽象构件\",{\"1\":{\"86\":1}}],[\"实现中是以\",{\"1\":{\"193\":1}}],[\"实现中介者接口\",{\"1\":{\"156\":1}}],[\"实现中\",{\"1\":{\"86\":1}}],[\"实现方式\",{\"1\":{\"83\":1,\"84\":1}}],[\"实现动态代理\",{\"1\":{\"77\":1}}],[\"实现了更好的复用\",{\"1\":{\"235\":1}}],[\"实现了内部状态的封装\",{\"1\":{\"180\":1}}],[\"实现了抽象产品角色所定义的接口\",{\"1\":{\"228\":1,\"229\":1}}],[\"实现了抽象策略定义的接口\",{\"1\":{\"123\":1}}],[\"实现了抽象主题中的具体业务\",{\"1\":{\"73\":1}}],[\"实现了反向控制\",{\"1\":{\"118\":2}}],[\"实现了\",{\"1\":{\"75\":1}}],[\"实际类型是\",{\"1\":{\"173\":1}}],[\"实际的方法实现是对\",{\"1\":{\"86\":1}}],[\"实际参数\",{\"1\":{\"76\":1}}],[\"实际占用为准\",{\"1\":{\"22\":1}}],[\"实例化后会自动对所有的单实例\",{\"1\":{\"189\":1}}],[\"实例密码\",{\"1\":{\"63\":1}}],[\"实例\",{\"0\":{\"60\":1,\"62\":1},\"1\":{\"63\":2,\"75\":1,\"76\":2}}],[\"禁止使用udp\",{\"1\":{\"58\":1}}],[\"票据存在时间\",{\"1\":{\"58\":1}}],[\"编程能力和设计能力\",{\"1\":{\"245\":1}}],[\"编译器在编译时期并不总是知道哪些代码会被执行\",{\"1\":{\"173\":1}}],[\"编辑配置文件\",{\"0\":{\"56\":1}}],[\"编写配置文件\",{\"1\":{\"188\":1}}],[\"编写切面类\",{\"1\":{\"16\":1}}],[\"编写全局处理异常类\",{\"0\":{\"12\":1}}],[\"编写\",{\"0\":{\"11\":1,\"13\":1,\"47\":1}}],[\"编写统一响应对象\",{\"0\":{\"10\":1}}],[\"密钥分发中心\",{\"1\":{\"54\":1}}],[\"密码\",{\"0\":{\"28\":1}}],[\"安全门案例\",{\"1\":{\"259\":1}}],[\"安全组合模式的缺点是不够透明\",{\"1\":{\"105\":1}}],[\"安全组合模式\",{\"1\":{\"105\":1}}],[\"安全的识别访问者\",{\"1\":{\"54\":1}}],[\"安装spark\",{\"1\":{\"47\":1}}],[\"安装hive\",{\"1\":{\"47\":1}}],[\"安装hadoop\",{\"1\":{\"47\":1}}],[\"安装jdk\",{\"1\":{\"47\":1}}],[\"安装docker引擎\",{\"1\":{\"45\":1}}],[\"安装vim\",{\"1\":{\"32\":1}}],[\"安装系统\",{\"1\":{\"22\":1}}],[\"安装\",{\"0\":{\"20\":1,\"33\":1,\"45\":1,\"55\":1},\"1\":{\"20\":1}}],[\"帮助我们高效\",{\"1\":{\"54\":1}}],[\"主要是实现抽象工厂中的多个抽象方法\",{\"1\":{\"229\":1}}],[\"主要是实现抽象工厂中的抽象方法\",{\"1\":{\"228\":1}}],[\"主要是为了区分在\",{\"1\":{\"192\":1}}],[\"主要完成以下功能\",{\"1\":{\"212\":1}}],[\"主要包含\",{\"1\":{\"201\":1}}],[\"主要包含解释方法\",{\"1\":{\"184\":1}}],[\"主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树\",{\"1\":{\"184\":1}}],[\"主要用来做网络通讯中的身份认证\",{\"1\":{\"54\":1}}],[\"主人喂食狗\",{\"1\":{\"170\":1}}],[\"主人喂食猫\",{\"1\":{\"170\":1}}],[\"主人和其他人\",{\"1\":{\"170\":1}}],[\"主人家\",{\"1\":{\"170\":1}}],[\"主人\",{\"1\":{\"170\":1}}],[\"主人可以喂\",{\"1\":{\"170\":1}}],[\"主键\",{\"1\":{\"5\":1}}],[\"🏠\",{\"1\":{\"221\":1}}],[\"🏆\",{\"1\":{\"54\":1}}],[\"🎉\",{\"1\":{\"38\":1}}],[\"进行了很深入的封装\",{\"1\":{\"216\":1}}],[\"进行配置文件加载并进行对象创建\",{\"1\":{\"210\":1}}],[\"进行初始化\",{\"1\":{\"192\":1}}],[\"进行交互\",{\"1\":{\"189\":1}}],[\"进行实例化与依赖关系的装配\",{\"1\":{\"189\":2}}],[\"进行管理\",{\"1\":{\"188\":1}}],[\"进行相应的工作\",{\"1\":{\"153\":1}}],[\"进行开发\",{\"1\":{\"122\":2}}],[\"进行封装\",{\"1\":{\"86\":1}}],[\"进行快速开发\",{\"1\":{\"0\":1}}],[\"进入目录\",{\"1\":{\"50\":1}}],[\"^==>\",{\"1\":{\"49\":3}}],[\"暴露端口\",{\"1\":{\"47\":1}}],[\"拷贝配置文件\",{\"1\":{\"47\":1}}],[\"工厂方法\",{\"1\":{\"246\":1}}],[\"工厂方法使一个产品类的实例化延迟到其工厂的子类\",{\"1\":{\"228\":1}}],[\"工厂方法模式注重的是整体对象的创建方式\",{\"1\":{\"239\":1}}],[\"工厂方法模式只生产一个等级的产品\",{\"1\":{\"229\":1}}],[\"工厂方法模式只考虑生产同等级的产品\",{\"1\":{\"229\":1}}],[\"工厂方法模式保持了简单工厂模式的优点\",{\"1\":{\"228\":1}}],[\"工厂方法模式是简单工厂模式的进一步抽象\",{\"1\":{\"228\":1}}],[\"工厂方法模式类图\",{\"1\":{\"228\":1}}],[\"工厂方法模式的主要角色\",{\"1\":{\"228\":1}}],[\"工厂方法模式\",{\"0\":{\"228\":1,\"239\":1}}],[\"工厂类的客户端可能有很多\",{\"1\":{\"227\":1}}],[\"工厂对象和商品对象的耦合\",{\"1\":{\"227\":1}}],[\"工厂对象的耦合\",{\"1\":{\"227\":1}}],[\"工厂模式最大的优点就是\",{\"1\":{\"226\":1}}],[\"工厂模式\",{\"0\":{\"226\":1},\"1\":{\"214\":1}}],[\"工厂\",{\"1\":{\"192\":1,\"227\":1}}],[\"工作目录\",{\"1\":{\"47\":1}}],[\"工具连接虚拟机\",{\"0\":{\"31\":1}}],[\"│\",{\"1\":{\"46\":7}}],[\"└──\",{\"1\":{\"46\":3}}],[\"├──\",{\"1\":{\"46\":14}}],[\"貌似每个人都不一样\",{\"1\":{\"45\":1}}],[\"所暴露出来的接口\",{\"1\":{\"179\":1}}],[\"所谓双分派技术就是在选择一个方法的时候\",{\"1\":{\"173\":1}}],[\"所有\",{\"1\":{\"226\":1}}],[\"所有状态信息都保存在备忘录中\",{\"1\":{\"180\":1}}],[\"所有的接口\",{\"1\":{\"179\":1}}],[\"所有注册的观察者都会收到信息\",{\"1\":{\"151\":1}}],[\"所有代理类也需要实现此方法\",{\"1\":{\"77\":1}}],[\"所以适合使用迪米特法则\",{\"1\":{\"260\":1}}],[\"所以许多日常事务由经纪人负责处理\",{\"1\":{\"260\":1}}],[\"所以它是满足开闭原则的\",{\"1\":{\"256\":1}}],[\"所以它通常在以下场合使用\",{\"1\":{\"236\":1}}],[\"所以这个案例可以使用抽象工厂模式实现\",{\"1\":{\"229\":1}}],[\"所以说\",{\"1\":{\"226\":1}}],[\"所以给该容器提供一个遍历方式\",{\"1\":{\"214\":1}}],[\"所以该类也是非延时加载\",{\"1\":{\"211\":1}}],[\"所以再定义一个\",{\"1\":{\"200\":1}}],[\"所以重载就是动态的了\",{\"1\":{\"173\":1}}],[\"所以是动态分派\",{\"1\":{\"173\":1}}],[\"所以不能保证它一定会被处理\",{\"1\":{\"139\":1}}],[\"所以在该接口中定义\",{\"1\":{\"210\":1}}],[\"所以在调用\",{\"1\":{\"127\":1}}],[\"所以在此处重点看的方法是带三个参数的方法\",{\"1\":{\"120\":1}}],[\"所以\",{\"1\":{\"127\":1,\"257\":1}}],[\"所以使它们之间可以自由切换\",{\"1\":{\"125\":1}}],[\"所以直接实现\",{\"1\":{\"117\":2}}],[\"所以对象行为模式比类行为模式具有更大的灵活性\",{\"1\":{\"113\":1}}],[\"所以对象结构型模式比类结构型模式具有更大的灵活性\",{\"1\":{\"70\":1}}],[\"所以只需要看该方法即可\",{\"1\":{\"113\":1}}],[\"所以可以使用单例模式\",{\"1\":{\"111\":1}}],[\"所以组合模式的使用场景就是出现树形结构的地方\",{\"1\":{\"107\":1}}],[\"所以添加菜单\",{\"1\":{\"104\":1}}],[\"所以小明给爷爷买了智能音箱\",{\"1\":{\"98\":1}}],[\"所以应用相对较少些\",{\"1\":{\"81\":1}}],[\"所以就有一个问题\",{\"1\":{\"195\":1}}],[\"所以就需要一个插座转换器\",{\"1\":{\"81\":1}}],[\"所以就可以确定了\",{\"1\":{\"4\":1}}],[\"所以如果有接口使用\",{\"1\":{\"77\":1}}],[\"所以需要在该类中定义一个\",{\"1\":{\"211\":1}}],[\"所以需要让其实现\",{\"1\":{\"153\":1}}],[\"所以需要继承\",{\"1\":{\"153\":1}}],[\"所以需要引入\",{\"1\":{\"76\":1}}],[\"所以需要实现selltickets接口\",{\"1\":{\"74\":1,\"75\":1}}],[\"所需安装包\",{\"1\":{\"45\":1}}],[\"尝试构建自己的镜像\",{\"0\":{\"44\":1}}],[\"只和你的直接朋友交谈\",{\"1\":{\"260\":1}}],[\"只能是\",{\"1\":{\"258\":1}}],[\"只能创建一个实例的类\",{\"1\":{\"222\":1}}],[\"只关心什么产品由什么工厂生产即可\",{\"1\":{\"240\":1}}],[\"只负责保证对象各部分完整创建或按某种顺序创建\",{\"1\":{\"235\":1}}],[\"只创建了一个对象\",{\"1\":{\"214\":1}}],[\"只会影响的类本身\",{\"1\":{\"155\":1}}],[\"只需要根据需求重新派生一个实现类来扩展就可以了\",{\"1\":{\"256\":1}}],[\"只需要再加一个对应的工厂类即可\",{\"1\":{\"229\":1}}],[\"只需要修改中介者对象就可以了\",{\"1\":{\"158\":1}}],[\"只需要改变对象状态即可改变对象的行为\",{\"1\":{\"145\":1}}],[\"只需要定义一个统一的执行方法\",{\"1\":{\"131\":1}}],[\"只要抽象不变\",{\"1\":{\"258\":1}}],[\"只要抽象的合理\",{\"1\":{\"256\":1}}],[\"只要让我们自己定义的容器类实现java\",{\"1\":{\"166\":1}}],[\"只要实现它们的子类就可以编写观察者模式实例\",{\"1\":{\"153\":1}}],[\"只要它能够实现命令要求实现的相应功能\",{\"1\":{\"130\":1}}],[\"只要是\",{\"1\":{\"16\":1}}],[\"只用了\",{\"1\":{\"127\":1}}],[\"只暴露给本地服务一个接口\",{\"1\":{\"79\":1}}],[\"只有这些配置都有了\",{\"1\":{\"258\":1}}],[\"只有当\",{\"1\":{\"189\":1}}],[\"只有当进行大量调用的时候\",{\"1\":{\"77\":1}}],[\"只有开门状态可以关闭电梯门\",{\"1\":{\"142\":1}}],[\"只有在\",{\"1\":{\"43\":1}}],[\"只定义了\",{\"1\":{\"76\":1}}],[\"zzzz\",{\"1\":{\"66\":1}}],[\"zoneinfo\",{\"1\":{\"47\":1}}],[\"zhouwen\",{\"1\":{\"42\":1,\"43\":6,\"86\":1}}],[\"zxvf\",{\"1\":{\"33\":1}}],[\"就会看到正方形的宽度和长度都在不断增长\",{\"1\":{\"257\":1}}],[\"就会看到长方形宽度逐渐增长的效果\",{\"1\":{\"257\":1}}],[\"就会产生将\",{\"1\":{\"234\":1}}],[\"就会对该对象耦合严重\",{\"1\":{\"226\":1}}],[\"就变成此对象的客户\",{\"1\":{\"227\":1}}],[\"就返回这个方法的值\",{\"1\":{\"224\":1}}],[\"就不能进行开门操作\",{\"1\":{\"142\":1}}],[\"就不应该有这些方法\",{\"1\":{\"104\":1}}],[\"就是当一个类构造器需要传入很多参数时\",{\"1\":{\"237\":1}}],[\"就是用来注册\",{\"1\":{\"195\":2}}],[\"就是\",{\"1\":{\"192\":1}}],[\"就是面向\",{\"1\":{\"190\":1}}],[\"就是这种语言的句子\",{\"1\":{\"183\":1}}],[\"就是在重载方法委派的前面加上了继承体系中覆盖的环节\",{\"1\":{\"173\":1}}],[\"就是可以实现方法的动态绑定\",{\"1\":{\"173\":1}}],[\"就是具体的实际类型的对象\",{\"1\":{\"173\":1}}],[\"就是分派\",{\"1\":{\"173\":1}}],[\"就是接收者角色\",{\"1\":{\"131\":1}}],[\"就是调用者角色\",{\"1\":{\"131\":1}}],[\"就是一个环境角色类\",{\"1\":{\"127\":1}}],[\"就比如下面的测试类\",{\"1\":{\"127\":1}}],[\"就可以顺理成章的让正方形继承自长方形\",{\"1\":{\"257\":1}}],[\"就可以考虑使用状态模式\",{\"1\":{\"146\":1}}],[\"就可以执行开门操作\",{\"1\":{\"142\":1}}],[\"就可以对叶子节点进行相关的操作\",{\"1\":{\"102\":1}}],[\"就可以愉快的玩耍了\",{\"1\":{\"42\":1}}],[\"就需要再定义新的类\",{\"1\":{\"261\":1}}],[\"就需要创建更多的类\",{\"1\":{\"91\":1}}],[\"就需要定义更多的子类\",{\"1\":{\"86\":1}}],[\"就需要修改代码生成的模板\",{\"1\":{\"13\":1}}],[\"9\",{\"0\":{\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1},\"1\":{\"43\":1,\"247\":1}}],[\"9083\",{\"1\":{\"40\":1,\"42\":2,\"43\":2}}],[\"9870\",{\"1\":{\"40\":1,\"42\":2,\"43\":3}}],[\"端口\",{\"1\":{\"40\":1}}],[\"端口需要一些时间\",{\"1\":{\"38\":1}}],[\"备忘录类\",{\"1\":{\"178\":1}}],[\"备忘录角色对发起人对象提供一个宽接口\",{\"1\":{\"179\":1}}],[\"备忘录角色对任何对象都提供一个接口\",{\"1\":{\"178\":1}}],[\"备忘录角色的内部所存储的状态就对所有对象公开\",{\"1\":{\"178\":1}}],[\"备忘录有两个等效的接口\",{\"1\":{\"176\":1}}],[\"备忘录\",{\"1\":{\"176\":1,\"246\":1}}],[\"备忘录模式的主要角色如下\",{\"1\":{\"176\":1}}],[\"备忘录模式提供了一种状态恢复的实现机制\",{\"1\":{\"175\":1}}],[\"备忘录模式\",{\"0\":{\"174\":1,\"178\":1,\"179\":1},\"1\":{\"113\":1,\"177\":2}}],[\"备注\",{\"1\":{\"39\":1}}],[\"备份数据用的\",{\"1\":{\"26\":1}}],[\"服务员\",{\"1\":{\"131\":1}}],[\"服务端\",{\"1\":{\"54\":1,\"55\":1}}],[\"服务\",{\"1\":{\"39\":1,\"40\":1}}],[\"服务包含\",{\"1\":{\"38\":1}}],[\"耐心等待一会\",{\"1\":{\"38\":1}}],[\"启动服务\",{\"0\":{\"61\":1}}],[\"启动\",{\"1\":{\"38\":1,\"43\":1}}],[\"有很多选择\",{\"1\":{\"258\":1}}],[\"有以下几个目的\",{\"1\":{\"216\":1}}],[\"有些逻辑要交给其子类实现\",{\"1\":{\"196\":1}}],[\"有些人又把静态类型叫做明显类型\",{\"1\":{\"173\":1}}],[\"有些人可能炒过股票\",{\"1\":{\"96\":1}}],[\"有一个很重要的子接口\",{\"1\":{\"192\":1}}],[\"有三个重要的子接口\",{\"1\":{\"192\":1}}],[\"有限\",{\"1\":{\"183\":1}}],[\"有两种方式\",{\"1\":{\"177\":1}}],[\"有六个同事类对象\",{\"1\":{\"155\":1}}],[\"有没有人来抓我\",{\"1\":{\"153\":1}}],[\"有多个的微信用户关注了程序猿这个公众号\",{\"1\":{\"150\":1}}],[\"有默认值\",{\"1\":{\"43\":1}}],[\"有时间在搞\",{\"1\":{\"38\":1}}],[\"有点水文的嫌疑了\",{\"1\":{\"7\":1}}],[\"自定义\",{\"0\":{\"197\":1,\"213\":1},\"1\":{\"188\":1}}],[\"自定义类型转换\",{\"1\":{\"6\":1,\"14\":1}}],[\"自带的\",{\"1\":{\"38\":1}}],[\"没有返回值\",{\"1\":{\"251\":1}}],[\"没有参数\",{\"1\":{\"251\":2}}],[\"没有使用中介者模式的时候\",{\"1\":{\"158\":1}}],[\"没有配\",{\"1\":{\"38\":1}}],[\"没有截图选择默认\",{\"1\":{\"22\":1}}],[\"引号外为语法\",{\"1\":{\"183\":1}}],[\"引号内为字符本身\",{\"1\":{\"183\":1}}],[\"引擎\",{\"1\":{\"38\":1,\"46\":1}}],[\"引入中介者对象以后\",{\"1\":{\"158\":1}}],[\"引入外观模式可将它们分离\",{\"1\":{\"99\":1}}],[\"引入\",{\"0\":{\"7\":1}}],[\"引入依赖后恢复正常\",{\"1\":{\"7\":1}}],[\"引入依赖\",{\"1\":{\"4\":1,\"7\":1}}],[\"用户有了机箱肯定是想按照自己的喜好\",{\"1\":{\"258\":1}}],[\"用户窗体可以根据需要选择或者增加新的主题\",{\"1\":{\"256\":1}}],[\"用户可以根据自己的喜爱更换自己的输入法的皮肤\",{\"1\":{\"256\":1}}],[\"用户只需要指定复杂对象的类型就可以得到该对象\",{\"1\":{\"235\":1}}],[\"用户权限\",{\"1\":{\"57\":1}}],[\"用原型模式生成\",{\"1\":{\"233\":1}}],[\"用一个已经创建的实例作为原型\",{\"1\":{\"232\":1}}],[\"用树形来表示符合文法规则的句子\",{\"1\":{\"183\":1}}],[\"用以封装环境对象中的特定状态所对应的行为\",{\"1\":{\"143\":1}}],[\"用继承方式会造成类爆炸\",{\"1\":{\"91\":1}}],[\"用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务\",{\"1\":{\"246\":1}}],[\"用于描述如何将类或对象按某种布局组成更大的结构\",{\"1\":{\"246\":1}}],[\"用于描述\",{\"1\":{\"246\":1}}],[\"用于进行配置文件加载\",{\"1\":{\"212\":1}}],[\"用于封装\",{\"1\":{\"199\":1}}],[\"用于对一个类进行封装\",{\"1\":{\"190\":1}}],[\"用于n个整数相加\",{\"1\":{\"183\":1}}],[\"用于两个整数相加\",{\"1\":{\"183\":2}}],[\"用于将新的观察者对象添加到集合中\",{\"1\":{\"153\":1}}],[\"用于保存所有要通知的观察者对象\",{\"1\":{\"153\":1}}],[\"用于连接上下文\",{\"1\":{\"124\":1}}],[\"用于加载代理类\",{\"1\":{\"75\":1}}],[\"用于学习或者测试\",{\"1\":{\"38\":1}}],[\"用来进行\",{\"1\":{\"211\":1}}],[\"用来存储bean对象的容器\",{\"1\":{\"211\":1}}],[\"用来存储并管理多个\",{\"1\":{\"200\":1}}],[\"用来存储餐名并记录份数\",{\"1\":{\"131\":1}}],[\"用来解析\",{\"1\":{\"195\":1}}],[\"用来实现文法中与非终结符相关的操作\",{\"1\":{\"184\":1}}],[\"用来实现文法中与终结符相关的操作\",{\"1\":{\"184\":1}}],[\"用来设置一个\",{\"1\":{\"153\":1}}],[\"用来管理享元对象\",{\"1\":{\"111\":1}}],[\"用来定义共性的属性和行为\",{\"1\":{\"111\":1}}],[\"用来表示部分以及整体层次\",{\"1\":{\"102\":1}}],[\"用来创建代理对象\",{\"1\":{\"75\":1}}],[\"用来安装软件\",{\"1\":{\"32\":1}}],[\"用作\",{\"1\":{\"39\":1}}],[\"环境类\",{\"1\":{\"185\":1}}],[\"环境角色\",{\"1\":{\"144\":1}}],[\"环境角色类\",{\"1\":{\"127\":1}}],[\"环境\",{\"1\":{\"38\":2,\"123\":1,\"143\":1,\"184\":1}}],[\"原型\",{\"1\":{\"246\":1}}],[\"原型模式的克隆分为浅克隆和深克隆\",{\"1\":{\"233\":1}}],[\"原型模式类图\",{\"1\":{\"232\":1}}],[\"原型模式包含如下角色\",{\"1\":{\"232\":1}}],[\"原型模式\",{\"0\":{\"232\":1}}],[\"原型快照损坏将导致无法打开\",{\"1\":{\"35\":1}}],[\"原型快照损坏不影响\",{\"1\":{\"35\":1}}],[\"原有表达式类代码无须修改\",{\"1\":{\"186\":1}}],[\"原理是动态生成被代理类的子类\",{\"1\":{\"77\":1}}],[\"原始数据层\",{\"1\":{\"5\":1}}],[\"完全遵循开闭原则\",{\"1\":{\"228\":1}}],[\"完成复杂产品的各个部件的具体创建方法\",{\"1\":{\"235\":1}}],[\"完成具体产品的创建\",{\"1\":{\"228\":1,\"229\":1}}],[\"完成\",{\"1\":{\"190\":1}}],[\"完成对聚合对象的遍历\",{\"1\":{\"162\":1}}],[\"完美的遵循开闭原则\",{\"1\":{\"86\":1}}],[\"完整克隆会占用更多的硬盘\",{\"1\":{\"35\":1}}],[\"完了开启虚拟机\",{\"1\":{\"22\":1}}],[\"克隆虚拟机\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"将c1对象写出到文件中\",{\"1\":{\"234\":1}}],[\"将上面的\",{\"1\":{\"234\":1}}],[\"将上面的案例用代码实现\",{\"1\":{\"131\":1}}],[\"将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族\",{\"1\":{\"229\":1}}],[\"将对象的创建与使用分离\",{\"1\":{\"221\":1,\"246\":1}}],[\"将会占用比较大的内存资源\",{\"1\":{\"180\":1}}],[\"将遍历该容器的功能交由迭代器实现\",{\"1\":{\"163\":1}}],[\"将所有与某个状态有关的行为放到一个类中\",{\"1\":{\"145\":1}}],[\"将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链\",{\"1\":{\"136\":1}}],[\"将请求排队和执行请求\",{\"1\":{\"133\":1}}],[\"将多个命令装配成一个组合命令\",{\"1\":{\"132\":1}}],[\"将订单带到柜台\",{\"1\":{\"131\":1}}],[\"将订单和接收者封装成命令对象\",{\"1\":{\"131\":1}}],[\"将一个复杂对象的构建与表示分离\",{\"1\":{\"235\":1}}],[\"将一个请求封装为一个对象\",{\"1\":{\"129\":1}}],[\"将一个类的接口转换成客户希望的另外一个接口\",{\"1\":{\"81\":1}}],[\"将容易变的部分抽象出来\",{\"1\":{\"119\":1}}],[\"将相同部分的代码放在抽象的父类中\",{\"1\":{\"118\":1}}],[\"将抽象与实现分离\",{\"1\":{\"91\":1}}],[\"将\",{\"1\":{\"81\":1,\"83\":1,\"100\":1,\"179\":1,\"190\":1}}],[\"将我们提供了的匿名内部类对象传递给了父类\",{\"1\":{\"75\":1}}],[\"将当前虚拟机作为原型机\",{\"1\":{\"34\":1}}],[\"将模板文件放在\",{\"1\":{\"14\":1}}],[\"拍摄快照\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"刷新环境变量\",{\"1\":{\"33\":1}}],[\"$proxy0\",{\"1\":{\"75\":8}}],[\"$path\",{\"1\":{\"33\":1}}],[\"$0\",{\"1\":{\"49\":6}}],[\"$2\",{\"1\":{\"49\":2}}],[\"$1\",{\"1\":{\"49\":4}}],[\"$\",{\"1\":{\"47\":8,\"49\":46}}],[\"$java\",{\"1\":{\"33\":2}}],[\"如和粉丝的见面会\",{\"1\":{\"260\":1}}],[\"如何改进呢\",{\"1\":{\"257\":1}}],[\"如要制造一个超人\",{\"1\":{\"239\":1}}],[\"如提拉米苏\",{\"1\":{\"229\":1}}],[\"如电器厂既生产电视机又生产洗衣机或空调\",{\"1\":{\"229\":1}}],[\"如畜牧场只养动物\",{\"1\":{\"229\":1}}],[\"如此重要呢\",{\"1\":{\"190\":1}}],[\"如邮件访问\",{\"1\":{\"189\":1}}],[\"如上图\",{\"1\":{\"183\":1}}],[\"如上代码中的\",{\"1\":{\"86\":1}}],[\"如玩游戏时的中间结果的存档功能\",{\"1\":{\"181\":1}}],[\"如可能会造成循环调用\",{\"1\":{\"139\":1}}],[\"如找领导出差报销\",{\"1\":{\"136\":1}}],[\"如下面配置文件\",{\"1\":{\"193\":1}}],[\"如下面的配置\",{\"1\":{\"190\":1}}],[\"如下\",{\"1\":{\"120\":1,\"127\":1}}],[\"如下图所示\",{\"1\":{\"194\":1}}],[\"如下图\",{\"1\":{\"100\":1,\"104\":1}}],[\"如\",{\"1\":{\"86\":1,\"87\":1,\"93\":2,\"175\":1,\"181\":1,\"214\":1,\"258\":1}}],[\"如图\",{\"1\":{\"32\":1}}],[\"如果现在又有新的动力源或者新的颜色的话\",{\"1\":{\"261\":1}}],[\"如果现在还有一种视频文件类型\",{\"1\":{\"93\":1}}],[\"如果同时考虑这两种分类\",{\"1\":{\"261\":1}}],[\"如果两个软件实体无须直接通信\",{\"1\":{\"260\":1}}],[\"如果通过重写父类的方法来完成新的功能\",{\"1\":{\"257\":1}}],[\"如果将抽象工厂模式看成汽车配件生产工厂\",{\"1\":{\"240\":1}}],[\"如果使用工厂方法模式\",{\"1\":{\"239\":1}}],[\"如果使用不当将导致程序结构和代码的混乱\",{\"1\":{\"145\":1}}],[\"如果创建这个类的实例\",{\"1\":{\"237\":1}}],[\"如果创建的时候直接\",{\"1\":{\"226\":1}}],[\"如果\",{\"1\":{\"236\":1}}],[\"如果我们使用工厂来生产对象\",{\"1\":{\"226\":1}}],[\"如果定义了这个方法\",{\"1\":{\"224\":1}}],[\"如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类\",{\"1\":{\"186\":1}}],[\"如果把运算符和数字都看作节点的话\",{\"1\":{\"183\":1}}],[\"如果形式变化非常多\",{\"1\":{\"183\":1}}],[\"如果是房主\",{\"1\":{\"157\":1}}],[\"如果引入中介者模式\",{\"1\":{\"155\":1}}],[\"如果对象\",{\"1\":{\"155\":1}}],[\"如果被观察者有循环依赖的话\",{\"1\":{\"151\":1}}],[\"如果观察者非常多的话\",{\"1\":{\"151\":1}}],[\"如果新加了断电的状态\",{\"1\":{\"142\":1}}],[\"如果电梯门现在处于运行时状态\",{\"1\":{\"142\":1}}],[\"如果实战中上级领导人都是固定的\",{\"1\":{\"138\":1}}],[\"如果还有上级\",{\"1\":{\"138\":1}}],[\"如果请假天数达到该领导者的处理要求\",{\"1\":{\"138\":1}}],[\"如果可以处理请求则处理\",{\"1\":{\"137\":1}}],[\"如果在俄罗斯方块这个游戏中\",{\"1\":{\"111\":1}}],[\"如果不存在的话\",{\"1\":{\"110\":1}}],[\"如果存在则提供给客户\",{\"1\":{\"110\":1}}],[\"如果有个懂行的帮帮手就好\",{\"1\":{\"96\":1}}],[\"如果有多数据源可以不配具体类型\",{\"1\":{\"15\":1}}],[\"如果要加同一个产品族的话\",{\"1\":{\"229\":1}}],[\"如果要更换对象\",{\"1\":{\"226\":1}}],[\"如果要保存的内部状态信息过多或者特别频繁\",{\"1\":{\"180\":1}}],[\"如果要新增一个快餐品类\",{\"1\":{\"86\":1}}],[\"如果要再加一种配料\",{\"1\":{\"86\":1}}],[\"如果要买火车票的话\",{\"1\":{\"74\":1}}],[\"如果去欧洲国家去旅游的话\",{\"1\":{\"81\":1}}],[\"如果需要\",{\"1\":{\"79\":1}}],[\"如果接口增加一个方法\",{\"1\":{\"77\":1}}],[\"如果没有提供相应的错误处理代码\",{\"1\":{\"105\":1}}],[\"如果没有接口使用\",{\"1\":{\"77\":1}}],[\"如果没有定义\",{\"1\":{\"76\":1,\"224\":1}}],[\"如果配置多个插件\",{\"1\":{\"15\":1}}],[\"xsd\",{\"1\":{\"188\":2}}],[\"xsi\",{\"1\":{\"188\":1}}],[\"xsi=\",{\"1\":{\"188\":1}}],[\"x64\",{\"1\":{\"33\":1,\"46\":1,\"47\":1}}],[\"xargs\",{\"1\":{\"32\":2}}],[\"xmlbeandefinitionreader\",{\"0\":{\"207\":1},\"1\":{\"207\":3,\"212\":1}}],[\"xmlschema\",{\"1\":{\"188\":1}}],[\"xmlns=\",{\"1\":{\"188\":1}}],[\"xmlns\",{\"1\":{\"188\":2}}],[\"xml\",{\"1\":{\"6\":1,\"14\":1,\"46\":5,\"49\":10,\"188\":3,\"192\":2,\"197\":1,\"207\":1,\"211\":1}}],[\"quadrilateral\",{\"1\":{\"257\":2}}],[\"query\",{\"1\":{\"16\":1}}],[\"querywrapper<>\",{\"1\":{\"13\":1}}],[\"q\",{\"1\":{\"60\":1,\"62\":1,\"63\":4}}],[\"qq\",{\"1\":{\"47\":1}}],[\"qa\",{\"1\":{\"32\":2}}],[\"升级软件包\",{\"1\":{\"32\":1}}],[\"清除缓存\",{\"1\":{\"32\":1}}],[\"your\",{\"1\":{\"260\":1}}],[\"yml\",{\"1\":{\"43\":2,\"46\":1}}],[\"yml文件\",{\"1\":{\"43\":1}}],[\"yarn\",{\"1\":{\"40\":1,\"43\":1,\"46\":1,\"47\":3,\"49\":10}}],[\"y\",{\"1\":{\"32\":2,\"45\":1}}],[\"yum\",{\"1\":{\"32\":5,\"45\":5,\"55\":2}}],[\"yeeiee\",{\"1\":{\"6\":1,\"7\":1,\"14\":1,\"16\":2}}],[\"||\",{\"1\":{\"43\":4,\"120\":2}}],[\"|mariadb\",{\"1\":{\"32\":1}}],[\"|\",{\"1\":{\"32\":6,\"49\":9,\"75\":4,\"183\":3}}],[\"临时\",{\"1\":{\"32\":2}}],[\"临时表\",{\"1\":{\"5\":1}}],[\"永久\",{\"1\":{\"32\":2}}],[\"略\",{\"1\":{\"31\":1}}],[\"地址修改\",{\"0\":{\"30\":1}}],[\"初始化bean\",{\"1\":{\"211\":1}}],[\"初始化状态\",{\"1\":{\"178\":1,\"179\":1}}],[\"初始化\",{\"0\":{\"29\":1}}],[\"可见性\",{\"1\":{\"251\":2}}],[\"可维护性强\",{\"1\":{\"245\":1}}],[\"可靠性高\",{\"1\":{\"245\":1}}],[\"可读性强\",{\"1\":{\"245\":1}}],[\"可复用面向对象软件的基础\",{\"1\":{\"243\":1}}],[\"可能有父\",{\"1\":{\"192\":1}}],[\"可能会由于职责链的错误设置而导致系统出错\",{\"1\":{\"139\":1}}],[\"可列表化\",{\"1\":{\"192\":1}}],[\"可将请求沿着这条链传递\",{\"1\":{\"136\":1}}],[\"可将每个条件分支移入它们各自的策略类中以代替这些条件语句\",{\"1\":{\"126\":1}}],[\"可将每个算法封装到策略类中\",{\"1\":{\"126\":1}}],[\"可批假的领导有部门负责人\",{\"1\":{\"136\":1}}],[\"可使用策略模式来隐藏与算法相关的数据结构\",{\"1\":{\"126\":1}}],[\"可关闭\",{\"1\":{\"26\":1}}],[\"可以将防火\",{\"1\":{\"259\":1}}],[\"可以将这些外部状态传入对象中\",{\"1\":{\"112\":1}}],[\"可以将这颗树理解成一个大的容器\",{\"1\":{\"102\":1}}],[\"可以为其定义一个抽象类\",{\"1\":{\"256\":1}}],[\"可以基本保持\",{\"1\":{\"256\":1}}],[\"可以简化了人们对系统的理解\",{\"1\":{\"249\":1}}],[\"可以提高程序员的思维能力\",{\"1\":{\"245\":1}}],[\"可以反复使用\",{\"1\":{\"244\":1}}],[\"可以把指挥者类和抽象建造者进行结合\",{\"1\":{\"236\":1}}],[\"可以创建多个不同等级的产品\",{\"1\":{\"229\":1}}],[\"可以创建一个抽象类\",{\"1\":{\"84\":1}}],[\"可以直接访问这些对象的方法\",{\"1\":{\"260\":1}}],[\"可以直接访问\",{\"1\":{\"222\":1}}],[\"可以直接使用打好的镜像\",{\"1\":{\"38\":1}}],[\"可以降低\",{\"1\":{\"216\":1}}],[\"可以非常方便地同\",{\"1\":{\"189\":1}}],[\"可以查询\",{\"1\":{\"189\":1}}],[\"可以使用原型模式复制多个\",{\"1\":{\"233\":1}}],[\"可以使用暂时存储起来的备忘录将状态复原\",{\"1\":{\"175\":1}}],[\"可以使用策略模式\",{\"1\":{\"126\":1}}],[\"可以实现广播机制\",{\"1\":{\"151\":1}}],[\"可以实现宏命令\",{\"1\":{\"132\":1}}],[\"可以增加和删除观察者对象\",{\"1\":{\"149\":1}}],[\"可以运行了\",{\"1\":{\"142\":1}}],[\"可以开门了\",{\"1\":{\"142\":1}}],[\"可以对应电梯状态表来看\",{\"1\":{\"142\":1}}],[\"可以动态地改变链内的成员或者修改它们的次序\",{\"1\":{\"139\":1}}],[\"可以根据需要增加新的请求处理类\",{\"1\":{\"139\":1}}],[\"可以自己定义接收者\",{\"1\":{\"134\":1}}],[\"可以自由访问和被访问以及上网\",{\"1\":{\"22\":1}}],[\"可以持有很多的命令对象\",{\"1\":{\"130\":1,\"131\":1}}],[\"可以选择\",{\"1\":{\"122\":1}}],[\"可以坐飞机\",{\"1\":{\"122\":1}}],[\"可以坐火车\",{\"1\":{\"122\":1}}],[\"可以坐汽车\",{\"1\":{\"122\":1}}],[\"可以骑自行车\",{\"1\":{\"122\":1}}],[\"可以延迟到子类中实现\",{\"1\":{\"115\":1}}],[\"可以在父类中实现\",{\"1\":{\"115\":1}}],[\"可以在不同操作系统平台\",{\"1\":{\"93\":1}}],[\"可以形成复杂的树形结构\",{\"1\":{\"106\":1}}],[\"可以预先定义一些默认行为和属性\",{\"1\":{\"103\":1}}],[\"可以通过第三方转发该调用\",{\"1\":{\"260\":1}}],[\"可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合\",{\"1\":{\"230\":1}}],[\"可以通过使用享元模式在一定程度上减少对象的数量\",{\"1\":{\"125\":1}}],[\"可以通过输出\",{\"1\":{\"100\":1}}],[\"可以通过语音直接控制这些智能家电的开启和关闭\",{\"1\":{\"98\":1}}],[\"可以通过构造方法传递\",{\"1\":{\"89\":1}}],[\"可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果\",{\"1\":{\"86\":1}}],[\"可以通过其子类扩展具体构件的功能\",{\"1\":{\"86\":1}}],[\"可以额外附加鸡蛋\",{\"1\":{\"86\":1}}],[\"可以给不同的用户提供不同级别的使用权限\",{\"1\":{\"79\":1}}],[\"可以修改\",{\"1\":{\"40\":1}}],[\"可以看到调用了无参的抽象的\",{\"1\":{\"120\":1}}],[\"可以看到\",{\"1\":{\"113\":1}}],[\"可以看到每个\",{\"1\":{\"17\":1}}],[\"可以看到通过修改模板文件的方式基本实现了需求\",{\"1\":{\"14\":1}}],[\"可以快速的编写一个异常类\",{\"1\":{\"11\":1}}],[\"可以删除\",{\"1\":{\"5\":2}}],[\"系统结构混乱且难以理解\",{\"1\":{\"159\":1}}],[\"系统结构更加复杂\",{\"1\":{\"132\":1}}],[\"系统中对象之间存在复杂的引用关系\",{\"1\":{\"159\":1}}],[\"系统中各算法彼此完全独立\",{\"1\":{\"126\":1}}],[\"系统性能将受到一定影响\",{\"1\":{\"139\":1}}],[\"系统需要支持命令的撤销\",{\"1\":{\"133\":1}}],[\"系统需要在不同的时间指定请求\",{\"1\":{\"133\":1}}],[\"系统需要将请求调用者和请求接收者解耦\",{\"1\":{\"133\":1}}],[\"系统要求使用算法的客户不应该知道其操作的数据时\",{\"1\":{\"126\":1}}],[\"系统更加庞大\",{\"1\":{\"118\":1}}],[\"系统崩溃的时候\",{\"1\":{\"26\":1}}],[\"系统安装\",{\"0\":{\"23\":1}}],[\"k++\",{\"1\":{\"113\":1}}],[\"kt\",{\"1\":{\"63\":1}}],[\"ktadd\",{\"1\":{\"63\":1}}],[\"k\",{\"1\":{\"63\":1,\"113\":3}}],[\"klist\",{\"1\":{\"63\":1}}],[\"kinit\",{\"1\":{\"63\":2}}],[\"kadmin\",{\"1\":{\"60\":1,\"61\":2,\"62\":1,\"63\":6}}],[\"kadmind\",{\"1\":{\"58\":1}}],[\"kadm5\",{\"1\":{\"57\":2,\"59\":3,\"60\":1}}],[\"krb5libs\",{\"1\":{\"58\":1}}],[\"krb5kdc\",{\"1\":{\"57\":3,\"58\":1,\"59\":1,\"60\":1,\"61\":2}}],[\"krb5\",{\"0\":{\"58\":1},\"1\":{\"55\":5,\"58\":2}}],[\"kdestroy\",{\"1\":{\"63\":1}}],[\"kdb5\",{\"1\":{\"59\":1}}],[\"kdc服务地址\",{\"1\":{\"58\":1}}],[\"kdc进行检验的keytab\",{\"1\":{\"57\":1}}],[\"kdcdefaults\",{\"1\":{\"57\":1}}],[\"kdc\",{\"0\":{\"57\":1},\"1\":{\"54\":1,\"57\":3,\"58\":2,\"59\":3,\"60\":2}}],[\"kdump\",{\"0\":{\"26\":1}}],[\"kerberos角色流程图\",{\"1\":{\"54\":1}}],[\"kerberos\",{\"0\":{\"59\":1},\"1\":{\"54\":2,\"57\":3,\"59\":1,\"60\":1},\"2\":{\"65\":1}}],[\"kerberos入门\",{\"0\":{\"54\":1}}],[\"key存储的是bean的id值\",{\"1\":{\"211\":1}}],[\"keyset\",{\"1\":{\"131\":1,\"204\":1}}],[\"keys\",{\"1\":{\"131\":2}}],[\"keyring\",{\"1\":{\"58\":1}}],[\"keytab\",{\"1\":{\"57\":2,\"63\":2}}],[\"key\",{\"1\":{\"5\":2,\"54\":1,\"57\":1,\"59\":2,\"60\":2,\"111\":2,\"131\":3}}],[\"分析\",{\"1\":{\"178\":1}}],[\"分派根据静态类型信息发生\",{\"1\":{\"173\":1}}],[\"分派\",{\"1\":{\"173\":2}}],[\"分离了部件的构造\",{\"1\":{\"235\":1}}],[\"分离无关行为\",{\"1\":{\"171\":1}}],[\"分离内部状态和外部状态\",{\"1\":{\"112\":1}}],[\"分为倒油\",{\"1\":{\"117\":1}}],[\"分别实现\",{\"1\":{\"100\":1}}],[\"分别定义一个子类\",{\"1\":{\"86\":1}}],[\"分配磁盘\",{\"1\":{\"25\":1}}],[\"分页插件和字段填充\",{\"0\":{\"15\":1}}],[\"分页查询\",{\"1\":{\"13\":1}}],[\"选第一个\",{\"1\":{\"22\":1}}],[\"选择自己喜欢的配件\",{\"1\":{\"258\":1}}],[\"选择\",{\"1\":{\"214\":1,\"258\":1}}],[\"选择链接克隆\",{\"1\":{\"35\":1}}],[\"选择从快照克隆\",{\"1\":{\"35\":1}}],[\"选择中文\",{\"1\":{\"23\":1}}],[\"选择镜像文件\",{\"1\":{\"22\":1}}],[\"选择虚拟机存放位置\",{\"1\":{\"22\":1}}],[\"选择linux\",{\"1\":{\"22\":1}}],[\"选择稍后安装操作系统\",{\"1\":{\"22\":1}}],[\"选择依赖\",{\"1\":{\"3\":1}}],[\"不跟\",{\"1\":{\"260\":1}}],[\"不要对实现进行编程\",{\"1\":{\"258\":1}}],[\"不再指向原有对象地址\",{\"1\":{\"233\":1}}],[\"不仅要生产咖啡还要生产甜点\",{\"1\":{\"229\":1}}],[\"不仅仅要根据消息接收者\",{\"1\":{\"173\":1}}],[\"不运行此中操作\",{\"1\":{\"224\":1}}],[\"不关心工厂是怎么生产这些产品的\",{\"1\":{\"192\":1}}],[\"不同的装配顺序也可以做出不同的对象\",{\"1\":{\"235\":1}}],[\"不同的构建器\",{\"1\":{\"235\":1}}],[\"不同\",{\"1\":{\"189\":1}}],[\"不同点\",{\"1\":{\"89\":1}}],[\"不需保持其他所有处理者的引用\",{\"1\":{\"139\":1}}],[\"不需要修改其他的类\",{\"1\":{\"229\":1}}],[\"不需要修改工厂类的代码了\",{\"1\":{\"228\":1}}],[\"不需要实例化该类的对象\",{\"1\":{\"222\":1}}],[\"不需要swap\",{\"1\":{\"25\":1}}],[\"不需要\",{\"1\":{\"22\":1}}],[\"不必关心处理的是单个对象还是整个组合结构\",{\"1\":{\"106\":1}}],[\"不管是菜单还是菜单项\",{\"1\":{\"104\":2}}],[\"不管生成多少个\",{\"1\":{\"14\":1}}],[\"不符合开闭原则\",{\"1\":{\"98\":1}}],[\"不能去修改原有的代码\",{\"1\":{\"256\":1}}],[\"不能再开门了\",{\"1\":{\"142\":1}}],[\"不能再有子菜单\",{\"1\":{\"104\":1}}],[\"不能关门\",{\"1\":{\"142\":3}}],[\"不能保证每个请求一定被处理\",{\"1\":{\"139\":1}}],[\"不能处理的传递给下一个对象完成\",{\"1\":{\"139\":1}}],[\"不能被共享的子类可设计为非共享具体享元类\",{\"1\":{\"110\":1}}],[\"不能采用继承的情况主要有两类\",{\"1\":{\"87\":1}}],[\"不能对声明为\",{\"1\":{\"77\":1}}],[\"不会相互耦合\",{\"1\":{\"86\":1}}],[\"不是\",{\"1\":{\"86\":1}}],[\"不是代理模式中所说的代理类\",{\"1\":{\"75\":1}}],[\"不然会直接卸载\",{\"1\":{\"32\":1}}],[\"不用重启\",{\"1\":{\"32\":1}}],[\"磁盘分区\",{\"0\":{\"25\":1}}],[\"磁盘\",{\"1\":{\"22\":1}}],[\"默认先创建并缓存\",{\"1\":{\"113\":1}}],[\"默认域\",{\"1\":{\"58\":1}}],[\"默认值\",{\"1\":{\"47\":1}}],[\"默认端口\",{\"0\":{\"40\":1}}],[\"默认nat\",{\"1\":{\"22\":1}}],[\"默认的是velocity引擎模板\",{\"1\":{\"6\":1,\"14\":1}}],[\"网络和主机名称\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"网络\",{\"1\":{\"22\":1,\"42\":1}}],[\"模块构架于核心模块之上\",{\"1\":{\"189\":1}}],[\"模块是统一表达式语言\",{\"1\":{\"189\":1}}],[\"模块是对\",{\"1\":{\"189\":1}}],[\"模块是\",{\"1\":{\"189\":2}}],[\"模拟实现过滤器链\",{\"1\":{\"140\":1}}],[\"模拟实现具体过滤器\",{\"1\":{\"140\":1}}],[\"模拟\",{\"1\":{\"140\":2}}],[\"模拟做饭的过程\",{\"1\":{\"131\":1}}],[\"模板方法\",{\"1\":{\"116\":2}}],[\"模板方法模式\",{\"0\":{\"114\":1},\"1\":{\"113\":1,\"214\":1}}],[\"模板文件\",{\"1\":{\"14\":1}}],[\"模式创建的是复杂对象\",{\"1\":{\"236\":1}}],[\"模式的常规用法\",{\"1\":{\"236\":1}}],[\"模式的典型应用\",{\"1\":{\"140\":1}}],[\"模式包含如下角色\",{\"1\":{\"235\":1}}],[\"模式包含以下主要角色\",{\"1\":{\"92\":1,\"97\":1,\"116\":1}}],[\"模式扩展\",{\"0\":{\"230\":1,\"237\":1}}],[\"模式中存在以下两种状态\",{\"1\":{\"110\":1}}],[\"模式中的角色\",{\"1\":{\"86\":1}}],[\"模式是\",{\"1\":{\"96\":1}}],[\"模式分为三种角色\",{\"1\":{\"73\":1}}],[\"模式\",{\"1\":{\"22\":2,\"148\":1}}],[\"随后修改\",{\"1\":{\"22\":2}}],[\"镜像大小\",{\"1\":{\"38\":1}}],[\"镜像\",{\"1\":{\"21\":1}}],[\"准备资源\",{\"0\":{\"21\":1}}],[\"虚拟机用的\",{\"1\":{\"42\":1}}],[\"虚拟机就相当于一台实体机\",{\"1\":{\"22\":1}}],[\"虚拟机可以访问外网\",{\"1\":{\"22\":1}}],[\"虚拟机不能访问外网\",{\"1\":{\"22\":1}}],[\"虚拟机和主机之间可以相互访问\",{\"1\":{\"22\":2}}],[\"虚拟机\",{\"1\":{\"20\":1}}],[\"✨\",{\"1\":{\"20\":1}}],[\"后来召开了多次关于设计模式的研讨会\",{\"1\":{\"243\":1}}],[\"后期如果再加新品种的咖啡\",{\"1\":{\"227\":1}}],[\"后期如果需要\",{\"1\":{\"227\":1}}],[\"后置处理\",{\"1\":{\"140\":2}}],[\"后者采用组合或聚合在对象间分配行为\",{\"1\":{\"113\":1}}],[\"后者釆用组合或聚合来组合对象\",{\"1\":{\"70\":1}}],[\"后面的解释器可以从这里获取这些值\",{\"1\":{\"184\":1}}],[\"后面的\",{\"1\":{\"60\":1}}],[\"后面不够再添加\",{\"1\":{\"3\":1}}],[\"后端\",{\"2\":{\"18\":1,\"217\":1,\"241\":1,\"253\":1,\"262\":1}}],[\"一书\",{\"1\":{\"243\":1}}],[\"一步一步创建一个复杂的对象\",{\"1\":{\"235\":1}}],[\"一旦有了\",{\"1\":{\"227\":1}}],[\"一游戏角色有生命力\",{\"1\":{\"177\":1}}],[\"一对多关联转变为一对一的关联\",{\"1\":{\"158\":1}}],[\"一家百货公司在定年度的促销活动\",{\"1\":{\"124\":1}}],[\"一般情况下抽象的变化概率很小\",{\"1\":{\"258\":1}}],[\"一般用来传递被所有解释器共享的数据\",{\"1\":{\"184\":1}}],[\"一般来说\",{\"1\":{\"155\":1}}],[\"一般模板方法都加上\",{\"1\":{\"117\":1}}],[\"一般钩子方法是用于判断的逻辑方法\",{\"1\":{\"116\":1}}],[\"一个类对另一个类的依赖应该建立在最小的接口上\",{\"1\":{\"259\":1}}],[\"一个类定义了多种行为\",{\"1\":{\"126\":1}}],[\"一个产品家族是这样的一系列产品\",{\"1\":{\"240\":1}}],[\"一个\",{\"1\":{\"200\":1}}],[\"一个中介机构\",{\"1\":{\"157\":1}}],[\"一个租房者\",{\"1\":{\"157\":1}}],[\"一个房主\",{\"1\":{\"157\":1}}],[\"一个好的设计\",{\"1\":{\"155\":1}}],[\"一个对象的状态发生改变会影响其他对象\",{\"1\":{\"152\":1}}],[\"一个对象只需保持一个指向其后继者的引用\",{\"1\":{\"139\":1}}],[\"一个操作中含有庞大的分支结构\",{\"1\":{\"146\":1}}],[\"一个电梯有开门状态\",{\"1\":{\"142\":1}}],[\"一个请求有多个对象可以处理\",{\"1\":{\"136\":1}}],[\"一个系统需要动态地在几种算法中选择一种时\",{\"1\":{\"126\":1}}],[\"一个系统有大量相同或者相似的对象\",{\"1\":{\"112\":1}}],[\"一个是下菜心\",{\"1\":{\"117\":1}}],[\"一个下包菜\",{\"1\":{\"117\":1}}],[\"一个具体方法由一个抽象类或具体类声明并实现\",{\"1\":{\"116\":1}}],[\"一个抽象方法由抽象类声明\",{\"1\":{\"116\":1}}],[\"一个菜单可以包含菜单项\",{\"1\":{\"104\":1}}],[\"一个人在家生活\",{\"1\":{\"98\":1}}],[\"一些准备工作\",{\"0\":{\"32\":1}}],[\"一件生成多张表的增删改查\",{\"1\":{\"17\":1}}],[\"一键生成\",{\"1\":{\"0\":1}}],[\"还有适配器模式\",{\"1\":{\"214\":1}}],[\"还有数据库中事务操作\",{\"1\":{\"181\":1}}],[\"还有在\",{\"1\":{\"175\":1}}],[\"还有一个适配器模式是接口适配器模式\",{\"1\":{\"84\":1}}],[\"还要根据参数的运行时区别\",{\"1\":{\"173\":1}}],[\"还需要在启动类上面添加\",{\"1\":{\"16\":1}}],[\"还提供了一些开箱即用的功能\",{\"1\":{\"15\":1}}],[\"w3\",{\"1\":{\"188\":1}}],[\"www\",{\"1\":{\"188\":7}}],[\"wmv\",{\"1\":{\"93\":2}}],[\"weixinuserlist\",{\"1\":{\"150\":4}}],[\"weixinuser\",{\"1\":{\"150\":8}}],[\"well\",{\"1\":{\"58\":1}}],[\"web\",{\"1\":{\"40\":2,\"42\":1,\"47\":6,\"49\":5,\"100\":1,\"140\":3,\"189\":1}}],[\"webmvc\",{\"1\":{\"7\":1}}],[\"word\",{\"1\":{\"83\":2,\"175\":1,\"181\":1}}],[\"words\",{\"1\":{\"57\":1}}],[\"worklen\",{\"1\":{\"127\":1}}],[\"workbase\",{\"1\":{\"127\":1}}],[\"work\",{\"1\":{\"127\":1,\"251\":1}}],[\"workstation\",{\"1\":{\"55\":2}}],[\"workdir\",{\"1\":{\"47\":1}}],[\"while\",{\"1\":{\"49\":1,\"127\":2,\"166\":1,\"231\":1}}],[\"waitor\",{\"1\":{\"131\":5}}],[\"waiting\",{\"1\":{\"49\":2}}],[\"wait\",{\"1\":{\"49\":7}}],[\"wide\",{\"1\":{\"176\":1}}],[\"with\",{\"1\":{\"127\":1}}],[\"without\",{\"1\":{\"46\":1,\"47\":2}}],[\"windows版本\",{\"1\":{\"93\":1}}],[\"windows\",{\"1\":{\"42\":2,\"93\":4}}],[\"writeobject\",{\"1\":{\"234\":1}}],[\"writer\",{\"1\":{\"88\":1}}],[\"writetf\",{\"1\":{\"83\":3,\"84\":1}}],[\"writesd\",{\"1\":{\"83\":3,\"84\":1}}],[\"write\",{\"1\":{\"16\":1,\"83\":3,\"84\":1,\"88\":1}}],[\"都属于美式风味\",{\"1\":{\"229\":1}}],[\"都属于意大利风味\",{\"1\":{\"229\":1}}],[\"都是咖啡\",{\"1\":{\"229\":1}}],[\"都要在每一个具体访问者类中增加相应的具体操作\",{\"1\":{\"171\":1}}],[\"都要实现与目标类相同的业务接口\",{\"1\":{\"89\":1}}],[\"都需要实现\",{\"1\":{\"170\":1}}],[\"都有可能要根据其他状态来更新处理\",{\"1\":{\"142\":1}}],[\"都应该继承该类\",{\"1\":{\"104\":1}}],[\"都应该继承自统一的接口\",{\"1\":{\"104\":1}}],[\"都不需要修改原有系统\",{\"1\":{\"93\":1}}],[\"都可以在不修改目标类的前提下增强目标方法\",{\"1\":{\"89\":1}}],[\"都具备了基础的增删改查能力\",{\"1\":{\"17\":1}}],[\"都具备简单的增删改查功能\",{\"1\":{\"0\":1}}],[\"都纳入事务控制\",{\"1\":{\"16\":1}}],[\"注册beandefinition对象到注册表中\",{\"1\":{\"203\":1}}],[\"注册\",{\"1\":{\"203\":1}}],[\"注明目标对象发生了变化\",{\"1\":{\"153\":1}}],[\"注解的方式会变得繁琐\",{\"1\":{\"16\":1}}],[\"注意\",{\"1\":{\"13\":1,\"46\":1,\"84\":1,\"117\":1,\"166\":1,\"183\":1,\"211\":1,\"223\":1,\"234\":1,\"236\":1,\"251\":1,\"257\":1,\"258\":1,\"259\":1,\"261\":1}}],[\"通俗理解\",{\"1\":{\"257\":1}}],[\"通信报文和集成测试等\",{\"1\":{\"189\":1}}],[\"通知它们数据发生改变\",{\"1\":{\"153\":1}}],[\"通知订阅者更新消息\",{\"1\":{\"150\":1}}],[\"通常类的复用分为继承复用和合成复用两种\",{\"1\":{\"261\":1}}],[\"通常情况下是使用访问者提供的访问该元素类的方法\",{\"1\":{\"169\":1}}],[\"通常包含各个解释器需要的数据或是公共的功能\",{\"1\":{\"184\":1}}],[\"通常包含\",{\"1\":{\"162\":1}}],[\"通常越晚加入集合的观察者越先得到通知\",{\"1\":{\"153\":1}}],[\"通常会持有命令对象\",{\"1\":{\"130\":1}}],[\"通常会持有接收者\",{\"1\":{\"130\":1}}],[\"通常由一个接口或抽象类实现\",{\"1\":{\"123\":1}}],[\"通常我们可以结合单例模式来设计具体享元类\",{\"1\":{\"110\":1}}],[\"通常是一个接口或抽象类\",{\"1\":{\"110\":1}}],[\"通常使用注解的方式控制事务\",{\"1\":{\"16\":1}}],[\"通过对部件的组装可以返回一辆完整的汽车\",{\"1\":{\"240\":1}}],[\"通过对子类的具体实现扩展不同的行为\",{\"1\":{\"118\":1}}],[\"通过复制该原型对象来创建一个和原型对象相同的新对象\",{\"1\":{\"232\":1}}],[\"通过该案例的实现\",{\"1\":{\"216\":1}}],[\"通过该接口即可访问远程服务提供的功能\",{\"1\":{\"79\":1}}],[\"通过调用其父类\",{\"1\":{\"196\":1}}],[\"通过上面代码及结果可以看出\",{\"1\":{\"188\":1}}],[\"通过方法重载支持静态分派\",{\"1\":{\"173\":1}}],[\"通过方法的重写支持动态分派\",{\"1\":{\"173\":2}}],[\"通过访问者来分离无关的行为\",{\"1\":{\"171\":1}}],[\"通过访问者来定义整个对象结构通用的功能\",{\"1\":{\"171\":1}}],[\"通过按钮来控制一个电梯的状态\",{\"1\":{\"142\":1}}],[\"通过一个父类调用其子类的操作\",{\"1\":{\"118\":1}}],[\"通过反编译软件进行反编译\",{\"1\":{\"113\":1}}],[\"通过叶子节点和树枝节点的递归组合\",{\"1\":{\"106\":1}}],[\"通过桥接模式可以使它们在抽象层建立一个关联关系\",{\"1\":{\"94\":1}}],[\"通过装饰角色为其添加一些职责\",{\"1\":{\"86\":1}}],[\"通过继承或引用适配者的对象\",{\"1\":{\"82\":1}}],[\"通过阿里巴巴开源的\",{\"1\":{\"75\":1}}],[\"通过接口或抽象类声明真实主题和代理对象实现的业务方法\",{\"1\":{\"73\":1}}],[\"通过设置运行包含\",{\"1\":{\"6\":1}}],[\"通过查看最新版本依赖发现\",{\"1\":{\"4\":1}}],[\"通过官网知道\",{\"1\":{\"4\":1}}],[\"通过\",{\"1\":{\"0\":2,\"4\":1,\"153\":1}}],[\"乐观锁等等\",{\"1\":{\"15\":1}}],[\"逻辑删除\",{\"1\":{\"15\":1}}],[\"插入时\",{\"1\":{\"15\":1}}],[\"切记分页最后添加\",{\"1\":{\"15\":1}}],[\"当宽度大于长度\",{\"1\":{\"257\":1}}],[\"当软件需要发生变化时\",{\"1\":{\"256\":1}}],[\"当通过反射方式调用构造方法进行创建创建时\",{\"1\":{\"224\":1}}],[\"当问题重复出现\",{\"1\":{\"187\":1}}],[\"当语言的文法较为简单\",{\"1\":{\"187\":1}}],[\"当用户需要时能够比较方便地将数据恢复到某个历史的状态\",{\"1\":{\"180\":1}}],[\"当新的状态无效或者存在问题时\",{\"1\":{\"175\":1}}],[\"当我们在使用\",{\"1\":{\"166\":1}}],[\"当我们找到某个叶子节点后\",{\"1\":{\"102\":1}}],[\"当访问一个聚合对象的内容而无须暴露其内部细节的表示时\",{\"1\":{\"165\":1}}],[\"当想创建一个运行于多个类之间的对象\",{\"1\":{\"159\":1}}],[\"当同事类太多时\",{\"1\":{\"158\":1}}],[\"当需要为遍历不同的聚合结构提供一个统一的接口时\",{\"1\":{\"165\":1}}],[\"当需要为聚合对象提供多种遍历方式时\",{\"1\":{\"165\":1}}],[\"当需要与其他同事对象交互时\",{\"1\":{\"156\":1}}],[\"当需要一个非共享具体享元类的对象时可以直接通过实例化创建\",{\"1\":{\"110\":1}}],[\"当目标对象发生变化时\",{\"1\":{\"153\":1}}],[\"当它为\",{\"1\":{\"153\":1}}],[\"当你关注的公众号中有新内容更新的话\",{\"1\":{\"150\":1}}],[\"当你将浏览器配置成使用代理功能时\",{\"1\":{\"79\":1}}],[\"当工作流程发生变化\",{\"1\":{\"139\":1}}],[\"当有请求发生时\",{\"1\":{\"136\":1}}],[\"当调用\",{\"1\":{\"113\":1}}],[\"当客户对象请求一个享元对象时\",{\"1\":{\"110\":1}}],[\"当客户端与多个子系统之间存在很大的联系时\",{\"1\":{\"99\":1}}],[\"当一个语言需要解释执行\",{\"1\":{\"187\":1}}],[\"当一个抽象模型有两个方面\",{\"1\":{\"152\":1}}],[\"当一个对象的行为取决于它的状态\",{\"1\":{\"146\":1}}],[\"当一个复杂系统的子系统很多时\",{\"1\":{\"99\":1}}],[\"当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时\",{\"1\":{\"94\":1}}],[\"当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时\",{\"1\":{\"94\":1}}],[\"当一个类存在两个独立变化的维度\",{\"1\":{\"94\":1}}],[\"当对象的功能要求可以动态地添加\",{\"1\":{\"87\":1}}],[\"当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时\",{\"1\":{\"87\":1}}],[\"当不希望实现一个接口中所有的方法时\",{\"1\":{\"84\":1}}],[\"当前对象的方法参数等\",{\"1\":{\"260\":1}}],[\"当前对象的成员对象\",{\"1\":{\"260\":1}}],[\"当前对象所创建的对象\",{\"1\":{\"260\":1}}],[\"当前对象本身\",{\"1\":{\"260\":1}}],[\"当前环境改变\",{\"1\":{\"144\":1}}],[\"当前系统业务所期待的接口\",{\"1\":{\"82\":1}}],[\"当前页面\",{\"1\":{\"13\":1}}],[\"当互联网返回响应时\",{\"1\":{\"79\":1}}],[\"当生成keytab之后\",{\"1\":{\"63\":1}}],[\"当然也可以通过环境角色间接访问解释器的解释方法\",{\"1\":{\"184\":1}}],[\"当然宠物还分为狗\",{\"1\":{\"170\":1}}],[\"当然如果是已经做好的系统\",{\"1\":{\"158\":1}}],[\"当然是停止方法执行了\",{\"1\":{\"144\":1}}],[\"当然可以进行代码开发的工具有很多\",{\"1\":{\"122\":1}}],[\"当然加配菜需要额外加钱\",{\"1\":{\"86\":1}}],[\"当然他还是单机\",{\"1\":{\"43\":1}}],[\"当然首先需要\",{\"1\":{\"38\":1}}],[\"当然\",{\"1\":{\"15\":1}}],[\"当执行插入或者更新操作时\",{\"1\":{\"15\":1}}],[\"重构前代码如下\",{\"1\":{\"237\":1}}],[\"重载方法的分派是根据静态类型进行的\",{\"1\":{\"173\":1}}],[\"重写父接口中的\",{\"1\":{\"212\":1}}],[\"重写所有的方法\",{\"1\":{\"163\":1}}],[\"重写所有的抽象方法\",{\"1\":{\"163\":1}}],[\"重写方法的类对象就行\",{\"1\":{\"127\":1}}],[\"重新构建yum缓存\",{\"1\":{\"32\":1}}],[\"重新生成代码\",{\"1\":{\"14\":1}}],[\"重要\",{\"1\":{\"14\":1}}],[\"文法中的每条规则都对应于一个非终结符表达式\",{\"1\":{\"184\":1}}],[\"文法中的每一个终结符都有一个具体终结表达式与之相对应\",{\"1\":{\"184\":1}}],[\"文法是用于描述语言的语法结构的形式规则\",{\"1\":{\"183\":1}}],[\"文法\",{\"1\":{\"183\":1}}],[\"文件目录显示\",{\"1\":{\"107\":1}}],[\"文件\",{\"1\":{\"42\":1,\"57\":1,\"58\":1}}],[\"文件夹下面\",{\"1\":{\"14\":1}}],[\"文章后面介绍了如何安装\",{\"1\":{\"38\":1}}],[\"文章的主要目的就是为了快速启动一个\",{\"1\":{\"38\":1}}],[\"文章主要介绍如何使用\",{\"1\":{\"0\":1}}],[\"我已经盯你很久了\",{\"1\":{\"153\":1}}],[\"我偷东西了\",{\"1\":{\"153\":1}}],[\"我就不按楼层\",{\"1\":{\"144\":1}}],[\"我就想测试一下电梯门开关功能\",{\"1\":{\"144\":1}}],[\"我还听不懂你说的\",{\"1\":{\"98\":1}}],[\"我们试着将继承复用改为聚合复用看一下\",{\"1\":{\"261\":1}}],[\"我们开发的一个与几何图形相关的软件系统\",{\"1\":{\"257\":1}}],[\"我们举个简单例子来说明两者的差异\",{\"1\":{\"239\":1}}],[\"我们看通过类图看看结构\",{\"1\":{\"231\":1}}],[\"我们势必要需求修改\",{\"1\":{\"227\":1}}],[\"我们第一想法就是使用工具类\",{\"1\":{\"183\":1}}],[\"我们允许玩家如果感觉与\",{\"1\":{\"177\":1}}],[\"我们已经明白双分派是怎么回事了\",{\"1\":{\"173\":1}}],[\"我们就只和工厂打交道就可以了\",{\"1\":{\"226\":1}}],[\"我们就以这个为例\",{\"1\":{\"170\":1}}],[\"我们就会发现是一个名为\",{\"1\":{\"100\":1}}],[\"我们就会发现需要给\",{\"1\":{\"86\":1}}],[\"我们也可以自己定义迭代器的子类以支持新的遍历方式\",{\"1\":{\"164\":1}}],[\"我们需要创建一个黑马品牌的安全门\",{\"1\":{\"259\":1}}],[\"我们需要\",{\"1\":{\"256\":1}}],[\"我们需要看具体的\",{\"1\":{\"192\":1}}],[\"我们需要将待解决的问题\",{\"1\":{\"183\":1}}],[\"我们需要修改上面判断逻辑\",{\"1\":{\"142\":1}}],[\"我们需要实现网络通信\",{\"1\":{\"79\":1}}],[\"我们出去吃饭都会遇到下面的场景\",{\"1\":{\"129\":1}}],[\"我们去旅游选择出行模式有很多种\",{\"1\":{\"122\":1}}],[\"我们去代售点买票就方便很多了\",{\"1\":{\"74\":1}}],[\"我们可将组合模式分为透明组合模式和安全组合模式两种形式\",{\"1\":{\"105\":1}}],[\"我们可以对上面的程序进行修改\",{\"1\":{\"173\":1}}],[\"我们可以对这些形状向上抽取出\",{\"1\":{\"111\":1}}],[\"我们可以看见\",{\"1\":{\"127\":1}}],[\"我们可以看到以下几个信息\",{\"1\":{\"75\":1}}],[\"我们可以发现有很多的类\",{\"1\":{\"91\":1}}],[\"我们可以利用继承的方式来设计类的关系\",{\"1\":{\"91\":1}}],[\"我们可以进行灵活处理\",{\"1\":{\"77\":1}}],[\"我们先看下面的例子\",{\"1\":{\"113\":1}}],[\"我们先画出类图\",{\"1\":{\"104\":1}}],[\"我们先来看一个快餐店的例子\",{\"1\":{\"86\":1}}],[\"我们的需求是针对一个菜单\",{\"1\":{\"104\":1}}],[\"我们在访问别的一些管理系统时\",{\"1\":{\"104\":1}}],[\"我们只需要修改\",{\"1\":{\"258\":1}}],[\"我们只需要修改适配器类\",{\"1\":{\"84\":1}}],[\"我们只需要再定义一个类实现\",{\"1\":{\"93\":1}}],[\"我们此时可以考虑使用桥接模式\",{\"1\":{\"91\":1}}],[\"我们以\",{\"1\":{\"88\":1,\"166\":1}}],[\"我们使用观察者模式来模拟这样的场景\",{\"1\":{\"150\":1}}],[\"我们使用装饰者模式对快餐店案例进行改进\",{\"1\":{\"86\":1}}],[\"我们使用对象适配器模式将读卡器的案例进行改写\",{\"1\":{\"84\":1}}],[\"我们将网络通信部分隐藏起来\",{\"1\":{\"79\":1}}],[\"我们再次使用\",{\"1\":{\"76\":1}}],[\"我们通过案例来感受一下静态代理\",{\"1\":{\"74\":1}}],[\"我们想让生成的代码都继承这个\",{\"1\":{\"13\":1}}],[\"我这有三室的房子\",{\"1\":{\"157\":1}}],[\"我这里是\",{\"1\":{\"42\":1}}],[\"我这边已经改好了\",{\"1\":{\"13\":1}}],[\"我没有图形化\",{\"1\":{\"32\":1}}],[\"更新yum软件包索引\",{\"1\":{\"45\":1}}],[\"更新时\",{\"1\":{\"15\":1}}],[\"更新时间\",{\"1\":{\"5\":1}}],[\"更新失败\",{\"1\":{\"13\":1}}],[\"更新\",{\"1\":{\"13\":1}}],[\"页面大小\",{\"1\":{\"13\":1}}],[\"是指\",{\"1\":{\"260\":1}}],[\"是指挥者\",{\"1\":{\"236\":1}}],[\"是其子类\",{\"1\":{\"256\":1}}],[\"是为了使程序的扩展性好\",{\"1\":{\"256\":1}}],[\"是为了更好的使用\",{\"1\":{\"42\":1}}],[\"是系统编码和测试的重要模型\",{\"1\":{\"249\":1}}],[\"是系统层次遍历的最小单位\",{\"1\":{\"103\":1}}],[\"是显示了模型的静态结构\",{\"1\":{\"248\":1}}],[\"是对类的封装性\",{\"1\":{\"245\":1}}],[\"是对同样实现了\",{\"1\":{\"86\":1}}],[\"是前辈们的代码设计经验的总结\",{\"1\":{\"244\":1}}],[\"是具体的建造者\",{\"1\":{\"236\":1}}],[\"是具体的工厂类\",{\"1\":{\"231\":1}}],[\"是产品\",{\"1\":{\"236\":1}}],[\"是用来设计软件的可视化建模语言\",{\"1\":{\"247\":1}}],[\"是用来解析配置文件并在注册表中注册\",{\"1\":{\"206\":1}}],[\"是用于把一组相似的对象当作一个单一的对象\",{\"1\":{\"102\":1}}],[\"是如何定义及怎样加载的\",{\"1\":{\"192\":1}}],[\"是有继承关系的\",{\"1\":{\"192\":1}}],[\"是该模块的核心接口\",{\"1\":{\"189\":1}}],[\"是源代码语法结构的一种抽象表示\",{\"1\":{\"183\":1}}],[\"是抽象建造者\",{\"1\":{\"236\":1}}],[\"是抽象表达式的子类\",{\"1\":{\"184\":1}}],[\"是抽象同事类的实现者\",{\"1\":{\"156\":1}}],[\"是抽象化角色的子类\",{\"1\":{\"92\":1}}],[\"是观察者的抽象类\",{\"1\":{\"149\":1}}],[\"是职责链\",{\"1\":{\"140\":1}}],[\"是因为可以根据实际需求来更改设置\",{\"1\":{\"138\":1}}],[\"是命令的receiver\",{\"1\":{\"131\":1}}],[\"是模板方法的组成部分\",{\"1\":{\"116\":1}}],[\"是实现算法各个步骤的方法\",{\"1\":{\"116\":1}}],[\"是菜单项\",{\"1\":{\"104\":1}}],[\"是一套被反复使用\",{\"1\":{\"244\":1}}],[\"是一样的\",{\"1\":{\"169\":1}}],[\"是一个内部类\",{\"1\":{\"166\":1}}],[\"是一个典型命令模式\",{\"1\":{\"134\":1}}],[\"是一个接口\",{\"1\":{\"100\":1}}],[\"是一个功能强大\",{\"1\":{\"76\":1}}],[\"是一种通过为多个复杂的子系统提供一个一致的接口\",{\"1\":{\"96\":1}}],[\"是欧洲标准\",{\"1\":{\"81\":1}}],[\"是第三方提供的包\",{\"1\":{\"76\":1}}],[\"是代理类吗\",{\"1\":{\"75\":1}}],[\"是代理对象所代表的真实对象\",{\"1\":{\"73\":1}}],[\"是最终要引用的对象\",{\"1\":{\"73\":1}}],[\"是否重写可以在代码生成工具里面修改\",{\"1\":{\"14\":1}}],[\"是否成功\",{\"1\":{\"10\":1}}],[\"是\",{\"1\":{\"11\":1,\"86\":2,\"222\":1}}],[\"这大大降低了客户程序与实现细节的耦合度\",{\"1\":{\"258\":1}}],[\"这对用户肯定是不友好的\",{\"1\":{\"258\":1}}],[\"这\",{\"1\":{\"243\":1,\"251\":1}}],[\"这显然违背了软件设计的开闭原则\",{\"1\":{\"226\":1}}],[\"这三个接口共同定义了\",{\"1\":{\"192\":1}}],[\"这一系列的\",{\"1\":{\"192\":1}}],[\"这就是浅克隆的效果\",{\"1\":{\"234\":1}}],[\"这就是解释器模式的思维\",{\"1\":{\"183\":1}}],[\"这就不符合要求\",{\"1\":{\"183\":1}}],[\"这符合单一职责原则\",{\"1\":{\"180\":1}}],[\"这不就是多态吗\",{\"1\":{\"173\":1}}],[\"这违背了\",{\"1\":{\"171\":1}}],[\"这部分代码还是比较简单\",{\"1\":{\"166\":1}}],[\"这在一定程度上增加了系统的复杂性\",{\"1\":{\"164\":1}}],[\"这在编译阶段不会出错\",{\"1\":{\"105\":1}}],[\"这会让对象的关系更容易理解和实现\",{\"1\":{\"158\":1}}],[\"这会导致类的个数增加\",{\"1\":{\"118\":1}}],[\"这避免了使用众多的\",{\"1\":{\"139\":1}}],[\"这增加了难度\",{\"1\":{\"136\":1}}],[\"这也是\",{\"1\":{\"127\":1}}],[\"这也就印证了我们之前说的真实类和代理类实现同样的接口\",{\"1\":{\"75\":1}}],[\"这导致一种反向的控制结构\",{\"1\":{\"118\":1}}],[\"这类方法名一般为\",{\"1\":{\"116\":1}}],[\"这种行为的结果符合我们的预期\",{\"1\":{\"257\":1}}],[\"这种情况需要使用深克隆\",{\"1\":{\"234\":1}}],[\"这种方式比较好理解\",{\"1\":{\"224\":1}}],[\"这种模式涉及到一个单一的类\",{\"1\":{\"222\":1}}],[\"这种类型的设计模式属于创建型模式\",{\"1\":{\"222\":1}}],[\"这种类型的设计模式属于结构型模式\",{\"1\":{\"102\":1}}],[\"这种没有足够了解证券知识的情况下做股票是很容易亏钱的\",{\"1\":{\"96\":1}}],[\"这样写起来虽然简单\",{\"1\":{\"257\":1}}],[\"这样做确实简化了系统结构\",{\"1\":{\"236\":1}}],[\"这样做的好处是确保所有的构件类都有相同的接口\",{\"1\":{\"105\":1}}],[\"这样就降低了客户与实现模块间的耦合\",{\"1\":{\"258\":1}}],[\"这样就解决了简单工厂模式的缺点\",{\"1\":{\"228\":1}}],[\"这样就减小了系统的耦合\",{\"1\":{\"155\":1}}],[\"这样只需要修改工厂类的代码\",{\"1\":{\"227\":1}}],[\"这样也就解除了和\",{\"1\":{\"227\":1}}],[\"这样可以降低系统的耦合度\",{\"1\":{\"221\":1}}],[\"这样可以简化聚合类的设计\",{\"1\":{\"164\":1}}],[\"这样我们使用时就不需要进行类型强转了\",{\"1\":{\"192\":1}}],[\"这样每一个访问者的功能都比较单一\",{\"1\":{\"171\":1}}],[\"这样一来\",{\"1\":{\"158\":1}}],[\"这样的判断\",{\"1\":{\"142\":1}}],[\"这样的例子还有很多\",{\"1\":{\"136\":1}}],[\"这样方便将命令对象进行存储\",{\"1\":{\"129\":1}}],[\"这样两者之间通过命令对象进行沟通\",{\"1\":{\"129\":1}}],[\"这样即使在\",{\"1\":{\"100\":1}}],[\"这样会大大降低应用程序的复杂度\",{\"1\":{\"96\":1}}],[\"这样使得我们的插头在当地能使用\",{\"1\":{\"81\":1}}],[\"这样\",{\"1\":{\"77\":1,\"179\":1}}],[\"这个接口规定要实现复杂对象的那些部分的创建\",{\"1\":{\"235\":1}}],[\"这个模式适用于\",{\"1\":{\"235\":1}}],[\"这个类提供了一种访问其唯一的对象的方式\",{\"1\":{\"222\":1}}],[\"这个使用工厂模式\",{\"1\":{\"214\":1}}],[\"这个解析过程主要通过\",{\"1\":{\"194\":1}}],[\"这个解释器使用该标识来解释语言中的句子\",{\"1\":{\"183\":1}}],[\"这个宽接口允许它读取所有的数据\",{\"1\":{\"176\":1}}],[\"这个窄接口只允许他把备忘录对象传给其他的对象\",{\"1\":{\"176\":1}}],[\"这个分派过程在编译时期就完成了\",{\"1\":{\"173\":1}}],[\"这个结果可能出乎一些人的意料了\",{\"1\":{\"173\":1}}],[\"这个主题对象在状态变化时\",{\"1\":{\"148\":1}}],[\"这个事绝对是合理的\",{\"1\":{\"144\":1}}],[\"这个是客户端真正触发命令并要求命令执行相应操作的地方\",{\"1\":{\"130\":1}}],[\"这个方法中\",{\"1\":{\"127\":1}}],[\"这个\",{\"1\":{\"127\":1}}],[\"这个例子其实就是典型的代理模式\",{\"1\":{\"74\":1}}],[\"这个时候\",{\"1\":{\"13\":1}}],[\"这个时候可以抛出\",{\"1\":{\"11\":1}}],[\"这时候电梯可以开门\",{\"1\":{\"144\":1}}],[\"这时候电梯可以运行\",{\"1\":{\"144\":1}}],[\"这时候电梯只能停止\",{\"1\":{\"144\":1}}],[\"这时候电梯只能关闭\",{\"1\":{\"144\":1}}],[\"这时候可以使用模板方法模式\",{\"1\":{\"119\":1}}],[\"这时\",{\"1\":{\"72\":1}}],[\"这些皮肤有共同的特点\",{\"1\":{\"256\":1}}],[\"这些工厂只生产同种类产品\",{\"1\":{\"229\":1}}],[\"这些对象同当前对象存在关联\",{\"1\":{\"260\":1}}],[\"这些对象都需要创建\",{\"1\":{\"226\":1}}],[\"这些对象就要占用很多的内存空间\",{\"1\":{\"111\":1}}],[\"这些模块可以分为\",{\"1\":{\"189\":1}}],[\"这些类的代码编写都不会特别复杂\",{\"1\":{\"186\":1}}],[\"这些方法可以向外界提供享元对象的内部数据\",{\"1\":{\"110\":1}}],[\"这些成员对象即可是容器对象也可以是叶子对象\",{\"1\":{\"102\":1}}],[\"这些需要自己下载\",{\"1\":{\"46\":1}}],[\"这些我们只要生成代码\",{\"1\":{\"14\":1}}],[\"这里就完成了第二次分派\",{\"1\":{\"173\":1}}],[\"这里就不一一展开了\",{\"1\":{\"15\":1}}],[\"这里是方法重写\",{\"1\":{\"173\":1}}],[\"这里完成第一次分派\",{\"1\":{\"173\":1}}],[\"这里什么也不做\",{\"1\":{\"144\":1}}],[\"这里我们在调用\",{\"1\":{\"127\":1}}],[\"这里可以理解为销售员\",{\"1\":{\"124\":1}}],[\"这里给出的默认实现是抛出异常\",{\"1\":{\"104\":1}}],[\"这里的经纪人是明星的朋友\",{\"1\":{\"260\":1}}],[\"这里的符号\",{\"1\":{\"183\":1}}],[\"这里的\",{\"1\":{\"104\":1,\"173\":1}}],[\"这里姑且将这个统一的接口称为菜单组件\",{\"1\":{\"104\":1}}],[\"这里\",{\"1\":{\"43\":1,\"236\":1}}],[\"这里只是把它记录下载\",{\"1\":{\"32\":2}}],[\"这里需要自行下载\",{\"1\":{\"22\":1}}],[\"这里使用\",{\"1\":{\"16\":1,\"42\":1}}],[\"这里主要是学习为主\",{\"1\":{\"16\":1}}],[\"这是设计模式领域里程碑的事件\",{\"1\":{\"243\":1}}],[\"这是一个标识接口\",{\"1\":{\"179\":1}}],[\"这是一个抽象角色\",{\"1\":{\"123\":1}}],[\"这是一种过度耦合的架构\",{\"1\":{\"155\":1}}],[\"这是再正常不过了\",{\"1\":{\"144\":1}}],[\"这是关闭状态要实现的动作\",{\"1\":{\"144\":1}}],[\"这是在运行状态下要实现的方法\",{\"1\":{\"144\":1}}],[\"这是肯定了\",{\"1\":{\"144\":1}}],[\"这是因为忘记了配置数据源\",{\"1\":{\"7\":1}}],[\"这是因为没有指定\",{\"1\":{\"7\":1}}],[\"这是因为没有引入\",{\"1\":{\"6\":1}}],[\"这是运行的时候没有包含\",{\"1\":{\"6\":1}}],[\"影响条数可能是\",{\"1\":{\"11\":1}}],[\"操作和恢复\",{\"1\":{\"133\":1}}],[\"操作\",{\"1\":{\"132\":1,\"133\":1,\"175\":1}}],[\"操作起来都比较麻烦\",{\"1\":{\"98\":1}}],[\"操作系统版本\",{\"1\":{\"93\":1}}],[\"操作异常\",{\"1\":{\"11\":1}}],[\"操作异常类\",{\"0\":{\"11\":1}}],[\"操作时\",{\"1\":{\"11\":1}}],[\"heimaspecificskin\",{\"1\":{\"256\":1}}],[\"helm\",{\"1\":{\"243\":1}}],[\"hello\",{\"1\":{\"83\":2,\"88\":1}}],[\"heatoil\",{\"1\":{\"117\":2}}],[\"healthy\",{\"1\":{\"43\":5}}],[\"healthcheck\",{\"1\":{\"43\":4}}],[\"h\",{\"1\":{\"75\":10,\"113\":3}}],[\"hmac\",{\"1\":{\"57\":3}}],[\"http\",{\"1\":{\"45\":1,\"188\":7}}],[\"httpservletrequest\",{\"1\":{\"100\":2}}],[\"https\",{\"1\":{\"32\":1,\"45\":1,\"86\":1}}],[\"httpstatus\",{\"1\":{\"10\":7,\"12\":2}}],[\"hasnext\",{\"1\":{\"162\":1,\"163\":3,\"166\":2,\"231\":1}}],[\"hashmap<variable\",{\"1\":{\"185\":1}}],[\"hashmap<string\",{\"1\":{\"111\":2,\"131\":1,\"204\":1,\"211\":1}}],[\"hashmap\",{\"1\":{\"173\":2}}],[\"hashcode\",{\"1\":{\"75\":2}}],[\"handleleave\",{\"1\":{\"138\":5}}],[\"handler\",{\"1\":{\"137\":2,\"138\":13}}],[\"hangzhou\",{\"1\":{\"42\":1,\"43\":6}}],[\"hadoop101\",{\"1\":{\"58\":2}}],[\"hadoop100\",{\"1\":{\"32\":1,\"42\":1,\"50\":1}}],[\"hadoop\",{\"0\":{\"38\":1},\"1\":{\"38\":2,\"39\":1,\"42\":1,\"43\":20,\"46\":5,\"47\":32,\"49\":42,\"50\":1,\"57\":1,\"58\":4,\"60\":1,\"62\":2},\"2\":{\"53\":1}}],[\"hierarchicalbeanfactory\",{\"1\":{\"192\":2}}],[\"hi\",{\"1\":{\"127\":11}}],[\"high\",{\"1\":{\"113\":6}}],[\"historyserver\",{\"1\":{\"43\":4,\"47\":3,\"49\":6}}],[\"history\",{\"1\":{\"40\":1,\"49\":4}}],[\"hiveserver2\",{\"1\":{\"38\":1,\"40\":1,\"47\":2,\"49\":3}}],[\"hive\",{\"1\":{\"7\":1,\"38\":3,\"39\":2,\"40\":1,\"43\":4,\"46\":4,\"47\":7,\"49\":18}}],[\"hdfs\",{\"1\":{\"40\":2,\"43\":1,\"46\":1,\"47\":6,\"49\":18}}],[\"houseowner\",{\"1\":{\"157\":17}}],[\"hook\",{\"1\":{\"116\":1}}],[\"home\",{\"1\":{\"33\":3,\"47\":7,\"49\":27,\"170\":8}}],[\"home=$\",{\"1\":{\"47\":4}}],[\"home=\",{\"1\":{\"33\":1,\"47\":4}}],[\"hosts\",{\"1\":{\"42\":1}}],[\"hostnamectl\",{\"1\":{\"32\":1}}],[\"hostname\",{\"1\":{\"32\":2,\"49\":5}}],[\"host\",{\"1\":{\"22\":1,\"42\":1}}],[\"消息\",{\"1\":{\"10\":1}}],[\"lattecoffee\",{\"1\":{\"226\":1}}],[\"lastret\",{\"1\":{\"166\":2}}],[\"language\",{\"1\":{\"189\":1,\"247\":1}}],[\"lang\",{\"1\":{\"75\":8,\"113\":1}}],[\"lang=zh\",{\"1\":{\"47\":1}}],[\"l\",{\"1\":{\"111\":2}}],[\"lbox\",{\"1\":{\"111\":5}}],[\"left\",{\"1\":{\"185\":12}}],[\"leave\",{\"1\":{\"138\":20}}],[\"leaverequest\",{\"1\":{\"138\":9}}],[\"leaf\",{\"1\":{\"103\":1}}],[\"legacymergesort\",{\"1\":{\"127\":2}}],[\"len\",{\"1\":{\"120\":7}}],[\"length\",{\"1\":{\"49\":3,\"86\":2,\"113\":1,\"120\":2,\"127\":2,\"166\":1}}],[\"level\",{\"1\":{\"104\":9}}],[\"ls\",{\"1\":{\"59\":1}}],[\"ln\",{\"1\":{\"47\":1}}],[\"ll\",{\"1\":{\"32\":1}}],[\"liftstate\",{\"1\":{\"144\":18}}],[\"lift\",{\"1\":{\"142\":9}}],[\"lifetime\",{\"1\":{\"58\":2}}],[\"light\",{\"1\":{\"98\":7}}],[\"limit\",{\"1\":{\"58\":1}}],[\"libdefaults\",{\"1\":{\"58\":1}}],[\"libs\",{\"1\":{\"55\":2}}],[\"lib\",{\"1\":{\"33\":2}}],[\"linux\",{\"0\":{\"23\":1,\"29\":1},\"1\":{\"33\":1,\"45\":1,\"46\":1,\"47\":1,\"93\":1},\"2\":{\"37\":1}}],[\"listablebeanfactory\",{\"1\":{\"192\":2}}],[\"list<element>\",{\"1\":{\"207\":2}}],[\"list<e>\",{\"1\":{\"166\":1}}],[\"list<propertyvalue>\",{\"1\":{\"200\":2}}],[\"list<animal>\",{\"1\":{\"170\":1}}],[\"list<string>\",{\"1\":{\"166\":1,\"231\":1}}],[\"list<student>\",{\"1\":{\"163\":3}}],[\"list<observer>\",{\"1\":{\"150\":1}}],[\"list<filter>\",{\"1\":{\"140\":1}}],[\"list<menucomponent>\",{\"1\":{\"104\":1}}],[\"listen\",{\"1\":{\"49\":1}}],[\"list\",{\"1\":{\"13\":3,\"32\":1,\"63\":1,\"156\":1,\"163\":10,\"166\":5,\"207\":2,\"231\":5}}],[\"license\",{\"1\":{\"7\":2}}],[\"loadbeandefinitions\",{\"1\":{\"194\":4,\"206\":1,\"207\":1,\"211\":1}}],[\"loader\",{\"1\":{\"75\":1}}],[\"lo\",{\"1\":{\"127\":13}}],[\"low\",{\"1\":{\"113\":6}}],[\"locations\",{\"1\":{\"194\":1}}],[\"location\",{\"1\":{\"194\":1}}],[\"local\",{\"1\":{\"60\":1,\"62\":1,\"63\":5}}],[\"localtime\",{\"1\":{\"32\":1,\"47\":1}}],[\"localdatetime\",{\"1\":{\"15\":6}}],[\"localhost\",{\"1\":{\"6\":1,\"8\":1,\"14\":1}}],[\"lock\",{\"1\":{\"59\":1}}],[\"lookup\",{\"1\":{\"58\":1}}],[\"long\",{\"1\":{\"13\":2}}],[\"lombok\",{\"1\":{\"11\":1}}],[\"loglevel\",{\"1\":{\"49\":6}}],[\"logs\",{\"1\":{\"47\":1,\"49\":9}}],[\"logging\",{\"1\":{\"8\":1,\"58\":1}}],[\"log\",{\"1\":{\"8\":1,\"49\":11,\"58\":6}}],[\"查找中国时区的完整名称\",{\"1\":{\"32\":1}}],[\"查看代理类的结构\",{\"1\":{\"75\":1}}],[\"查看所有主体\",{\"1\":{\"63\":1}}],[\"查看认证\",{\"1\":{\"63\":1}}],[\"查看路径下是否生成以下文件\",{\"1\":{\"59\":1}}],[\"查看是否安装成功\",{\"1\":{\"45\":1}}],[\"查看是否安装java和mariadb\",{\"1\":{\"32\":1}}],[\"查看java版本\",{\"1\":{\"33\":1}}],[\"查看当前hostname\",{\"1\":{\"32\":1}}],[\"查看当前时区\",{\"1\":{\"32\":1}}],[\"查看\",{\"1\":{\"17\":1}}],[\"查看生成后的实体类发现有问题\",{\"1\":{\"6\":1}}],[\"查询所有\",{\"1\":{\"13\":1}}],[\"查询依赖发现最新版本为\",{\"1\":{\"4\":1}}],[\"添加操作\",{\"1\":{\"170\":1}}],[\"添加\",{\"1\":{\"162\":1}}],[\"添加菜单\",{\"1\":{\"104\":1}}],[\"添加了缓冲区\",{\"1\":{\"88\":1}}],[\"添加以下内容\",{\"1\":{\"33\":1}}],[\"添加sudo权限\",{\"1\":{\"32\":2}}],[\"添加用户\",{\"1\":{\"32\":1}}],[\"添加yum\",{\"1\":{\"32\":1}}],[\"添加根挂载点\",{\"1\":{\"25\":1}}],[\"添加挂载点\",{\"1\":{\"25\":1}}],[\"添加分页插件\",{\"1\":{\"15\":1}}],[\"添加provided依赖到类路径\",{\"1\":{\"6\":1}}],[\"添加依赖\",{\"1\":{\"3\":1,\"16\":1}}],[\"rolestatecaretaker\",{\"1\":{\"178\":6,\"179\":8}}],[\"rolestatememento\",{\"1\":{\"178\":17,\"179\":13}}],[\"rootelement\",{\"1\":{\"207\":4}}],[\"root\",{\"0\":{\"28\":1},\"1\":{\"6\":1,\"14\":1,\"63\":2}}],[\"ralph\",{\"1\":{\"243\":1}}],[\"randomaccess\",{\"1\":{\"166\":1}}],[\"range\",{\"1\":{\"113\":1,\"127\":1}}],[\"raw\",{\"1\":{\"86\":1}}],[\"rdns\",{\"1\":{\"58\":1}}],[\"rmvb文件\",{\"1\":{\"93\":2}}],[\"rmvb\",{\"1\":{\"93\":1}}],[\"rm\",{\"1\":{\"43\":1,\"47\":2,\"49\":6}}],[\"rpc\",{\"1\":{\"40\":1,\"47\":2}}],[\"rpm\",{\"1\":{\"32\":4}}],[\"richard\",{\"1\":{\"243\":1}}],[\"right\",{\"1\":{\"185\":12}}],[\"ri\",{\"1\":{\"32\":1}}],[\"r<list<t>>\",{\"1\":{\"13\":1}}],[\"r<page<t>>\",{\"1\":{\"13\":1}}],[\"r<void>\",{\"1\":{\"12\":2}}],[\"r<>\",{\"1\":{\"10\":5}}],[\"r<t>\",{\"1\":{\"10\":6,\"13\":5}}],[\"r\",{\"1\":{\"10\":2,\"12\":2,\"13\":7,\"32\":1}}],[\"runtime\",{\"0\":{\"225\":1},\"1\":{\"225\":2}}],[\"runtimeexception\",{\"1\":{\"11\":1,\"75\":4,\"224\":1}}],[\"runningstate\",{\"1\":{\"144\":6}}],[\"running\",{\"1\":{\"142\":7}}],[\"runnable\",{\"1\":{\"134\":6}}],[\"runable\",{\"1\":{\"134\":1}}],[\"runhi++\",{\"1\":{\"127\":3}}],[\"runhi\",{\"1\":{\"127\":10}}],[\"run\",{\"0\":{\"42\":1},\"1\":{\"7\":1,\"16\":1,\"42\":1,\"43\":1,\"47\":2,\"127\":1,\"134\":2,\"142\":3,\"144\":10}}],[\"registerbeandefinition\",{\"1\":{\"195\":1,\"203\":1,\"204\":1,\"207\":1}}],[\"registry\",{\"1\":{\"42\":1,\"43\":6,\"45\":1,\"207\":4,\"211\":3,\"212\":2}}],[\"rectangle\",{\"1\":{\"257\":2}}],[\"recoverstate\",{\"1\":{\"178\":2,\"179\":2}}],[\"receiver=new\",{\"1\":{\"131\":1}}],[\"receiver\",{\"1\":{\"130\":1,\"131\":7,\"134\":11,\"173\":1}}],[\"req\",{\"1\":{\"140\":3}}],[\"requestfacade\",{\"1\":{\"100\":5}}],[\"request\",{\"1\":{\"100\":5,\"140\":13}}],[\"requestbody\",{\"1\":{\"13\":3}}],[\"requiredtype\",{\"1\":{\"192\":5}}],[\"required\",{\"1\":{\"16\":2}}],[\"reverserange\",{\"1\":{\"127\":1}}],[\"reverse\",{\"1\":{\"127\":1}}],[\"revbbfile\",{\"1\":{\"93\":1}}],[\"ref\",{\"1\":{\"199\":8,\"207\":3,\"212\":4}}],[\"refresh\",{\"1\":{\"196\":3,\"210\":2,\"211\":1,\"212\":2}}],[\"ref=\",{\"1\":{\"188\":1,\"190\":1,\"197\":1}}],[\"refined\",{\"1\":{\"92\":1}}],[\"reflect\",{\"1\":{\"75\":4}}],[\"redo\",{\"1\":{\"132\":1,\"133\":1}}],[\"red\",{\"1\":{\"86\":1}}],[\"remote\",{\"1\":{\"79\":1}}],[\"removebeandefinition\",{\"1\":{\"195\":1,\"203\":1,\"204\":1}}],[\"removebyid\",{\"1\":{\"13\":2}}],[\"removestudent\",{\"1\":{\"163\":2}}],[\"remove\",{\"1\":{\"16\":1,\"104\":4,\"105\":2,\"150\":1,\"163\":1,\"204\":1}}],[\"re\",{\"1\":{\"59\":1,\"60\":1,\"62\":1}}],[\"renew\",{\"1\":{\"58\":1}}],[\"real\",{\"1\":{\"73\":1}}],[\"realm\",{\"1\":{\"58\":3}}],[\"realms\",{\"1\":{\"57\":1,\"58\":1}}],[\"readobject\",{\"1\":{\"234\":1}}],[\"readresolve\",{\"1\":{\"224\":1}}],[\"reader\",{\"1\":{\"86\":4,\"207\":2}}],[\"readtf\",{\"1\":{\"83\":3,\"84\":1}}],[\"readsd\",{\"1\":{\"83\":7,\"84\":3}}],[\"read\",{\"1\":{\"16\":1,\"83\":3,\"84\":1,\"86\":4,\"120\":11,\"207\":1}}],[\"reload\",{\"1\":{\"45\":1}}],[\"retries\",{\"1\":{\"43\":4}}],[\"return\",{\"1\":{\"6\":2,\"10\":5,\"12\":2,\"13\":7,\"14\":2,\"15\":1,\"16\":2,\"75\":9,\"76\":2,\"83\":4,\"84\":1,\"86\":11,\"104\":2,\"111\":5,\"113\":2,\"120\":4,\"127\":5,\"131\":2,\"138\":4,\"140\":2,\"144\":1,\"153\":2,\"157\":2,\"163\":3,\"166\":3,\"178\":8,\"179\":8,\"183\":3,\"185\":9,\"199\":3,\"200\":8,\"201\":3,\"204\":4,\"207\":1,\"212\":6,\"224\":3,\"236\":1}}],[\"replicas\",{\"1\":{\"43\":2}}],[\"replicated\",{\"1\":{\"43\":3}}],[\"repo\",{\"1\":{\"32\":3,\"45\":2}}],[\"repos\",{\"1\":{\"32\":1}}],[\"resize\",{\"1\":{\"257\":2}}],[\"resolvabletype\",{\"1\":{\"192\":2}}],[\"resourceloader\",{\"1\":{\"194\":1}}],[\"resource\",{\"1\":{\"46\":1,\"47\":6,\"49\":3,\"194\":3}}],[\"resourcemanager\",{\"1\":{\"43\":6,\"49\":4}}],[\"resources\",{\"1\":{\"6\":1,\"14\":1,\"194\":1}}],[\"res\",{\"1\":{\"140\":3}}],[\"response\",{\"1\":{\"140\":13}}],[\"result\",{\"1\":{\"75\":4,\"76\":2}}],[\"restart\",{\"1\":{\"43\":5,\"45\":1}}],[\"restcontrolleradvice\",{\"1\":{\"12\":1}}],[\"+=\",{\"1\":{\"183\":1}}],[\"++\",{\"1\":{\"163\":1}}],[\"+\",{\"1\":{\"6\":2,\"13\":4,\"14\":2,\"83\":2,\"86\":13,\"93\":2,\"111\":3,\"113\":4,\"120\":1,\"127\":2,\"131\":4,\"138\":15,\"150\":2,\"153\":2,\"157\":6,\"166\":1,\"178\":3,\"179\":3,\"183\":5,\"185\":12,\"214\":1,\"234\":1,\"251\":3}}],[\"ois\",{\"1\":{\"234\":2}}],[\"oos\",{\"1\":{\"234\":3}}],[\"oop\",{\"1\":{\"190\":1}}],[\"owner\",{\"1\":{\"170\":5}}],[\"ofobuilder\",{\"1\":{\"236\":1}}],[\"of\",{\"1\":{\"127\":2,\"188\":1,\"189\":1,\"243\":1}}],[\"off\",{\"1\":{\"98\":8,\"120\":6}}],[\"offset\",{\"1\":{\"86\":2}}],[\"o2\",{\"1\":{\"127\":2}}],[\"o1\",{\"1\":{\"127\":2}}],[\"observable\",{\"1\":{\"153\":6}}],[\"observer\",{\"1\":{\"149\":1,\"150\":15,\"153\":6}}],[\"obox\",{\"1\":{\"111\":5}}],[\"obj\",{\"1\":{\"76\":2,\"212\":3}}],[\"objectinputstream\",{\"1\":{\"234\":2}}],[\"objectoutputstream\",{\"1\":{\"234\":2}}],[\"object>\",{\"1\":{\"211\":2}}],[\"objectprovider<t>\",{\"1\":{\"192\":2}}],[\"object\",{\"1\":{\"75\":16,\"76\":2,\"153\":2,\"166\":1,\"169\":1,\"190\":1,\"192\":4,\"209\":1,\"212\":5,\"233\":1}}],[\"os\",{\"1\":{\"93\":2}}],[\"oriented\",{\"1\":{\"190\":1}}],[\"originator\",{\"1\":{\"176\":1}}],[\"org\",{\"1\":{\"188\":7}}],[\"ordercoffee\",{\"1\":{\"227\":1}}],[\"ordercommand\",{\"1\":{\"131\":6}}],[\"order2\",{\"1\":{\"131\":5}}],[\"order1\",{\"1\":{\"131\":5}}],[\"orderup\",{\"1\":{\"131\":2}}],[\"order\",{\"1\":{\"131\":15}}],[\"orange\",{\"1\":{\"86\":1}}],[\"or\",{\"1\":{\"79\":1}}],[\"out\",{\"1\":{\"74\":2,\"75\":3,\"76\":2,\"83\":7,\"84\":5,\"86\":5,\"93\":2,\"98\":9,\"104\":4,\"111\":1,\"113\":4,\"117\":7,\"124\":3,\"127\":1,\"131\":4,\"138\":7,\"140\":4,\"142\":7,\"144\":4,\"150\":1,\"153\":2,\"157\":2,\"166\":1,\"170\":6,\"173\":9,\"178\":6,\"179\":6,\"185\":1,\"188\":2,\"231\":1,\"234\":1}}],[\"outputfile\",{\"1\":{\"6\":1,\"14\":1}}],[\"outputdir\",{\"1\":{\"6\":1,\"14\":1}}],[\"opt\",{\"1\":{\"32\":3,\"33\":3,\"47\":12,\"49\":7}}],[\"openningstate\",{\"1\":{\"144\":6}}],[\"open\",{\"1\":{\"142\":3,\"144\":10}}],[\"opening\",{\"1\":{\"142\":7}}],[\"openapiconfig\",{\"1\":{\"7\":1}}],[\"openapidefinition\",{\"1\":{\"7\":1}}],[\"openapi\",{\"0\":{\"7\":1},\"1\":{\"7\":2}}],[\"operatingsystem\",{\"1\":{\"93\":2}}],[\"operatingsystemversion\",{\"1\":{\"93\":3}}],[\"operation\",{\"1\":{\"13\":7}}],[\"o\",{\"1\":{\"32\":1,\"76\":3,\"111\":2,\"153\":3}}],[\"on\",{\"1\":{\"39\":1,\"43\":4,\"49\":1,\"98\":8}}],[\"only\",{\"1\":{\"22\":1,\"260\":1}}],[\"one\",{\"1\":{\"13\":2,\"138\":2}}],[\"override\",{\"1\":{\"15\":2,\"86\":3,\"104\":5,\"111\":3,\"117\":4,\"138\":3,\"140\":2,\"142\":5,\"144\":16,\"150\":4,\"153\":1,\"163\":5,\"170\":6,\"173\":2,\"185\":8,\"200\":1,\"204\":6,\"207\":2,\"212\":2}}],[\"ok\",{\"1\":{\"10\":2,\"13\":7,\"59\":1}}],[\"ods\",{\"1\":{\"5\":1}}],[\"feed\",{\"1\":{\"170\":8}}],[\"flyweight\",{\"1\":{\"110\":5}}],[\"float\",{\"1\":{\"86\":10}}],[\"fw\",{\"1\":{\"88\":2}}],[\"four\",{\"1\":{\"243\":1}}],[\"foodname\",{\"1\":{\"131\":2}}],[\"fooddic\",{\"1\":{\"131\":3}}],[\"food2\",{\"1\":{\"86\":5}}],[\"food1\",{\"1\":{\"86\":5}}],[\"food\",{\"1\":{\"86\":3}}],[\"font>\",{\"1\":{\"86\":1}}],[\"forname\",{\"1\":{\"75\":6,\"212\":1}}],[\"forwardable\",{\"1\":{\"58\":1}}],[\"format\",{\"1\":{\"49\":1}}],[\"formated\",{\"1\":{\"49\":4}}],[\"formatservicefilename\",{\"1\":{\"6\":1,\"14\":1}}],[\"for\",{\"1\":{\"49\":8,\"62\":2,\"104\":3,\"113\":1,\"120\":1,\"131\":2,\"150\":1,\"170\":1,\"183\":1,\"200\":2,\"207\":2,\"211\":1,\"212\":2}}],[\"f\",{\"1\":{\"49\":9}}],[\"function\",{\"1\":{\"49\":8}}],[\"friends\",{\"1\":{\"260\":1}}],[\"friednoodles\",{\"1\":{\"86\":4}}],[\"friedrice\",{\"1\":{\"86\":5}}],[\"fry\",{\"1\":{\"117\":2}}],[\"from\",{\"1\":{\"47\":1}}],[\"freemarkertemplateengine\",{\"1\":{\"6\":1,\"14\":1}}],[\"freemarker<\",{\"1\":{\"4\":1}}],[\"fstab\",{\"1\":{\"32\":1}}],[\"field\",{\"1\":{\"251\":1}}],[\"fieldfill\",{\"1\":{\"6\":2,\"14\":2}}],[\"fight\",{\"1\":{\"178\":2,\"179\":2}}],[\"firstfilter\",{\"1\":{\"140\":2}}],[\"firewall\",{\"1\":{\"79\":1}}],[\"firewalld\",{\"1\":{\"32\":2}}],[\"filters\",{\"1\":{\"140\":4}}],[\"filter\",{\"1\":{\"140\":11}}],[\"filterchain\",{\"1\":{\"140\":12}}],[\"fileinputstream\",{\"1\":{\"234\":1}}],[\"fileoutputstream\",{\"1\":{\"234\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"192\":1}}],[\"filewriter\",{\"1\":{\"88\":2}}],[\"filename\",{\"1\":{\"49\":3,\"93\":10}}],[\"filename=substr\",{\"1\":{\"49\":3}}],[\"file\",{\"1\":{\"43\":6,\"57\":2,\"58\":4}}],[\"fi\",{\"1\":{\"49\":2}}],[\"finishbeaninitialization\",{\"1\":{\"211\":3,\"214\":1}}],[\"find\",{\"1\":{\"16\":1,\"127\":1}}],[\"finally\",{\"1\":{\"134\":1}}],[\"final\",{\"1\":{\"16\":1,\"75\":7,\"77\":1,\"87\":1,\"111\":2,\"113\":4,\"117\":2,\"138\":4,\"142\":4,\"144\":4,\"195\":2,\"200\":1}}],[\"facade\",{\"1\":{\"96\":1,\"97\":2,\"98\":3}}],[\"factory\",{\"1\":{\"75\":4,\"76\":2,\"110\":1,\"192\":1,\"227\":1,\"228\":1,\"229\":2}}],[\"fastfood\",{\"1\":{\"86\":27}}],[\"fast\",{\"1\":{\"45\":1}}],[\"fastautogenerator\",{\"1\":{\"6\":1,\"14\":1}}],[\"false\",{\"1\":{\"10\":3,\"58\":2,\"113\":1,\"134\":1}}],[\"=new\",{\"1\":{\"76\":1}}],[\"========\",{\"1\":{\"86\":2}}],[\"==\",{\"1\":{\"6\":1,\"14\":1,\"83\":1,\"113\":4,\"120\":4,\"127\":2,\"138\":1,\"140\":1,\"157\":1,\"212\":1,\"234\":1}}],[\"=\",{\"1\":{\"6\":5,\"7\":6,\"10\":6,\"13\":17,\"14\":5,\"15\":1,\"16\":6,\"22\":3,\"57\":8,\"58\":17,\"74\":2,\"75\":16,\"76\":5,\"83\":5,\"84\":5,\"86\":11,\"88\":2,\"93\":2,\"98\":4,\"104\":7,\"111\":5,\"113\":19,\"117\":2,\"120\":5,\"124\":1,\"127\":6,\"131\":14,\"134\":7,\"138\":15,\"140\":6,\"142\":6,\"144\":7,\"150\":2,\"153\":7,\"157\":7,\"163\":4,\"166\":9,\"170\":4,\"173\":11,\"178\":21,\"179\":22,\"183\":6,\"185\":17,\"188\":3,\"192\":1,\"195\":2,\"199\":6,\"200\":6,\"201\":4,\"204\":1,\"207\":15,\"211\":4,\"212\":22,\"224\":4,\"231\":3,\"234\":6,\"236\":1,\"251\":1}}],[\"john\",{\"1\":{\"243\":1}}],[\"johnson\",{\"1\":{\"243\":1}}],[\"jls7\",{\"1\":{\"113\":1}}],[\"j++\",{\"1\":{\"113\":1}}],[\"j\",{\"1\":{\"113\":1}}],[\"jsodkx19\",{\"1\":{\"45\":1}}],[\"json\",{\"1\":{\"45\":1}}],[\"jars\",{\"1\":{\"49\":3}}],[\"jar\",{\"1\":{\"33\":2,\"76\":1}}],[\"javaweb\",{\"1\":{\"140\":1}}],[\"java提供的动态代理相关类\",{\"1\":{\"75\":1}}],[\"javatemplate\",{\"1\":{\"14\":1}}],[\"java\",{\"1\":{\"6\":2,\"10\":1,\"13\":1,\"14\":4,\"15\":1,\"16\":1,\"32\":1,\"33\":2,\"47\":1,\"72\":2,\"75\":11,\"77\":1,\"86\":2,\"113\":1,\"153\":3,\"166\":5,\"173\":2,\"179\":1,\"222\":1,\"226\":1,\"233\":1}}],[\"jdbc\",{\"1\":{\"6\":1,\"8\":1,\"14\":1}}],[\"jdk动态代理方式\",{\"1\":{\"75\":2}}],[\"jdk1\",{\"1\":{\"21\":1,\"33\":1,\"47\":1,\"77\":7}}],[\"jdk\",{\"0\":{\"33\":1,\"75\":1,\"86\":1,\"88\":1,\"113\":1,\"120\":1,\"127\":1,\"134\":1,\"153\":1,\"166\":1,\"225\":1,\"231\":1},\"1\":{\"2\":1,\"33\":3,\"46\":2,\"47\":1,\"72\":1,\"75\":4,\"76\":4,\"77\":5,\"86\":3,\"134\":1,\"214\":1}}],[\"88\",{\"1\":{\"57\":2}}],[\"8u212\",{\"1\":{\"46\":1,\"47\":1}}],[\"8u361\",{\"1\":{\"33\":1}}],[\"8088\",{\"1\":{\"40\":1,\"42\":2,\"43\":3}}],[\"8020\",{\"1\":{\"40\":1,\"42\":2,\"43\":2}}],[\"8\",{\"0\":{\"79\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1},\"1\":{\"5\":1,\"21\":1,\"33\":3,\"47\":2,\"49\":3,\"77\":2,\"188\":1,\"197\":1}}],[\"8+\",{\"1\":{\"2\":1}}],[\"7天的请假\",{\"1\":{\"138\":1}}],[\"7d\",{\"1\":{\"58\":1}}],[\"7\",{\"0\":{\"17\":1,\"78\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1},\"1\":{\"5\":1,\"32\":1,\"70\":1,\"77\":2,\"113\":1,\"138\":2,\"246\":1}}],[\"4\",{\"0\":{\"7\":1,\"13\":1,\"14\":1,\"27\":1,\"35\":1,\"48\":1,\"60\":1,\"75\":1,\"84\":1,\"87\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":2,\"99\":1,\"105\":1,\"119\":1,\"125\":1,\"132\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":2,\"140\":1,\"145\":1,\"151\":1,\"158\":1,\"164\":1,\"171\":1,\"180\":1,\"186\":1,\"195\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":2,\"209\":2,\"210\":2,\"211\":2,\"212\":3,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"230\":1,\"235\":1,\"236\":1,\"237\":1,\"259\":1},\"1\":{\"5\":1,\"115\":1,\"127\":2,\"142\":1,\"155\":1,\"173\":1,\"183\":1,\"185\":1,\"189\":1,\"243\":2}}],[\"数据访问与集成\",{\"1\":{\"189\":1}}],[\"数据访问层\",{\"1\":{\"188\":1}}],[\"数据库与操作系统的备份操作\",{\"1\":{\"175\":1}}],[\"数据库事务管理中的回滚操作\",{\"1\":{\"175\":1}}],[\"数据库\",{\"0\":{\"59\":1}}],[\"数据\",{\"1\":{\"10\":1,\"201\":1,\"206\":1}}],[\"数据应用层\",{\"1\":{\"5\":1}}],[\"数据服务层\",{\"1\":{\"5\":1}}],[\"数据中间层\",{\"1\":{\"5\":1}}],[\"数据明细层\",{\"1\":{\"5\":1}}],[\"数据表准备\",{\"0\":{\"5\":1}}],[\"数仓层级表\",{\"1\":{\"5\":1}}],[\"employee\",{\"1\":{\"251\":1}}],[\"erichgamma\",{\"1\":{\"243\":1}}],[\"error\",{\"1\":{\"6\":1,\"7\":2,\"10\":3,\"12\":3,\"75\":4}}],[\"ele\",{\"1\":{\"231\":2}}],[\"element1\",{\"1\":{\"207\":4}}],[\"elements\",{\"1\":{\"207\":4}}],[\"element\",{\"1\":{\"169\":4,\"207\":8}}],[\"elementdata\",{\"1\":{\"166\":4}}],[\"el\",{\"1\":{\"189\":3}}],[\"else\",{\"1\":{\"98\":2,\"120\":2,\"125\":1,\"127\":3,\"138\":1,\"139\":1,\"142\":1,\"157\":1}}],[\"eclipse\",{\"1\":{\"122\":1}}],[\"echo\",{\"1\":{\"32\":1,\"47\":1,\"49\":15}}],[\"ee\",{\"1\":{\"120\":1}}],[\"egg\",{\"1\":{\"86\":3}}],[\"equals\",{\"1\":{\"75\":2,\"200\":2,\"212\":3}}],[\"esac\",{\"1\":{\"49\":1}}],[\"euo\",{\"1\":{\"49\":1}}],[\"eof\",{\"1\":{\"45\":2,\"49\":6}}],[\"etc\",{\"1\":{\"32\":5,\"33\":2,\"45\":2,\"47\":3,\"58\":3}}],[\"e\",{\"1\":{\"10\":4,\"12\":4,\"32\":3,\"49\":7,\"131\":2,\"166\":2,\"185\":4,\"212\":1}}],[\"exe\",{\"1\":{\"173\":14}}],[\"execution\",{\"1\":{\"16\":1}}],[\"execute\",{\"1\":{\"6\":1,\"14\":1,\"131\":3,\"173\":28}}],[\"example\",{\"1\":{\"58\":2}}],[\"exit\",{\"1\":{\"43\":4}}],[\"exists\",{\"1\":{\"5\":2}}],[\"expectedmodcount\",{\"1\":{\"166\":1}}],[\"expose\",{\"1\":{\"47\":6}}],[\"export\",{\"1\":{\"33\":3,\"49\":4}}],[\"expression\",{\"1\":{\"16\":2,\"183\":5,\"184\":3,\"185\":3,\"189\":3}}],[\"extends\",{\"1\":{\"11\":1,\"75\":2,\"83\":1,\"86\":5,\"93\":2,\"104\":2,\"111\":3,\"113\":1,\"117\":2,\"138\":3,\"144\":4,\"153\":1,\"157\":3,\"166\":1,\"173\":6,\"185\":4,\"195\":1,\"209\":1,\"210\":1,\"212\":2}}],[\"exceptionhandler\",{\"1\":{\"12\":2}}],[\"exception\",{\"1\":{\"10\":2,\"12\":2,\"88\":1,\"203\":2,\"204\":2,\"206\":1,\"207\":1,\"209\":2,\"210\":1,\"211\":2,\"212\":3,\"234\":1}}],[\"encoding=\",{\"1\":{\"188\":1,\"197\":1}}],[\"enctypes\",{\"1\":{\"57\":1}}],[\"end\",{\"1\":{\"127\":1}}],[\"enhancer\",{\"1\":{\"76\":7}}],[\"enter\",{\"1\":{\"59\":2,\"60\":2,\"62\":2}}],[\"entrypoint\",{\"1\":{\"47\":1}}],[\"entitybuilder\",{\"1\":{\"6\":1,\"14\":1}}],[\"entity\",{\"1\":{\"6\":2,\"13\":12,\"14\":3}}],[\"env文件\",{\"1\":{\"43\":1}}],[\"env\",{\"1\":{\"33\":1,\"43\":14,\"46\":2,\"47\":18,\"49\":1}}],[\"enforcing\",{\"1\":{\"32\":1}}],[\"enable\",{\"1\":{\"61\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"16\":1}}],[\"enabletablefieldannotation\",{\"1\":{\"6\":1,\"14\":1}}],[\"enablebasecolumnlist\",{\"1\":{\"6\":1,\"14\":1}}],[\"enablebaseresultmap\",{\"1\":{\"6\":1,\"14\":1}}],[\"enablereststyle\",{\"1\":{\"6\":1,\"14\":1}}],[\"enableremoveisprefix\",{\"1\":{\"6\":1,\"14\":1}}],[\"enablefileoverride\",{\"1\":{\"6\":4,\"14\":4}}],[\"enablelombok\",{\"1\":{\"6\":1,\"14\":1}}],[\"enablespringdoc\",{\"1\":{\"6\":1,\"14\":1}}],[\"engine=innodb\",{\"1\":{\"5\":1}}],[\"uml\",{\"0\":{\"247\":1},\"1\":{\"247\":2,\"251\":2}}],[\"uff1f\",{\"1\":{\"113\":2}}],[\"u4e2a\",{\"1\":{\"113\":2}}],[\"u4e00\",{\"1\":{\"113\":2}}],[\"u662f\",{\"1\":{\"113\":4}}],[\"u8c61\",{\"1\":{\"113\":4}}],[\"u548ci4\",{\"1\":{\"113\":1}}],[\"u548ci2\",{\"1\":{\"113\":1}}],[\"u540c\",{\"1\":{\"113\":2}}],[\"u5426\",{\"1\":{\"113\":2}}],[\"u5bf9\",{\"1\":{\"113\":4}}],[\"unified\",{\"1\":{\"247\":1}}],[\"unique\",{\"1\":{\"5\":1}}],[\"undo\",{\"1\":{\"132\":1,\"133\":1,\"175\":1}}],[\"undeclaredthrowableexception\",{\"1\":{\"75\":5}}],[\"unsharable\",{\"1\":{\"110\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"104\":4}}],[\"udp\",{\"1\":{\"58\":1}}],[\"util\",{\"1\":{\"59\":1,\"153\":2,\"166\":2}}],[\"utils\",{\"1\":{\"45\":1}}],[\"utf\",{\"1\":{\"47\":1,\"188\":1,\"197\":1}}],[\"usr\",{\"1\":{\"47\":1,\"57\":1}}],[\"usercontroller\",{\"1\":{\"188\":2}}],[\"userdaoimpl\",{\"1\":{\"188\":3,\"190\":1,\"193\":1,\"197\":1}}],[\"userdao\",{\"1\":{\"188\":18,\"190\":3,\"193\":1,\"197\":3}}],[\"user3\",{\"1\":{\"150\":1}}],[\"user3=new\",{\"1\":{\"150\":1}}],[\"user2\",{\"1\":{\"150\":1}}],[\"user2=new\",{\"1\":{\"150\":1}}],[\"user1\",{\"1\":{\"150\":1}}],[\"user1=new\",{\"1\":{\"150\":1}}],[\"userrequested\",{\"1\":{\"127\":1}}],[\"userserviceimpl\",{\"1\":{\"188\":3,\"190\":1,\"197\":1}}],[\"userservice\",{\"1\":{\"188\":12,\"190\":1,\"197\":1}}],[\"users\",{\"1\":{\"88\":1,\"234\":2}}],[\"useradd\",{\"1\":{\"32\":1}}],[\"user\",{\"1\":{\"6\":1,\"14\":1}}],[\"username=root\",{\"1\":{\"8\":1}}],[\"username\",{\"1\":{\"6\":2,\"14\":2}}],[\"use\",{\"1\":{\"5\":1}}],[\"uid\",{\"1\":{\"58\":1}}],[\"ui\",{\"1\":{\"17\":2,\"42\":1}}],[\"ui<\",{\"1\":{\"7\":1}}],[\"up\",{\"1\":{\"43\":1}}],[\"upsert失败\",{\"1\":{\"13\":1}}],[\"updatefill\",{\"1\":{\"15\":1}}],[\"updatetime\",{\"1\":{\"15\":2}}],[\"updatebyid\",{\"1\":{\"13\":1}}],[\"update\",{\"1\":{\"6\":2,\"11\":1,\"13\":1,\"14\":2,\"15\":1,\"16\":1,\"32\":1,\"150\":3,\"153\":3}}],[\"url=jdbc\",{\"1\":{\"8\":1}}],[\"url\",{\"1\":{\"6\":2,\"14\":2}}],[\"pv\",{\"1\":{\"200\":9}}],[\"photoshop\",{\"1\":{\"175\":1,\"181\":1}}],[\"person接口\",{\"1\":{\"170\":1}}],[\"person\",{\"1\":{\"157\":9,\"170\":14}}],[\"persistent\",{\"1\":{\"58\":1}}],[\"png\",{\"1\":{\"86\":3}}],[\"pictures\",{\"1\":{\"86\":1}}],[\"pipefail\",{\"1\":{\"49\":1}}],[\"pp\",{\"1\":{\"74\":2}}],[\"pki\",{\"1\":{\"58\":1}}],[\"pkinit\",{\"1\":{\"58\":1}}],[\"play\",{\"1\":{\"93\":4}}],[\"placed\",{\"1\":{\"58\":1}}],[\"plus\",{\"0\":{\"4\":1,\"15\":1},\"1\":{\"0\":1,\"2\":2,\"4\":8,\"8\":1,\"15\":1,\"183\":4,\"185\":5}}],[\"p\",{\"1\":{\"42\":6,\"45\":1,\"49\":2,\"153\":2}}],[\"pojo\",{\"0\":{\"198\":1}}],[\"position\",{\"1\":{\"163\":4}}],[\"postmapping\",{\"1\":{\"13\":2}}],[\"policemen\",{\"1\":{\"153\":4}}],[\"poursauce\",{\"1\":{\"117\":4}}],[\"pourvegetable\",{\"1\":{\"117\":4}}],[\"pouroil\",{\"1\":{\"117\":2}}],[\"port\",{\"1\":{\"47\":6,\"49\":5}}],[\"port=9083\",{\"1\":{\"47\":1}}],[\"port=9868\",{\"1\":{\"47\":1}}],[\"port=9870\",{\"1\":{\"47\":1}}],[\"port=10000\",{\"1\":{\"47\":1}}],[\"port=10020\",{\"1\":{\"47\":1}}],[\"port=19888\",{\"1\":{\"47\":1}}],[\"port=8088\",{\"1\":{\"47\":1}}],[\"port=8020\",{\"1\":{\"47\":1}}],[\"ports\",{\"1\":{\"43\":4,\"57\":2}}],[\"pointcut\",{\"1\":{\"16\":5}}],[\"publish\",{\"1\":{\"148\":1}}],[\"public\",{\"1\":{\"6\":3,\"7\":3,\"10\":6,\"11\":1,\"12\":3,\"13\":9,\"14\":3,\"15\":4,\"16\":5,\"74\":7,\"75\":23,\"76\":7,\"83\":15,\"84\":6,\"86\":30,\"88\":2,\"93\":16,\"98\":14,\"104\":15,\"111\":12,\"113\":6,\"117\":15,\"120\":4,\"124\":10,\"127\":5,\"131\":17,\"134\":9,\"138\":18,\"140\":13,\"142\":18,\"144\":39,\"150\":14,\"153\":12,\"157\":20,\"163\":10,\"166\":4,\"170\":17,\"173\":29,\"178\":25,\"179\":25,\"183\":3,\"185\":23,\"188\":11,\"192\":1,\"194\":1,\"195\":1,\"199\":9,\"200\":9,\"201\":8,\"203\":1,\"204\":7,\"206\":1,\"207\":4,\"209\":1,\"210\":1,\"211\":2,\"212\":4,\"224\":2,\"231\":2,\"234\":2,\"236\":5,\"251\":2}}],[\"put\",{\"1\":{\"49\":1,\"111\":3,\"131\":5,\"185\":1,\"204\":1,\"212\":1}}],[\"putmapping\",{\"1\":{\"13\":1}}],[\"pattern\",{\"1\":{\"222\":1,\"244\":1},\"2\":{\"218\":1,\"220\":1,\"242\":1,\"254\":1,\"263\":1}}],[\"path=$java\",{\"1\":{\"33\":1}}],[\"pathvariable\",{\"1\":{\"13\":4}}],[\"pathinfo\",{\"1\":{\"6\":1,\"14\":1}}],[\"package\",{\"1\":{\"75\":1}}],[\"packageconfig\",{\"1\":{\"6\":1,\"14\":1}}],[\"passwd\",{\"1\":{\"32\":1}}],[\"password=123\",{\"1\":{\"8\":1}}],[\"password\",{\"1\":{\"6\":2,\"14\":2,\"62\":2}}],[\"paginationinnerinterceptor\",{\"1\":{\"15\":2}}],[\"page<>\",{\"1\":{\"13\":1}}],[\"page\",{\"1\":{\"13\":4}}],[\"parsebean\",{\"1\":{\"207\":2}}],[\"parseint\",{\"1\":{\"113\":1}}],[\"parameter\",{\"1\":{\"13\":2}}],[\"parent\",{\"1\":{\"6\":1,\"14\":1}}],[\"prefix\",{\"1\":{\"192\":1}}],[\"preference\",{\"1\":{\"58\":1}}],[\"prc\",{\"1\":{\"47\":1}}],[\"price\",{\"1\":{\"86\":10}}],[\"principals\",{\"1\":{\"63\":1}}],[\"principal\",{\"1\":{\"59\":4,\"62\":2}}],[\"printstacktrace\",{\"1\":{\"131\":1}}],[\"println\",{\"1\":{\"74\":2,\"75\":3,\"76\":2,\"83\":7,\"84\":5,\"86\":5,\"93\":2,\"98\":9,\"104\":2,\"111\":1,\"113\":4,\"117\":7,\"124\":3,\"127\":1,\"131\":4,\"138\":7,\"140\":4,\"142\":7,\"144\":4,\"150\":1,\"153\":2,\"157\":2,\"166\":1,\"170\":6,\"173\":9,\"178\":6,\"179\":6,\"185\":1,\"188\":2,\"231\":1,\"234\":1}}],[\"printf\",{\"1\":{\"49\":3}}],[\"print\",{\"1\":{\"49\":8,\"104\":6}}],[\"private\",{\"1\":{\"10\":4,\"16\":1,\"74\":1,\"75\":7,\"76\":1,\"84\":1,\"86\":3,\"98\":5,\"104\":1,\"111\":4,\"113\":2,\"124\":1,\"127\":1,\"131\":5,\"134\":3,\"138\":6,\"140\":2,\"142\":1,\"144\":1,\"150\":2,\"153\":2,\"157\":2,\"163\":3,\"166\":1,\"170\":1,\"178\":7,\"179\":8,\"185\":7,\"188\":1,\"195\":2,\"199\":3,\"200\":1,\"201\":3,\"204\":1,\"207\":2,\"211\":1,\"224\":2,\"251\":2}}],[\"primary\",{\"1\":{\"5\":1}}],[\"product\",{\"1\":{\"228\":1,\"229\":1,\"235\":1}}],[\"programming\",{\"1\":{\"190\":1}}],[\"propertyname\",{\"1\":{\"200\":4,\"212\":3}}],[\"property\",{\"1\":{\"199\":1,\"200\":1,\"201\":1,\"207\":1}}],[\"propertyvalues\",{\"1\":{\"201\":6,\"212\":2}}],[\"propertyvaluelist\",{\"1\":{\"200\":14}}],[\"propertyvalue\",{\"0\":{\"199\":1},\"1\":{\"199\":3,\"200\":8,\"207\":4,\"212\":5,\"214\":1}}],[\"property>\",{\"1\":{\"188\":1,\"190\":1,\"197\":1}}],[\"propagation\",{\"1\":{\"16\":2}}],[\"protect\",{\"1\":{\"79\":1}}],[\"protected\",{\"1\":{\"13\":1,\"75\":2,\"93\":1,\"104\":2,\"138\":7,\"144\":1,\"157\":2,\"211\":3,\"236\":1,\"251\":2}}],[\"proxyobject\",{\"1\":{\"75\":4,\"76\":2}}],[\"proxyfactory\",{\"1\":{\"75\":8,\"76\":3}}],[\"proxypoint\",{\"1\":{\"74\":5}}],[\"proxy\",{\"1\":{\"73\":2,\"75\":16,\"76\":1}}],[\"profile\",{\"1\":{\"33\":2}}],[\"provided\",{\"1\":{\"6\":2}}],[\"projectpath\",{\"1\":{\"6\":3,\"14\":3}}],[\"vlissides\",{\"1\":{\"243\":1}}],[\"vs\",{\"0\":{\"239\":1,\"240\":1}}],[\"volatile\",{\"1\":{\"224\":1}}],[\"void\",{\"1\":{\"6\":2,\"7\":1,\"14\":2,\"15\":2,\"16\":1,\"74\":4,\"75\":6,\"76\":2,\"83\":6,\"84\":2,\"86\":4,\"88\":1,\"93\":7,\"98\":10,\"104\":7,\"111\":1,\"113\":2,\"117\":11,\"124\":5,\"127\":3,\"131\":8,\"134\":5,\"138\":7,\"140\":5,\"142\":11,\"144\":27,\"150\":9,\"153\":8,\"157\":9,\"163\":4,\"170\":12,\"173\":15,\"178\":12,\"179\":12,\"185\":2,\"188\":6,\"195\":2,\"199\":3,\"201\":3,\"203\":2,\"204\":2,\"206\":1,\"207\":2,\"210\":1,\"211\":2,\"231\":1,\"234\":1,\"236\":2}}],[\"v\",{\"1\":{\"185\":1}}],[\"vector\",{\"1\":{\"153\":1}}],[\"verify\",{\"1\":{\"59\":1,\"60\":1}}],[\"version=\",{\"1\":{\"188\":1,\"197\":1}}],[\"version\",{\"1\":{\"7\":1,\"33\":1,\"43\":1,\"45\":1}}],[\"version>\",{\"1\":{\"4\":2,\"7\":1,\"76\":1}}],[\"vpcard\",{\"0\":{\"67\":1}}],[\"vit\",{\"1\":{\"178\":18,\"179\":18}}],[\"visitor\",{\"1\":{\"169\":1}}],[\"videofile\",{\"1\":{\"93\":18}}],[\"vi\",{\"1\":{\"43\":2}}],[\"vim\",{\"1\":{\"32\":2,\"33\":1,\"60\":1}}],[\"vm\",{\"1\":{\"113\":1}}],[\"vmnet0\",{\"1\":{\"22\":1}}],[\"vmnet8\",{\"1\":{\"22\":1}}],[\"vmnet1\",{\"1\":{\"22\":1}}],[\"vmware\",{\"1\":{\"20\":1,\"21\":1,\"42\":1}}],[\"variable\",{\"1\":{\"185\":14}}],[\"var\",{\"1\":{\"57\":3,\"58\":3,\"59\":1,\"60\":1,\"185\":4}}],[\"varchar\",{\"1\":{\"5\":2}}],[\"value存储的是bean对象\",{\"1\":{\"211\":1}}],[\"valueof\",{\"1\":{\"113\":7}}],[\"value\",{\"1\":{\"10\":2,\"49\":1,\"113\":2,\"183\":2,\"185\":14,\"199\":8,\"207\":3,\"212\":4}}],[\"values\",{\"1\":{\"5\":1}}],[\"val\",{\"1\":{\"6\":4,\"13\":7,\"14\":4}}],[\"amd\",{\"1\":{\"258\":1}}],[\"americancoffee\",{\"1\":{\"226\":1}}],[\"age\",{\"1\":{\"251\":1}}],[\"aggregate\",{\"1\":{\"162\":1}}],[\"a2\",{\"1\":{\"173\":2}}],[\"a1\",{\"1\":{\"173\":4}}],[\"attributevalue\",{\"1\":{\"207\":5}}],[\"attach\",{\"1\":{\"150\":6}}],[\"atk\",{\"1\":{\"178\":18,\"179\":18}}],[\"atguigu\",{\"1\":{\"32\":4,\"62\":3,\"63\":6}}],[\"aircondition\",{\"1\":{\"98\":7}}],[\"avi视频文件\",{\"1\":{\"93\":1}}],[\"avifile\",{\"1\":{\"93\":2}}],[\"avi文件\",{\"1\":{\"93\":1}}],[\"avi\",{\"1\":{\"93\":1}}],[\"applicationcontext\",{\"0\":{\"210\":1},\"1\":{\"188\":6,\"189\":2,\"192\":1,\"210\":1,\"211\":2}}],[\"append\",{\"1\":{\"113\":4}}],[\"api\",{\"1\":{\"86\":1}}],[\"apache\",{\"1\":{\"7\":1,\"8\":1,\"42\":1,\"43\":6,\"46\":1,\"47\":2}}],[\"action\",{\"1\":{\"170\":3}}],[\"accept\",{\"1\":{\"169\":1,\"170\":4,\"173\":6}}],[\"access\",{\"1\":{\"79\":1}}],[\"acl\",{\"1\":{\"57\":2,\"59\":1,\"60\":1}}],[\"a参数清空所有\",{\"1\":{\"63\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"192\":1}}],[\"animal\",{\"1\":{\"170\":7,\"173\":25}}],[\"anchors\",{\"1\":{\"58\":1}}],[\"and\",{\"0\":{\"58\":1},\"1\":{\"127\":2,\"260\":1}}],[\"aes128\",{\"1\":{\"57\":1}}],[\"aes256\",{\"1\":{\"57\":1}}],[\"awk\",{\"1\":{\"49\":3}}],[\"alexander\",{\"1\":{\"243\":1}}],[\"aliasregistry\",{\"1\":{\"195\":1}}],[\"aliyuncs\",{\"1\":{\"42\":1,\"43\":6,\"45\":1}}],[\"aliyun\",{\"1\":{\"32\":1,\"45\":1}}],[\"always\",{\"1\":{\"127\":1}}],[\"all\",{\"1\":{\"32\":1,\"47\":1,\"49\":1}}],[\"allargsconstructor\",{\"1\":{\"10\":1}}],[\"assign\",{\"1\":{\"185\":6}}],[\"assert\",{\"1\":{\"113\":1,\"127\":2}}],[\"ast\",{\"1\":{\"183\":1}}],[\"ascending\",{\"1\":{\"127\":1}}],[\"asm\",{\"1\":{\"77\":1}}],[\"as\",{\"1\":{\"58\":1}}],[\"asia\",{\"1\":{\"32\":1,\"47\":2}}],[\"aspect\",{\"1\":{\"16\":1}}],[\"aspects<\",{\"1\":{\"16\":1}}],[\"aspectjexpressionpointcut\",{\"1\":{\"16\":2}}],[\"aspectj\",{\"0\":{\"16\":1},\"1\":{\"16\":3}}],[\"a\",{\"1\":{\"32\":1,\"49\":1,\"83\":2,\"88\":1,\"127\":19,\"173\":8,\"183\":4,\"185\":4}}],[\"aop\",{\"1\":{\"16\":2,\"189\":1,\"214\":1}}],[\"abstractskin\",{\"1\":{\"256\":1}}],[\"abstractsyntaxtree\",{\"1\":{\"183\":1}}],[\"abstractapplicationcontext\",{\"0\":{\"211\":1},\"1\":{\"196\":1,\"211\":1,\"212\":1,\"214\":1}}],[\"abstractexpression\",{\"1\":{\"185\":14}}],[\"abstractlist<e>\",{\"1\":{\"166\":1}}],[\"abstractclass\",{\"1\":{\"117\":3}}],[\"abstractbox>\",{\"1\":{\"111\":2}}],[\"abstractbox\",{\"1\":{\"111\":10}}],[\"abstraction\",{\"1\":{\"92\":2}}],[\"abstract\",{\"1\":{\"13\":1,\"86\":3,\"93\":2,\"104\":1,\"111\":2,\"116\":2,\"117\":3,\"120\":2,\"134\":1,\"138\":2,\"144\":5,\"157\":3,\"184\":1,\"185\":2,\"211\":1,\"228\":1,\"229\":1,\"236\":4}}],[\"arr\",{\"1\":{\"183\":2}}],[\"arraylist\",{\"1\":{\"131\":1,\"166\":4,\"231\":2}}],[\"arraylist<propertyvalue>\",{\"1\":{\"200\":2}}],[\"arraylist<animal>\",{\"1\":{\"170\":1}}],[\"arraylist<e>\",{\"1\":{\"166\":1}}],[\"arraylist<>\",{\"1\":{\"166\":1,\"231\":1}}],[\"arraylist<student>\",{\"1\":{\"163\":1}}],[\"arraylist<observer>\",{\"1\":{\"150\":1}}],[\"arraylist<filter>\",{\"1\":{\"140\":1}}],[\"arraylist<command>\",{\"1\":{\"131\":1}}],[\"arraylist<menucomponent>\",{\"1\":{\"104\":1}}],[\"arrays\",{\"1\":{\"127\":11}}],[\"array\",{\"1\":{\"113\":1,\"127\":1}}],[\"arg\",{\"1\":{\"153\":2}}],[\"args\",{\"1\":{\"6\":1,\"7\":2,\"14\":1,\"16\":2,\"74\":1,\"75\":7,\"76\":4,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"98\":1,\"113\":2,\"117\":1,\"127\":1,\"131\":1,\"134\":1,\"138\":1,\"140\":1,\"142\":1,\"144\":1,\"150\":1,\"153\":1,\"157\":1,\"170\":1,\"173\":3,\"178\":1,\"179\":1,\"185\":1,\"188\":1,\"192\":2,\"231\":1,\"234\":1}}],[\"are\",{\"1\":{\"127\":1}}],[\"arthas\",{\"1\":{\"75\":1}}],[\"artifactid>\",{\"1\":{\"4\":3,\"7\":1,\"16\":1,\"76\":1}}],[\"arcfour\",{\"1\":{\"57\":1}}],[\"adaptee\",{\"1\":{\"82\":1}}],[\"adapter\",{\"1\":{\"22\":3,\"82\":2,\"83\":4,\"84\":5}}],[\"admin\",{\"1\":{\"57\":2,\"58\":3,\"60\":3,\"63\":2}}],[\"advicemode\",{\"1\":{\"16\":1}}],[\"advisor\",{\"1\":{\"16\":1}}],[\"addpropertyvalue\",{\"1\":{\"200\":1,\"207\":1}}],[\"addprinc\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"addstudent\",{\"1\":{\"163\":2}}],[\"addobserver\",{\"1\":{\"153\":2}}],[\"addfilter\",{\"1\":{\"140\":3}}],[\"address\",{\"1\":{\"49\":9,\"251\":1}}],[\"address=$\",{\"1\":{\"49\":4}}],[\"address=hive\",{\"1\":{\"43\":1}}],[\"address=historyserver\",{\"1\":{\"43\":1}}],[\"address=resourcemanager\",{\"1\":{\"43\":1}}],[\"address=namenode\",{\"1\":{\"43\":1}}],[\"add\",{\"1\":{\"16\":1,\"45\":1,\"47\":4,\"104\":4,\"105\":2,\"131\":1,\"134\":1,\"140\":1,\"150\":1,\"163\":1,\"170\":4,\"183\":3,\"188\":7,\"200\":1,\"231\":3}}],[\"addtransactionalmethod\",{\"1\":{\"16\":12}}],[\"addtablefills\",{\"1\":{\"6\":1,\"14\":1}}],[\"addtableprefix\",{\"1\":{\"6\":1,\"14\":1}}],[\"addinnerinterceptor\",{\"1\":{\"15\":2}}],[\"addinclude\",{\"1\":{\"6\":1,\"14\":1}}],[\"ads\",{\"1\":{\"5\":1}}],[\"author\",{\"1\":{\"6\":1,\"14\":1}}],[\"autowirecapablebeanfactory\",{\"1\":{\"192\":2}}],[\"auto\",{\"1\":{\"5\":2,\"6\":1,\"14\":1}}],[\"narror\",{\"1\":{\"176\":1}}],[\"native\",{\"1\":{\"134\":2}}],[\"name=\",{\"1\":{\"188\":1,\"190\":1,\"197\":1}}],[\"name=com\",{\"1\":{\"8\":1}}],[\"namenode\",{\"1\":{\"43\":5,\"49\":7}}],[\"namematchtransactionattributesource\",{\"1\":{\"16\":2}}],[\"name\",{\"1\":{\"7\":1,\"42\":1,\"49\":3,\"58\":1,\"104\":10,\"131\":2,\"138\":5,\"150\":5,\"153\":16,\"157\":10,\"185\":5,\"192\":10,\"199\":8,\"207\":3,\"209\":2,\"212\":7,\"234\":2,\"251\":1}}],[\"nremaining\",{\"1\":{\"127\":3}}],[\"nfe\",{\"1\":{\"113\":1}}],[\"numend\",{\"1\":{\"138\":5}}],[\"numstart\",{\"1\":{\"138\":9}}],[\"num\",{\"1\":{\"131\":4,\"138\":13}}],[\"numberformatexception\",{\"1\":{\"113\":1}}],[\"number\",{\"1\":{\"113\":1}}],[\"nullpointerexception\",{\"1\":{\"83\":1,\"120\":1}}],[\"nullable\",{\"1\":{\"10\":3,\"192\":1,\"194\":2}}],[\"null\",{\"1\":{\"5\":5,\"10\":6,\"49\":1,\"75\":4,\"83\":2,\"113\":1,\"120\":1,\"127\":4,\"131\":1,\"138\":1,\"140\":2,\"200\":3,\"212\":7,\"224\":3}}],[\"nio\",{\"1\":{\"86\":1}}],[\"n\",{\"1\":{\"49\":5}}],[\"nn\",{\"1\":{\"43\":1,\"47\":4,\"49\":8}}],[\"n1\",{\"1\":{\"32\":2}}],[\"nexthandler\",{\"1\":{\"138\":6}}],[\"next\",{\"1\":{\"49\":3,\"162\":1,\"163\":3,\"166\":2,\"231\":1}}],[\"neof\",{\"1\":{\"49\":6}}],[\"net=host\",{\"1\":{\"42\":1}}],[\"networkmanager\",{\"1\":{\"32\":2}}],[\"net\",{\"1\":{\"22\":1}}],[\"newinstance\",{\"1\":{\"212\":1}}],[\"newproxyinstance\",{\"1\":{\"75\":4}}],[\"new\",{\"1\":{\"6\":3,\"10\":5,\"13\":6,\"14\":3,\"15\":3,\"16\":6,\"74\":2,\"75\":17,\"76\":2,\"83\":4,\"84\":4,\"86\":5,\"88\":2,\"93\":2,\"98\":4,\"104\":5,\"111\":5,\"113\":5,\"117\":2,\"120\":2,\"127\":1,\"131\":7,\"134\":4,\"138\":4,\"140\":4,\"142\":1,\"144\":6,\"150\":1,\"153\":2,\"157\":3,\"163\":2,\"166\":4,\"170\":6,\"173\":11,\"178\":3,\"179\":3,\"185\":13,\"188\":1,\"195\":2,\"200\":4,\"201\":1,\"204\":2,\"207\":5,\"211\":1,\"212\":1,\"224\":3,\"226\":2,\"231\":1,\"234\":6,\"236\":1}}],[\"nonterminal\",{\"1\":{\"184\":1}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"192\":5,\"195\":2}}],[\"nosuchelementexception\",{\"1\":{\"166\":1}}],[\"nosuchmethoderror\",{\"1\":{\"75\":1}}],[\"nosuchmethodexception\",{\"1\":{\"75\":3}}],[\"no\",{\"1\":{\"127\":1}}],[\"noclassdeffounderror\",{\"1\":{\"75\":1}}],[\"normal\",{\"1\":{\"57\":8}}],[\"nohup\",{\"1\":{\"49\":2}}],[\"nodelist\",{\"1\":{\"170\":3}}],[\"nodejs\",{\"2\":{\"69\":1}}],[\"nodejs安装\",{\"0\":{\"66\":1}}],[\"node\",{\"1\":{\"49\":9,\"170\":2}}],[\"nodemanager\",{\"1\":{\"43\":2,\"49\":4}}],[\"nodeps\",{\"1\":{\"32\":2}}],[\"now\",{\"1\":{\"15\":3}}],[\"noargsconstructor\",{\"1\":{\"10\":1}}],[\"notserializableexception\",{\"1\":{\"234\":1}}],[\"notifyobservers\",{\"1\":{\"153\":3}}],[\"notify\",{\"1\":{\"150\":4}}],[\"nothing\",{\"1\":{\"142\":9,\"144\":4}}],[\"not\",{\"1\":{\"5\":5,\"12\":1,\"260\":1}}],[\"```java\",{\"1\":{\"86\":1}}],[\"`uniq\",{\"1\":{\"5\":1}}],[\"`update\",{\"1\":{\"5\":1}}],[\"`create\",{\"1\":{\"5\":1}}],[\"`desc`\",{\"1\":{\"5\":2}}],[\"`storey`\",{\"1\":{\"5\":3}}],[\"`id`\",{\"1\":{\"5\":3}}],[\"`t\",{\"1\":{\"5\":3}}],[\"`meta\",{\"1\":{\"5\":2}}],[\"turnoff\",{\"1\":{\"134\":1}}],[\"turnoffthread\",{\"1\":{\"134\":7}}],[\"t>\",{\"1\":{\"127\":3,\"209\":1,\"212\":1}}],[\"tv\",{\"1\":{\"98\":7}}],[\"txt\",{\"1\":{\"88\":1,\"234\":2}}],[\"txattrrequiredreadonly\",{\"1\":{\"16\":7}}],[\"txattrrequired\",{\"1\":{\"16\":10}}],[\"tf卡实现类\",{\"1\":{\"83\":1}}],[\"tf卡接口\",{\"1\":{\"83\":1}}],[\"tfcardimpl\",{\"1\":{\"83\":2,\"84\":1}}],[\"tfcard\",{\"1\":{\"83\":2,\"84\":11}}],[\"tf\",{\"1\":{\"83\":7,\"84\":2}}],[\"tls\",{\"1\":{\"58\":1}}],[\"tcp\",{\"1\":{\"57\":1}}],[\"toarray\",{\"1\":{\"200\":1,\"204\":1}}],[\"tomcat\",{\"1\":{\"100\":2}}],[\"tostring\",{\"1\":{\"75\":2,\"113\":2,\"127\":1,\"185\":9}}],[\"to\",{\"1\":{\"49\":1,\"59\":1,\"60\":1,\"260\":2}}],[\"tools\",{\"1\":{\"33\":1}}],[\"tool\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"14\":1}}],[\"tool`\",{\"1\":{\"5\":2}}],[\"tgz\",{\"1\":{\"46\":1,\"47\":1}}],[\"talk\",{\"1\":{\"260\":1}}],[\"tail\",{\"1\":{\"49\":7}}],[\"target\",{\"1\":{\"76\":2,\"82\":1,\"134\":1}}],[\"tar\",{\"1\":{\"33\":2,\"46\":3,\"47\":3}}],[\"tables\",{\"1\":{\"17\":1}}],[\"tablename\",{\"1\":{\"6\":2,\"14\":2}}],[\"table\",{\"1\":{\"5\":2}}],[\"terminal\",{\"1\":{\"184\":1}}],[\"tenant\",{\"1\":{\"157\":16}}],[\"tee\",{\"1\":{\"45\":1}}],[\"test\",{\"1\":{\"22\":1,\"43\":4}}],[\"template\",{\"1\":{\"14\":1,\"116\":1}}],[\"templates\",{\"1\":{\"14\":3}}],[\"templateengine\",{\"1\":{\"6\":1,\"14\":1}}],[\"tree\",{\"1\":{\"183\":1}}],[\"try\",{\"1\":{\"75\":5,\"113\":1,\"120\":1,\"131\":1,\"134\":2,\"212\":1}}],[\"trainstation\",{\"1\":{\"74\":3,\"75\":6,\"76\":11}}],[\"transactionadviceadvisor\",{\"1\":{\"16\":1}}],[\"transactionadviceconfig\",{\"1\":{\"16\":2}}],[\"transactionattributesource\",{\"1\":{\"16\":14}}],[\"transactiondefinition\",{\"1\":{\"16\":2}}],[\"transactionmanager\",{\"1\":{\"16\":3}}],[\"transactioninterceptor\",{\"1\":{\"16\":6}}],[\"true\",{\"1\":{\"10\":2,\"16\":1,\"43\":5,\"58\":1,\"113\":1,\"134\":1,\"153\":2}}],[\"three\",{\"1\":{\"138\":3}}],[\"threadstartfailed\",{\"1\":{\"134\":1}}],[\"threadstatus\",{\"1\":{\"134\":1}}],[\"thread\",{\"1\":{\"131\":1,\"134\":6}}],[\"throwable\",{\"1\":{\"75\":22,\"76\":1,\"134\":1}}],[\"throws\",{\"1\":{\"75\":2,\"76\":1,\"86\":2,\"88\":1,\"120\":3,\"192\":10,\"194\":4,\"195\":3,\"203\":2,\"204\":2,\"206\":1,\"207\":1,\"209\":2,\"210\":1,\"211\":2,\"212\":2,\"234\":1}}],[\"throw\",{\"1\":{\"13\":4,\"75\":10,\"83\":1,\"104\":4,\"120\":2,\"134\":1,\"166\":2,\"224\":1}}],[\"thief\",{\"1\":{\"153\":5}}],[\"think\",{\"1\":{\"88\":1,\"234\":2}}],[\"this\",{\"1\":{\"13\":1,\"15\":3,\"58\":1,\"75\":11,\"76\":1,\"84\":1,\"86\":6,\"93\":1,\"104\":4,\"111\":1,\"117\":5,\"124\":1,\"131\":3,\"134\":3,\"138\":12,\"140\":3,\"142\":12,\"144\":9,\"150\":1,\"153\":4,\"157\":6,\"163\":3,\"166\":1,\"170\":2,\"173\":4,\"178\":19,\"179\":19,\"185\":7,\"188\":1,\"199\":6,\"200\":11,\"201\":3,\"207\":2,\"212\":2,\"236\":3}}],[\"the\",{\"1\":{\"49\":1}}],[\"then\",{\"1\":{\"49\":2}}],[\"timsort<t>\",{\"1\":{\"127\":1}}],[\"timsort\",{\"1\":{\"127\":3}}],[\"timeout\",{\"1\":{\"43\":4}}],[\"timezone\",{\"1\":{\"32\":1,\"47\":1}}],[\"timezones\",{\"1\":{\"32\":1}}],[\"timedatectl\",{\"1\":{\"32\":2}}],[\"time\",{\"1\":{\"6\":2,\"14\":2,\"15\":2}}],[\"timestamp\",{\"1\":{\"5\":4}}],[\"time`\",{\"1\":{\"5\":2}}],[\"ticket\",{\"1\":{\"58\":1}}],[\"title\",{\"1\":{\"7\":1,\"10\":5,\"49\":8}}],[\"t\",{\"1\":{\"6\":2,\"10\":2,\"13\":3,\"14\":2,\"50\":1,\"127\":4,\"153\":3,\"192\":3,\"209\":1,\"212\":1}}],[\"typetomatch\",{\"1\":{\"192\":2}}],[\"types\",{\"1\":{\"6\":1,\"14\":1}}],[\"type\",{\"1\":{\"6\":1,\"14\":1,\"57\":1}}],[\"typecode\",{\"1\":{\"6\":2,\"14\":2}}],[\"typeconverthandler\",{\"1\":{\"6\":1,\"14\":1}}],[\"typeregistry\",{\"1\":{\"6\":2,\"14\":2}}],[\"tmp\",{\"1\":{\"5\":1,\"49\":4}}],[\"illegalstateexception\",{\"1\":{\"210\":1,\"211\":1}}],[\"illegalthreadstateexception\",{\"1\":{\"134\":1}}],[\"ilift\",{\"1\":{\"142\":3}}],[\"ignore\",{\"1\":{\"134\":1}}],[\"i4\",{\"1\":{\"113\":4}}],[\"i3和i4对象是否是同一个对象\",{\"1\":{\"113\":1}}],[\"i3\",{\"1\":{\"113\":5}}],[\"i2\",{\"1\":{\"113\":4}}],[\"i1和i2对象是否是同一个对象\",{\"1\":{\"113\":1}}],[\"i1\",{\"1\":{\"113\":5}}],[\"ibox\",{\"1\":{\"111\":5}}],[\"ibatis\",{\"1\":{\"8\":1}}],[\"i++\",{\"1\":{\"104\":2,\"120\":1,\"131\":1,\"200\":1}}],[\"iter\",{\"1\":{\"231\":1}}],[\"iterable<propertyvalue>\",{\"1\":{\"200\":1}}],[\"iterable并实现其中的\",{\"1\":{\"166\":1}}],[\"iterator<propertyvalue>\",{\"1\":{\"200\":1}}],[\"iterator<e>\",{\"1\":{\"166\":2}}],[\"iterator<string>\",{\"1\":{\"166\":1,\"231\":1}}],[\"iterator\",{\"0\":{\"231\":1},\"1\":{\"162\":1,\"166\":14,\"200\":2,\"231\":3}}],[\"it\",{\"1\":{\"231\":3}}],[\"itr\",{\"1\":{\"166\":4}}],[\"itheima\",{\"1\":{\"75\":3,\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"itd\",{\"1\":{\"42\":1}}],[\"isempty\",{\"1\":{\"200\":2}}],[\"iservice<t>\",{\"1\":{\"13\":2}}],[\"isbeannameinuse\",{\"1\":{\"195\":1}}],[\"istypematch\",{\"1\":{\"192\":2}}],[\"isprototype\",{\"1\":{\"192\":1}}],[\"issingleton\",{\"1\":{\"192\":1}}],[\"isxxx\",{\"1\":{\"116\":1}}],[\"is\",{\"1\":{\"49\":1,\"113\":1,\"127\":1,\"207\":2}}],[\"ioc\",{\"0\":{\"191\":1,\"208\":1,\"213\":1},\"1\":{\"188\":1,\"189\":4,\"190\":2,\"192\":10,\"193\":1,\"196\":2,\"197\":1,\"209\":1,\"214\":1}}],[\"ioexception\",{\"1\":{\"86\":2,\"120\":4}}],[\"io\",{\"1\":{\"45\":1,\"75\":1,\"86\":1,\"88\":1,\"166\":1}}],[\"immediate\",{\"1\":{\"260\":1}}],[\"img\",{\"1\":{\"86\":2}}],[\"import\",{\"1\":{\"75\":5}}],[\"implementor\",{\"1\":{\"92\":2}}],[\"implements\",{\"1\":{\"15\":1,\"74\":2,\"75\":4,\"76\":1,\"83\":3,\"84\":1,\"93\":2,\"113\":1,\"120\":1,\"124\":3,\"131\":1,\"134\":2,\"140\":2,\"142\":1,\"150\":2,\"153\":1,\"163\":2,\"166\":2,\"170\":4,\"179\":1,\"188\":2,\"200\":1,\"204\":1,\"207\":1,\"211\":1}}],[\"impl=org\",{\"1\":{\"8\":1}}],[\"impl\",{\"1\":{\"6\":1,\"14\":1,\"16\":2,\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"images\",{\"1\":{\"86\":1}}],[\"image\",{\"1\":{\"43\":6}}],[\"i\",{\"1\":{\"32\":3,\"104\":7,\"111\":2,\"113\":9,\"120\":4,\"131\":3,\"166\":5,\"183\":2,\"200\":4}}],[\"ip\",{\"0\":{\"30\":1},\"1\":{\"34\":1}}],[\"id=\",{\"1\":{\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"idea\",{\"1\":{\"122\":1,\"175\":1,\"181\":1}}],[\"id\",{\"1\":{\"13\":10,\"201\":6,\"207\":4}}],[\"idtype\",{\"1\":{\"6\":2,\"14\":2}}],[\"injection\",{\"1\":{\"188\":1,\"189\":1}}],[\"inversion\",{\"1\":{\"188\":1,\"189\":1}}],[\"invoker\",{\"1\":{\"130\":1,\"131\":4}}],[\"invokesuper\",{\"1\":{\"76\":1}}],[\"invoke\",{\"1\":{\"75\":11,\"77\":1,\"212\":2}}],[\"invocationhandler中invoke方法参数说明\",{\"1\":{\"75\":1}}],[\"invocationhandler\",{\"1\":{\"75\":13,\"77\":1}}],[\"indexer\",{\"1\":{\"189\":1}}],[\"index++\",{\"1\":{\"140\":1}}],[\"index\",{\"1\":{\"140\":3}}],[\"indexoutofboundsexception\",{\"1\":{\"120\":1}}],[\"inputstreamreader\",{\"1\":{\"86\":4}}],[\"inputstream\",{\"1\":{\"86\":3,\"120\":4,\"207\":1}}],[\"includedir\",{\"1\":{\"58\":1}}],[\"increment=9\",{\"1\":{\"5\":1}}],[\"increment\",{\"1\":{\"5\":1}}],[\"in\",{\"1\":{\"49\":1,\"58\":1}}],[\"init\",{\"1\":{\"193\":1}}],[\"initstate\",{\"1\":{\"178\":2,\"179\":2}}],[\"initschema\",{\"1\":{\"49\":1}}],[\"initrunlen\",{\"1\":{\"127\":2}}],[\"initializr\",{\"1\":{\"3\":2}}],[\"instance\",{\"1\":{\"111\":2,\"188\":1,\"224\":8}}],[\"install\",{\"1\":{\"32\":1,\"45\":2,\"55\":2}}],[\"insertfill\",{\"1\":{\"15\":1}}],[\"insert\",{\"1\":{\"5\":1,\"6\":2,\"11\":1,\"14\":2,\"16\":1}}],[\"info\",{\"1\":{\"7\":2,\"49\":6}}],[\"intel\",{\"1\":{\"258\":2}}],[\"interpret\",{\"1\":{\"184\":1,\"185\":10}}],[\"interruptedexception\",{\"1\":{\"131\":1}}],[\"interned\",{\"1\":{\"113\":1}}],[\"internal\",{\"1\":{\"12\":1}}],[\"intercept\",{\"1\":{\"76\":2}}],[\"interceptor\",{\"1\":{\"15\":4}}],[\"interfaces\",{\"1\":{\"75\":1}}],[\"interface\",{\"1\":{\"74\":1,\"75\":1,\"83\":2,\"93\":1,\"124\":1,\"131\":1,\"134\":1,\"140\":3,\"142\":1,\"150\":2,\"163\":2,\"170\":2,\"176\":2,\"179\":1,\"188\":2,\"192\":1,\"194\":1,\"195\":1,\"203\":1,\"206\":1,\"209\":1,\"210\":1}}],[\"interval\",{\"1\":{\"43\":4}}],[\"integer>\",{\"1\":{\"131\":3,\"185\":2}}],[\"integercachehighpropvalue\",{\"1\":{\"113\":3}}],[\"integercache\",{\"1\":{\"113\":8}}],[\"integer\",{\"1\":{\"6\":1,\"13\":2,\"14\":1,\"75\":1,\"113\":26,\"127\":3,\"183\":3,\"185\":3}}],[\"int\",{\"1\":{\"6\":1,\"10\":2,\"14\":1,\"75\":1,\"86\":4,\"104\":7,\"113\":11,\"120\":9,\"127\":11,\"131\":6,\"138\":11,\"140\":1,\"142\":7,\"163\":1,\"166\":4,\"178\":21,\"179\":21,\"183\":9,\"185\":8,\"194\":4,\"195\":1,\"200\":1,\"203\":1,\"204\":1,\"251\":2}}],[\"into\",{\"1\":{\"5\":1}}],[\"if\",{\"1\":{\"5\":2,\"6\":1,\"13\":4,\"14\":1,\"49\":2,\"83\":1,\"98\":2,\"113\":2,\"120\":5,\"125\":1,\"127\":8,\"131\":1,\"134\":2,\"138\":3,\"139\":2,\"140\":1,\"142\":1,\"157\":1,\"166\":2,\"200\":2,\"212\":6,\"224\":3}}],[\"dynamic\",{\"1\":{\"75\":3,\"173\":1}}],[\"dns\",{\"1\":{\"58\":1}}],[\"dfs\",{\"1\":{\"49\":3}}],[\"dfsadmin\",{\"1\":{\"49\":1}}],[\"document\",{\"1\":{\"207\":3}}],[\"dockerfile\",{\"0\":{\"47\":1},\"1\":{\"46\":1,\"47\":1}}],[\"docker\",{\"0\":{\"38\":1,\"42\":1,\"43\":1,\"45\":1},\"1\":{\"38\":2,\"42\":1,\"43\":4,\"45\":8,\"46\":1,\"50\":1}}],[\"dog\",{\"1\":{\"170\":8,\"173\":11}}],[\"dofilter\",{\"1\":{\"140\":8}}],[\"domain\",{\"1\":{\"58\":1}}],[\"done\",{\"1\":{\"49\":1}}],[\"do\",{\"1\":{\"49\":1,\"127\":1,\"142\":9,\"144\":4}}],[\"dateforamt\",{\"1\":{\"231\":1}}],[\"datanode\",{\"1\":{\"43\":2,\"49\":4}}],[\"datasource\",{\"1\":{\"8\":4}}],[\"datasourceconfig\",{\"1\":{\"6\":1,\"14\":1}}],[\"data\",{\"1\":{\"5\":3,\"6\":1,\"10\":3,\"14\":1,\"47\":1,\"49\":3,\"127\":3}}],[\"database\",{\"1\":{\"5\":1,\"59\":2,\"60\":2}}],[\"dao\",{\"1\":{\"188\":1,\"190\":1,\"193\":1,\"197\":1}}],[\"daemon\",{\"1\":{\"45\":2,\"49\":6}}],[\"dt\",{\"1\":{\"33\":1}}],[\"d\",{\"1\":{\"32\":1,\"33\":1,\"43\":1,\"58\":1,\"173\":4,\"185\":4}}],[\"dbtype\",{\"1\":{\"15\":1,\"49\":1}}],[\"dbcolumntype\",{\"1\":{\"6\":1,\"14\":1}}],[\"dmlfailurehandler\",{\"1\":{\"12\":1}}],[\"dmloperationexception\",{\"1\":{\"11\":1,\"12\":2,\"13\":4}}],[\"dml\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"driver\",{\"1\":{\"8\":2}}],[\"drop\",{\"1\":{\"5\":1}}],[\"diagram\",{\"1\":{\"248\":1}}],[\"di\",{\"1\":{\"188\":2,\"189\":1}}],[\"diningtable\",{\"1\":{\"131\":5}}],[\"dict\",{\"1\":{\"57\":2}}],[\"dispatch\",{\"1\":{\"173\":4}}],[\"display\",{\"1\":{\"111\":1}}],[\"distribution\",{\"1\":{\"54\":1}}],[\"disabled\",{\"1\":{\"32\":1}}],[\"disable\",{\"1\":{\"32\":2}}],[\"disableserialversionuid\",{\"1\":{\"6\":1,\"14\":1}}],[\"director\",{\"1\":{\"235\":2,\"236\":3}}],[\"directory\",{\"1\":{\"58\":1}}],[\"dir=$\",{\"1\":{\"47\":1}}],[\"dir\",{\"1\":{\"6\":1,\"14\":1,\"49\":4}}],[\"dim\",{\"1\":{\"5\":1}}],[\"dws\",{\"1\":{\"5\":1}}],[\"dwm\",{\"1\":{\"5\":1}}],[\"dwd\",{\"1\":{\"5\":1}}],[\"def\",{\"1\":{\"178\":18,\"179\":18}}],[\"defaultspecificskin\",{\"1\":{\"256\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"192\":1,\"195\":1}}],[\"defaultpointcutadvisor\",{\"1\":{\"16\":1}}],[\"defaulttransactionattribute\",{\"1\":{\"16\":4}}],[\"defaulthandler\",{\"1\":{\"12\":1}}],[\"default\",{\"1\":{\"5\":4,\"46\":1,\"49\":3,\"58\":3}}],[\"detach\",{\"1\":{\"150\":3}}],[\"decode\",{\"1\":{\"93\":5}}],[\"decorator\",{\"1\":{\"86\":2}}],[\"demo\",{\"1\":{\"88\":1,\"113\":2,\"127\":1,\"134\":1,\"231\":1,\"251\":1}}],[\"design\",{\"1\":{\"244\":1},\"2\":{\"218\":1,\"220\":1,\"242\":1,\"254\":1,\"263\":1}}],[\"destory\",{\"1\":{\"193\":1}}],[\"desktop\",{\"1\":{\"88\":1,\"234\":2}}],[\"descending\",{\"1\":{\"127\":2}}],[\"desc\",{\"1\":{\"86\":10}}],[\"description\",{\"1\":{\"7\":1,\"10\":1,\"13\":2}}],[\"des\",{\"1\":{\"57\":3}}],[\"des3\",{\"1\":{\"57\":1}}],[\"dev\",{\"1\":{\"49\":1}}],[\"deploy\",{\"1\":{\"43\":2}}],[\"dependency\",{\"1\":{\"188\":1,\"189\":1}}],[\"dependency>\",{\"1\":{\"4\":3,\"7\":1,\"16\":1,\"76\":1}}],[\"depends\",{\"1\":{\"43\":4}}],[\"derby\",{\"1\":{\"38\":1,\"49\":1}}],[\"deletemapping\",{\"1\":{\"13\":1}}],[\"delete\",{\"1\":{\"11\":1,\"16\":1}}],[\"c2\",{\"1\":{\"234\":3}}],[\"c1\",{\"1\":{\"234\":4}}],[\"citationtest1\",{\"1\":{\"234\":1}}],[\"citation\",{\"1\":{\"234\":8}}],[\"ctx\",{\"1\":{\"185\":2}}],[\"ctrl+z\",{\"1\":{\"175\":1,\"181\":1}}],[\"cts\",{\"1\":{\"57\":4}}],[\"cs\",{\"1\":{\"86\":1}}],[\"cbuf\",{\"1\":{\"86\":2}}],[\"cbc\",{\"1\":{\"57\":2}}],[\"cglib\",{\"0\":{\"76\":1},\"1\":{\"72\":1,\"76\":4,\"77\":9,\"214\":1}}],[\"ccache\",{\"1\":{\"58\":1}}],[\"crt\",{\"1\":{\"58\":1}}],[\"crc\",{\"1\":{\"57\":1}}],[\"createbike\",{\"1\":{\"236\":2}}],[\"createtime\",{\"1\":{\"15\":1}}],[\"create\",{\"1\":{\"5\":2,\"6\":2,\"14\":2,\"15\":1,\"16\":1,\"59\":1,\"76\":1}}],[\"calendar\",{\"1\":{\"231\":1}}],[\"cast\",{\"1\":{\"212\":1}}],[\"case\",{\"1\":{\"49\":1,\"142\":17}}],[\"caretaker\",{\"1\":{\"176\":2}}],[\"card\",{\"1\":{\"83\":8,\"84\":2}}],[\"caixin\",{\"1\":{\"117\":5}}],[\"cache\",{\"1\":{\"113\":5}}],[\"ca\",{\"1\":{\"58\":1}}],[\"camellia128\",{\"1\":{\"57\":1}}],[\"camellia256\",{\"1\":{\"57\":1}}],[\"catch\",{\"1\":{\"75\":10,\"113\":1,\"120\":1,\"131\":1,\"134\":1,\"212\":1}}],[\"cat\",{\"1\":{\"49\":12,\"170\":8,\"173\":11}}],[\"cpu\",{\"1\":{\"258\":3}}],[\"cpw\",{\"1\":{\"63\":1}}],[\"cp\",{\"1\":{\"49\":1}}],[\"cmd2\",{\"1\":{\"131\":2}}],[\"cmd1\",{\"1\":{\"131\":2}}],[\"cmd\",{\"1\":{\"43\":4,\"47\":1,\"131\":5}}],[\"cn\",{\"1\":{\"42\":1,\"43\":6,\"47\":1,\"86\":1}}],[\"cd\",{\"1\":{\"33\":1,\"43\":1,\"49\":3,\"50\":1}}],[\"c\",{\"1\":{\"33\":1,\"88\":1,\"120\":6,\"127\":12,\"140\":1,\"173\":4,\"183\":2,\"185\":4,\"234\":2}}],[\"clazz\",{\"1\":{\"209\":1,\"212\":6}}],[\"classname\",{\"1\":{\"201\":5,\"207\":2,\"212\":2}}],[\"classnotfoundexception\",{\"1\":{\"75\":3}}],[\"class=\",{\"1\":{\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"classpath\",{\"1\":{\"189\":1}}],[\"classpathxmlapplicationcontext\",{\"0\":{\"212\":1},\"1\":{\"188\":1,\"192\":1,\"196\":2,\"212\":2}}],[\"classpath=\",{\"1\":{\"33\":1}}],[\"class<t>\",{\"1\":{\"192\":4}}],[\"class<\",{\"1\":{\"75\":1,\"192\":2,\"209\":1,\"212\":2}}],[\"classloader\",{\"1\":{\"75\":1,\"194\":1}}],[\"class\",{\"1\":{\"6\":1,\"7\":3,\"8\":1,\"10\":1,\"11\":1,\"12\":3,\"13\":1,\"14\":2,\"15\":4,\"16\":3,\"74\":3,\"75\":18,\"76\":3,\"83\":5,\"84\":2,\"86\":7,\"88\":1,\"93\":6,\"98\":5,\"104\":3,\"111\":6,\"113\":4,\"116\":2,\"117\":4,\"120\":1,\"124\":4,\"127\":3,\"131\":5,\"134\":3,\"138\":6,\"140\":4,\"142\":2,\"144\":7,\"150\":3,\"153\":3,\"157\":6,\"163\":2,\"166\":2,\"170\":6,\"173\":14,\"178\":4,\"179\":4,\"185\":7,\"188\":4,\"199\":1,\"200\":1,\"201\":2,\"204\":1,\"207\":2,\"211\":1,\"212\":3,\"224\":2,\"231\":1,\"234\":1,\"236\":1,\"248\":1}}],[\"clone\",{\"1\":{\"232\":3,\"233\":1}}],[\"cloneable\",{\"0\":{\"233\":1},\"1\":{\"166\":1,\"233\":2}}],[\"closingstate\",{\"1\":{\"144\":4}}],[\"closing\",{\"1\":{\"142\":6}}],[\"closeingstate\",{\"1\":{\"144\":3}}],[\"closeable\",{\"1\":{\"120\":1}}],[\"close\",{\"1\":{\"88\":1,\"142\":3,\"144\":10,\"234\":1}}],[\"client\",{\"0\":{\"58\":1},\"1\":{\"54\":1,\"63\":1,\"74\":1,\"75\":2,\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"93\":1,\"98\":1,\"117\":1,\"131\":1,\"137\":1,\"138\":1,\"140\":1,\"142\":1,\"144\":1,\"150\":1,\"153\":1,\"157\":1,\"170\":1,\"173\":3,\"178\":1,\"179\":1,\"184\":1,\"185\":1}}],[\"cli\",{\"1\":{\"45\":1}}],[\"clean\",{\"1\":{\"32\":1}}],[\"cursor\",{\"1\":{\"166\":4}}],[\"curl\",{\"1\":{\"32\":1,\"43\":4,\"49\":1}}],[\"currentpv\",{\"1\":{\"200\":2}}],[\"currentstudent\",{\"1\":{\"163\":2}}],[\"current\",{\"1\":{\"5\":2,\"13\":4}}],[\"cup\",{\"1\":{\"22\":1}}],[\"certs\",{\"1\":{\"58\":1}}],[\"ce\",{\"1\":{\"45\":4}}],[\"centos\",{\"1\":{\"20\":1,\"32\":2,\"45\":1,\"47\":1}}],[\"centos7\",{\"0\":{\"20\":1},\"1\":{\"21\":1,\"22\":1,\"47\":1}}],[\"cean\",{\"0\":{\"17\":1}}],[\"cj\",{\"1\":{\"8\":1}}],[\"christopher\",{\"1\":{\"243\":1}}],[\"checkforcomodification\",{\"1\":{\"166\":1}}],[\"chen\",{\"1\":{\"6\":1,\"14\":1}}],[\"changed\",{\"1\":{\"153\":1}}],[\"chain\",{\"1\":{\"140\":4}}],[\"char\",{\"1\":{\"86\":1}}],[\"charset=utf8mb3\",{\"1\":{\"5\":1}}],[\"chown\",{\"1\":{\"32\":1}}],[\"coffeestore\",{\"1\":{\"226\":1,\"227\":2}}],[\"coffee\",{\"1\":{\"226\":1,\"227\":2}}],[\"countrunandmakeascending\",{\"1\":{\"127\":3}}],[\"cookprocess\",{\"1\":{\"117\":3}}],[\"cost\",{\"1\":{\"86\":8}}],[\"copy\",{\"1\":{\"47\":2}}],[\"core\",{\"1\":{\"46\":1,\"49\":2,\"189\":2}}],[\"construct\",{\"1\":{\"236\":2}}],[\"constact\",{\"1\":{\"157\":8}}],[\"concurrenthashmap<>\",{\"1\":{\"195\":2}}],[\"concurrentmodificationexception\",{\"1\":{\"166\":1}}],[\"concrereobserver\",{\"1\":{\"149\":1}}],[\"concretebuilder\",{\"1\":{\"235\":1}}],[\"concreteproduct\",{\"1\":{\"228\":1,\"229\":1}}],[\"concretefactory\",{\"1\":{\"228\":1}}],[\"concreteelement\",{\"1\":{\"169\":1}}],[\"concretevisitor\",{\"1\":{\"169\":1}}],[\"concretelterator\",{\"1\":{\"162\":1}}],[\"concreteaggregate\",{\"1\":{\"162\":1}}],[\"concretemediator\",{\"1\":{\"156\":1}}],[\"concretesubject\",{\"1\":{\"149\":1}}],[\"concreteclass\",{\"1\":{\"117\":6}}],[\"concretedecorator\",{\"1\":{\"86\":1}}],[\"concrete\",{\"1\":{\"86\":1,\"92\":1,\"110\":1,\"116\":2,\"123\":1,\"124\":1,\"130\":1,\"137\":1,\"143\":1,\"156\":1,\"229\":1}}],[\"conf\",{\"0\":{\"57\":1,\"58\":1},\"1\":{\"46\":1,\"47\":1,\"49\":9,\"57\":1,\"58\":2,\"59\":1}}],[\"configlocation\",{\"1\":{\"206\":1,\"207\":2,\"211\":2,\"212\":3}}],[\"config\",{\"1\":{\"7\":1,\"32\":1,\"45\":1,\"46\":1,\"47\":3,\"49\":7}}],[\"configuration\",{\"1\":{\"7\":1,\"8\":1,\"15\":1,\"58\":1}}],[\"control\",{\"1\":{\"188\":1,\"189\":1}}],[\"controllerbuilder\",{\"1\":{\"6\":1,\"14\":1}}],[\"controller\",{\"0\":{\"9\":1,\"13\":1},\"1\":{\"0\":2,\"6\":2,\"13\":1,\"14\":4,\"17\":1,\"188\":1}}],[\"content\",{\"1\":{\"138\":5}}],[\"context=\",{\"1\":{\"188\":1}}],[\"context\",{\"1\":{\"123\":1,\"124\":1,\"143\":1,\"144\":39,\"184\":1,\"185\":23,\"188\":4,\"189\":4}}],[\"containskey\",{\"1\":{\"204\":1}}],[\"containsbeandefinition\",{\"1\":{\"195\":1,\"203\":1,\"204\":1}}],[\"containsbean\",{\"1\":{\"192\":1}}],[\"contains\",{\"1\":{\"98\":2,\"200\":1}}],[\"container\",{\"1\":{\"49\":1}}],[\"containerd\",{\"1\":{\"45\":1}}],[\"condition\",{\"1\":{\"43\":5}}],[\"collection\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"collections\",{\"1\":{\"6\":1,\"14\":1}}],[\"colleague\",{\"1\":{\"156\":2}}],[\"color\",{\"1\":{\"111\":2}}],[\"color=\",{\"1\":{\"86\":1}}],[\"column\",{\"1\":{\"6\":2,\"14\":2}}],[\"compare\",{\"1\":{\"127\":7}}],[\"comparator<integer>\",{\"1\":{\"127\":1}}],[\"comparator<\",{\"1\":{\"127\":3}}],[\"comparator\",{\"1\":{\"127\":5}}],[\"comparable<integer>\",{\"1\":{\"113\":1}}],[\"computer\",{\"1\":{\"83\":6,\"84\":5,\"258\":2}}],[\"composite\",{\"1\":{\"103\":1}}],[\"compose\",{\"0\":{\"43\":1},\"1\":{\"43\":6,\"46\":2,\"50\":1}}],[\"component\",{\"1\":{\"16\":1,\"86\":2,\"103\":1}}],[\"common\",{\"1\":{\"47\":1}}],[\"commands\",{\"1\":{\"131\":5}}],[\"command\",{\"1\":{\"43\":6,\"130\":2,\"131\":4}}],[\"comment=\",{\"1\":{\"5\":1}}],[\"comment\",{\"1\":{\"5\":5}}],[\"com\",{\"1\":{\"6\":1,\"7\":1,\"14\":1,\"16\":2,\"32\":1,\"42\":1,\"43\":6,\"45\":2,\"47\":1,\"57\":1,\"58\":6,\"60\":1,\"62\":2,\"75\":4,\"86\":1,\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"code\",{\"1\":{\"6\":1,\"10\":3,\"14\":1}}],[\"><\",{\"1\":{\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\">=\",{\"1\":{\"113\":2,\"127\":2,\"138\":1,\"166\":2}}],[\">结论\",{\"1\":{\"86\":1}}],[\">\",{\"1\":{\"4\":3,\"6\":5,\"7\":1,\"14\":5,\"16\":1,\"47\":1,\"49\":11,\"75\":1,\"120\":1,\"138\":1,\"188\":3,\"190\":1,\"192\":2,\"197\":2,\"212\":1}}],[\"<property\",{\"1\":{\"188\":1,\"190\":1,\"197\":1}}],[\"<bean\",{\"1\":{\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"<beans>\",{\"1\":{\"197\":1}}],[\"<beans\",{\"1\":{\"188\":1}}],[\"<=\",{\"1\":{\"113\":1,\"127\":2}}],[\"<font\",{\"1\":{\"86\":1}}],[\"<<\",{\"1\":{\"45\":1,\"49\":6}}],[\"<t>\",{\"1\":{\"10\":5,\"127\":3,\"192\":5,\"209\":1,\"212\":1}}],[\"<version>2\",{\"1\":{\"7\":1,\"76\":1}}],[\"<version>3\",{\"1\":{\"4\":2}}],[\"<artifactid>cglib<\",{\"1\":{\"76\":1}}],[\"<artifactid>spring\",{\"1\":{\"16\":1}}],[\"<artifactid>springdoc\",{\"1\":{\"7\":1}}],[\"<artifactid>freemarker<\",{\"1\":{\"4\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"4\":2}}],[\"<groupid>cglib<\",{\"1\":{\"76\":1}}],[\"<groupid>com\",{\"1\":{\"4\":2}}],[\"<groupid>org\",{\"1\":{\"4\":1,\"7\":1,\"16\":1}}],[\"<scope>provided<\",{\"1\":{\"4\":2}}],[\"<dependency>\",{\"1\":{\"4\":3,\"7\":1,\"16\":1,\"76\":1}}],[\"<\",{\"1\":{\"4\":6,\"7\":2,\"16\":2,\"76\":1,\"86\":1,\"104\":2,\"113\":1,\"120\":3,\"127\":7,\"131\":1,\"163\":1,\"188\":3,\"190\":1,\"197\":3,\"200\":1}}],[\"的产品\",{\"1\":{\"229\":1}}],[\"的代码\",{\"1\":{\"227\":1}}],[\"的代码实现\",{\"1\":{\"166\":1}}],[\"的主要关注点是\",{\"1\":{\"221\":1}}],[\"的设计还是有一定的出入\",{\"0\":{\"216\":1}}],[\"的设计实现在实际上采用了适配器模式\",{\"1\":{\"86\":1}}],[\"的信息\",{\"1\":{\"206\":1}}],[\"的名称\",{\"1\":{\"203\":1}}],[\"的属性\",{\"1\":{\"199\":1}}],[\"的注册中心\",{\"1\":{\"195\":1}}],[\"的注解\",{\"1\":{\"11\":1}}],[\"的解析主要就是对\",{\"1\":{\"194\":1}}],[\"的解析过程非常复杂\",{\"1\":{\"194\":1}}],[\"的集合\",{\"1\":{\"192\":1}}],[\"的自动装配规则\",{\"1\":{\"192\":1}}],[\"的创建是典型的工厂模式\",{\"1\":{\"192\":1}}],[\"的意义一样\",{\"1\":{\"190\":1}}],[\"的意义就像\",{\"1\":{\"190\":1}}],[\"的意思\",{\"1\":{\"183\":1}}],[\"的编程\",{\"1\":{\"190\":1}}],[\"的特性是基于\",{\"1\":{\"189\":1}}],[\"的扩展模块\",{\"1\":{\"189\":1}}],[\"的配置文件\",{\"1\":{\"188\":1}}],[\"的核心\",{\"1\":{\"188\":1}}],[\"的内部类\",{\"1\":{\"179\":1}}],[\"的运行时区别\",{\"1\":{\"173\":1}}],[\"的很多集合类中被广泛应用\",{\"1\":{\"166\":1}}],[\"的要求\",{\"1\":{\"164\":1}}],[\"的支持并不太好\",{\"1\":{\"145\":1}}],[\"的模拟实现分析\",{\"1\":{\"140\":1}}],[\"的模式\",{\"1\":{\"86\":1}}],[\"的实现和环境息息相关\",{\"1\":{\"214\":1}}],[\"的实现类个数\",{\"1\":{\"169\":1}}],[\"的实现类就可以了\",{\"1\":{\"166\":1}}],[\"的实现\",{\"1\":{\"100\":1}}],[\"的类结构图\",{\"1\":{\"194\":1}}],[\"的类管理组件和\",{\"1\":{\"189\":1}}],[\"的类的对象\",{\"1\":{\"100\":1}}],[\"的类或者方法进行代理\",{\"1\":{\"77\":1}}],[\"的典型应用\",{\"1\":{\"96\":1}}],[\"的话\",{\"1\":{\"86\":1}}],[\"的封装\",{\"1\":{\"86\":1}}],[\"的适配使用的是\",{\"1\":{\"86\":1}}],[\"的电压\",{\"1\":{\"81\":1}}],[\"的时候\",{\"1\":{\"77\":1}}],[\"的动态代理提供了很好的补充\",{\"1\":{\"76\":1}}],[\"的\",{\"1\":{\"42\":1,\"86\":2,\"100\":1,\"127\":1,\"196\":1,\"258\":1}}],[\"的功能\",{\"1\":{\"42\":1}}],[\"的位置\",{\"1\":{\"7\":1}}],[\"的版本\",{\"1\":{\"4\":1}}],[\"的场景启动器名称为\",{\"1\":{\"4\":1}}],[\"和媒体公司的业务洽淡等\",{\"1\":{\"260\":1}}],[\"和方法\",{\"1\":{\"251\":1}}],[\"和装配\",{\"1\":{\"235\":1}}],[\"和拿铁咖啡\",{\"1\":{\"226\":1}}],[\"和依赖注入\",{\"1\":{\"189\":1}}],[\"和设备支持\",{\"1\":{\"189\":1}}],[\"和其他发起人对象之外的任何对象\",{\"1\":{\"176\":1}}],[\"和测试类\",{\"1\":{\"84\":1}}],[\"和\",{\"1\":{\"4\":1,\"38\":1,\"77\":1,\"86\":1,\"104\":1,\"132\":1,\"183\":1,\"188\":1,\"189\":2,\"192\":1,\"236\":1,\"251\":1,\"256\":1}}],[\"break\",{\"1\":{\"120\":1,\"142\":16}}],[\"bridge\",{\"1\":{\"92\":1}}],[\"b\",{\"1\":{\"120\":10,\"183\":4,\"185\":4,\"234\":2}}],[\"byte\",{\"1\":{\"120\":6}}],[\"bop\",{\"1\":{\"190\":1}}],[\"boss\",{\"1\":{\"177\":3}}],[\"boxfactory\",{\"1\":{\"111\":6}}],[\"bootstrap\",{\"1\":{\"46\":1,\"47\":2,\"49\":1}}],[\"boot3\",{\"1\":{\"4\":2}}],[\"boolean\",{\"1\":{\"10\":1,\"75\":2,\"113\":2,\"116\":1,\"134\":1,\"153\":1,\"163\":2,\"166\":1,\"192\":5,\"195\":2,\"200\":2,\"203\":1,\"204\":1}}],[\"bw\",{\"1\":{\"88\":3}}],[\"blog\",{\"1\":{\"86\":1}}],[\"buffered\",{\"1\":{\"88\":1}}],[\"bufferedwriter\",{\"1\":{\"88\":6}}],[\"bufferedreader\",{\"1\":{\"88\":1}}],[\"bufferedoutputstream\",{\"1\":{\"88\":1}}],[\"bufferedinputstream\",{\"1\":{\"88\":1}}],[\"bundle\",{\"1\":{\"58\":1}}],[\"buildseat\",{\"1\":{\"236\":2}}],[\"buildframe\",{\"1\":{\"236\":2}}],[\"build\",{\"1\":{\"50\":1}}],[\"builder\",{\"1\":{\"6\":12,\"14\":12,\"235\":4,\"236\":5}}],[\"be\",{\"1\":{\"58\":1,\"113\":1}}],[\"beanobj\",{\"1\":{\"212\":5}}],[\"bean的初始化\",{\"1\":{\"211\":1}}],[\"beannames\",{\"1\":{\"211\":2}}],[\"beanname\",{\"1\":{\"195\":5,\"203\":4,\"204\":8,\"211\":3}}],[\"beannamegenerator\",{\"1\":{\"194\":1}}],[\"bean标签还有很多属性\",{\"1\":{\"193\":1}}],[\"beandefinitionmap\",{\"1\":{\"195\":2,\"204\":7}}],[\"beandefinition>\",{\"1\":{\"195\":2,\"204\":2}}],[\"beandefinitionstoreexception\",{\"1\":{\"194\":4,\"195\":1}}],[\"beandefinitionregistry\",{\"0\":{\"195\":1,\"203\":1},\"1\":{\"194\":1,\"195\":3,\"203\":2,\"204\":2,\"206\":1,\"207\":2,\"211\":1,\"212\":1}}],[\"beandefinitionreader\",{\"0\":{\"194\":1,\"206\":1},\"1\":{\"194\":4,\"195\":1,\"206\":2,\"207\":2,\"211\":7,\"212\":3}}],[\"beandefinition\",{\"0\":{\"193\":1,\"201\":1},\"1\":{\"193\":1,\"195\":6,\"201\":3,\"203\":9,\"204\":4,\"207\":7,\"210\":1,\"211\":2,\"212\":5}}],[\"beanfactory\",{\"0\":{\"192\":1,\"209\":1},\"1\":{\"189\":6,\"192\":6,\"209\":1,\"210\":1}}],[\"bean>\",{\"1\":{\"188\":2,\"190\":2,\"193\":1,\"197\":2}}],[\"beansexception\",{\"1\":{\"192\":5}}],[\"beans>\",{\"1\":{\"188\":1,\"197\":1}}],[\"beans\",{\"1\":{\"188\":4,\"189\":2}}],[\"bean\",{\"0\":{\"190\":1,\"198\":1},\"1\":{\"15\":1,\"16\":2,\"189\":5,\"190\":10,\"192\":14,\"193\":2,\"194\":2,\"195\":4,\"196\":3,\"199\":2,\"200\":1,\"201\":2,\"206\":2,\"209\":1,\"210\":2,\"211\":1,\"212\":7,\"214\":2}}],[\"bike\",{\"1\":{\"236\":5}}],[\"binarysort\",{\"1\":{\"127\":1}}],[\"bin\",{\"1\":{\"33\":1,\"46\":2,\"47\":4,\"49\":15}}],[\"bigint\",{\"1\":{\"5\":1}}],[\"baocai\",{\"1\":{\"117\":5}}],[\"baomidou<\",{\"1\":{\"4\":2}}],[\"bacon\",{\"1\":{\"86\":3}}],[\"bash\",{\"1\":{\"49\":1}}],[\"base\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"32\":1}}],[\"basecontroller<t>\",{\"1\":{\"13\":1}}],[\"basecontroller\",{\"1\":{\"0\":1,\"13\":2,\"14\":1}}],[\"确定版本\",{\"1\":{\"4\":1}}],[\"官网地址\",{\"1\":{\"4\":1}}],[\"使设计的代码可重用性高\",{\"1\":{\"245\":1}}],[\"使软件开发效率大大提高\",{\"1\":{\"245\":1}}],[\"使之处于待用状态\",{\"1\":{\"189\":1}}],[\"使文档恢复到之前的状态\",{\"1\":{\"175\":1}}],[\"使原有对象之间的耦合松散\",{\"1\":{\"155\":1}}],[\"使他们能够自动更新自己\",{\"1\":{\"148\":1}}],[\"使程序设计更加标准化\",{\"1\":{\"245\":1}}],[\"使程序的可阅读性变差\",{\"1\":{\"142\":1}}],[\"使程序逻辑复杂\",{\"1\":{\"112\":1}}],[\"使发出请求的责任和执行请求的责任分割开\",{\"1\":{\"129\":1}}],[\"使它们可以相互替换\",{\"1\":{\"122\":1}}],[\"使它们可以独立变化\",{\"1\":{\"91\":1}}],[\"使得同样的构建过程可以创建不同的表示\",{\"1\":{\"235\":1}}],[\"使得用户可以方便地回到一个特定的历史步骤\",{\"1\":{\"175\":1}}],[\"使得这些交互行为发生变化的时候\",{\"1\":{\"158\":1}}],[\"使得在得到主题更改通知时更新自己\",{\"1\":{\"149\":1}}],[\"使得调用者和接收者不直接交互\",{\"1\":{\"133\":1}}],[\"使得我们在使用的过程中必须要区分容器对象和叶子对象\",{\"1\":{\"102\":1}}],[\"使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤\",{\"1\":{\"115\":1}}],[\"使得子类数目呈爆炸性增长\",{\"1\":{\"87\":1}}],[\"使得子系统的变化不会影响调用它的客户类\",{\"1\":{\"98\":1}}],[\"使得原本由于接口不兼容而不能一起工作的那些类能一起工作\",{\"1\":{\"81\":1}}],[\"使其都具备基本的增删改查能力\",{\"1\":{\"14\":1}}],[\"使用接口和抽象类\",{\"1\":{\"256\":1}}],[\"使用具体原型类中的\",{\"1\":{\"232\":1}}],[\"使用迭代器遍历集合\",{\"1\":{\"231\":1}}],[\"使用迭代器遍历\",{\"1\":{\"231\":1}}],[\"使用工厂方法模式就可以完美的解决\",{\"1\":{\"228\":1}}],[\"使用反射破坏单例模式\",{\"1\":{\"223\":1}}],[\"使用序列化反序列化破坏单例模式\",{\"1\":{\"223\":1}}],[\"使用单例类\",{\"1\":{\"222\":1}}],[\"使用者不需要关注对象的创建细节\",{\"1\":{\"221\":1}}],[\"使用到了代理模式\",{\"1\":{\"214\":1}}],[\"使用到的设计模式\",{\"0\":{\"214\":1}}],[\"使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离\",{\"1\":{\"189\":1}}],[\"使用回顾\",{\"0\":{\"188\":1}}],[\"使用了大量的\",{\"1\":{\"142\":1}}],[\"使用命令模式可能会导致某些系统有过多的具体命令类\",{\"1\":{\"132\":1}}],[\"使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系\",{\"1\":{\"99\":1}}],[\"使用装饰者模式对\",{\"1\":{\"88\":1}}],[\"使用起来感觉确实像是装饰者模式\",{\"1\":{\"88\":1}}],[\"使用更加方便\",{\"1\":{\"86\":1}}],[\"使用继承的方式存在的问题\",{\"1\":{\"86\":1}}],[\"使用前\",{\"1\":{\"86\":1}}],[\"使用第三方提供的组件\",{\"1\":{\"85\":1}}],[\"使用场景\",{\"0\":{\"79\":1,\"87\":1,\"94\":1,\"99\":1,\"107\":1,\"126\":1,\"133\":1,\"146\":1,\"152\":1,\"159\":1,\"165\":1,\"172\":1,\"181\":1,\"187\":1},\"1\":{\"112\":1,\"236\":1}}],[\"使用字节码技术生成代理类\",{\"1\":{\"77\":1}}],[\"使用真实对象的类加载器即可\",{\"1\":{\"75\":1}}],[\"使用proxy获取代理对象\",{\"1\":{\"75\":1}}],[\"使用keytab进行认证\",{\"1\":{\"63\":1}}],[\"使用密码将不能再登入\",{\"1\":{\"63\":1}}],[\"使用freemarker引擎模板\",{\"1\":{\"6\":1,\"14\":1}}],[\"使用\",{\"0\":{\"16\":1,\"31\":1},\"1\":{\"3\":1,\"20\":1,\"38\":1,\"63\":1,\"77\":1,\"100\":1,\"188\":1}}],[\"使每个生成的\",{\"1\":{\"0\":1}}],[\"项目\",{\"0\":{\"3\":1}}],[\"项目地址\",{\"0\":{\"1\":1},\"1\":{\"1\":1}}],[\"创建者模式对比\",{\"0\":{\"238\":1}}],[\"创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式\",{\"1\":{\"236\":1}}],[\"创建的对象较复杂\",{\"1\":{\"236\":1}}],[\"创建共享单车案例\",{\"0\":{\"236\":1}}],[\"创建对象出入流对象\",{\"1\":{\"234\":1}}],[\"创建对象输出流对象\",{\"1\":{\"234\":1}}],[\"创建一个新对象\",{\"1\":{\"233\":2}}],[\"创建一个读卡器\",{\"1\":{\"83\":1}}],[\"创建型模式\",{\"0\":{\"221\":1},\"1\":{\"221\":1}}],[\"创建容器\",{\"0\":{\"196\":1}}],[\"创建spring容器对象\",{\"1\":{\"188\":1}}],[\"创建不同的具体访问者角色\",{\"1\":{\"170\":1}}],[\"创建抽象访问者接口\",{\"1\":{\"170\":1}}],[\"创建警察对象\",{\"1\":{\"153\":1}}],[\"创建小偷对象\",{\"1\":{\"153\":1}}],[\"创建微信用户\",{\"1\":{\"150\":1}}],[\"创建处理链\",{\"1\":{\"137\":1}}],[\"创建调用者\",{\"1\":{\"131\":1}}],[\"创建接收者\",{\"1\":{\"131\":1}}],[\"创建2个order\",{\"1\":{\"131\":1}}],[\"创建外观对象\",{\"1\":{\"98\":1}}],[\"创建filewriter对象\",{\"1\":{\"88\":1}}],[\"创建bufferedwriter对象\",{\"1\":{\"88\":1}}],[\"创建适配器对象\",{\"1\":{\"84\":1}}],[\"创建代理工厂对象\",{\"1\":{\"76\":1}}],[\"创建代理对象\",{\"1\":{\"76\":1}}],[\"创建代码生成工具类\",{\"0\":{\"6\":1}}],[\"创建主体\",{\"1\":{\"63\":1}}],[\"创建普通主体\",{\"0\":{\"62\":1}}],[\"创建管理员主体\",{\"0\":{\"60\":1}}],[\"创建compose\",{\"1\":{\"43\":1}}],[\"创建hadoop\",{\"1\":{\"43\":1}}],[\"创建文件夹赋予权限\",{\"1\":{\"32\":1}}],[\"创建虚拟机\",{\"0\":{\"22\":1}}],[\"创建公共的\",{\"0\":{\"9\":1}}],[\"创建时间\",{\"1\":{\"5\":1}}],[\"创建\",{\"0\":{\"3\":1},\"1\":{\"76\":1,\"212\":2}}],[\"1995\",{\"1\":{\"243\":1}}],[\"1990\",{\"1\":{\"243\":1}}],[\"1977\",{\"1\":{\"243\":1}}],[\"19888\",{\"1\":{\"40\":1,\"42\":2,\"43\":3}}],[\"1300\",{\"1\":{\"189\":1}}],[\"1+3\",{\"1\":{\"183\":1}}],[\"1+2+3\",{\"1\":{\"183\":1}}],[\"1+2+3+4+5\",{\"1\":{\"183\":1}}],[\"18\",{\"1\":{\"120\":1}}],[\"11\",{\"0\":{\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1},\"1\":{\"113\":1,\"246\":1}}],[\"128\",{\"1\":{\"113\":8}}],[\"127\",{\"1\":{\"113\":10}}],[\"12\",{\"1\":{\"86\":1,\"127\":2}}],[\"123\",{\"1\":{\"6\":1,\"14\":1,\"32\":1}}],[\"10\",{\"0\":{\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1},\"1\":{\"86\":1}}],[\"10000\",{\"1\":{\"38\":1,\"40\":1,\"42\":2,\"43\":3}}],[\"100\",{\"1\":{\"5\":1,\"131\":1,\"178\":3,\"179\":3}}],[\"15s\",{\"1\":{\"49\":3}}],[\"1s\",{\"1\":{\"49\":1}}],[\"1\",{\"0\":{\"3\":1,\"10\":1,\"23\":1,\"24\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"41\":1,\"42\":2,\"43\":1,\"45\":1,\"55\":1,\"57\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"81\":1,\"91\":1,\"96\":1,\"102\":1,\"109\":1,\"114\":1,\"115\":2,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"122\":1,\"129\":1,\"136\":1,\"142\":1,\"148\":1,\"155\":1,\"161\":1,\"168\":1,\"175\":1,\"178\":1,\"183\":1,\"188\":1,\"190\":2,\"192\":1,\"198\":1,\"199\":2,\"200\":1,\"201\":1,\"203\":1,\"206\":1,\"209\":1,\"214\":1,\"222\":1,\"223\":2,\"224\":1,\"225\":1,\"227\":1,\"233\":1,\"236\":1,\"239\":1,\"246\":1,\"248\":1,\"251\":1,\"256\":1},\"1\":{\"5\":1,\"7\":1,\"33\":2,\"39\":2,\"42\":1,\"43\":10,\"46\":2,\"47\":4,\"49\":3,\"58\":1,\"81\":1,\"86\":2,\"104\":2,\"112\":1,\"113\":3,\"120\":4,\"125\":1,\"127\":7,\"131\":4,\"132\":1,\"138\":2,\"139\":1,\"142\":1,\"145\":1,\"151\":1,\"153\":1,\"155\":1,\"158\":1,\"164\":1,\"166\":2,\"171\":1,\"173\":1,\"180\":1,\"185\":2,\"186\":1,\"188\":1,\"197\":1,\"204\":1}}],[\"17+\",{\"1\":{\"2\":1}}],[\"gof\",{\"1\":{\"243\":1,\"246\":3}}],[\"gang\",{\"1\":{\"243\":1}}],[\"gamerole\",{\"1\":{\"178\":11,\"179\":15}}],[\"garnish\",{\"1\":{\"86\":4}}],[\"gz\",{\"1\":{\"33\":1,\"46\":3,\"47\":3}}],[\"groupleader\",{\"1\":{\"138\":7}}],[\"group\",{\"1\":{\"134\":2}}],[\"groupid>\",{\"1\":{\"4\":3,\"7\":1,\"16\":1,\"76\":1}}],[\"grep\",{\"1\":{\"32\":3}}],[\"globalexceptionhandler\",{\"1\":{\"12\":1}}],[\"globalconfig\",{\"1\":{\"6\":2,\"14\":2}}],[\"generalmanager\",{\"1\":{\"138\":6}}],[\"generator<\",{\"1\":{\"4\":1}}],[\"generator\",{\"1\":{\"2\":1,\"6\":3,\"14\":2,\"17\":1}}],[\"getid\",{\"1\":{\"201\":1}}],[\"getinstance\",{\"1\":{\"111\":1,\"224\":1,\"231\":2}}],[\"getinterfaces\",{\"1\":{\"75\":2}}],[\"getaliases\",{\"1\":{\"192\":1}}],[\"getatk\",{\"1\":{\"178\":3,\"179\":3}}],[\"gettype\",{\"1\":{\"192\":1}}],[\"gettenant\",{\"1\":{\"157\":1}}],[\"getter\",{\"1\":{\"10\":1}}],[\"getvalue\",{\"1\":{\"185\":2,\"199\":1,\"200\":1,\"212\":1}}],[\"getvit\",{\"1\":{\"178\":3,\"179\":3}}],[\"getrootelement\",{\"1\":{\"207\":1}}],[\"getrolestatememento\",{\"1\":{\"178\":2}}],[\"getresourceasstream\",{\"1\":{\"207\":1}}],[\"getresourceloader\",{\"1\":{\"194\":1}}],[\"getref\",{\"1\":{\"199\":1,\"200\":1,\"212\":1}}],[\"getregistry\",{\"1\":{\"194\":1,\"206\":1,\"207\":1,\"211\":1,\"212\":1}}],[\"getreasonphrase\",{\"1\":{\"10\":1}}],[\"gethouseowner\",{\"1\":{\"157\":1}}],[\"getliftstate\",{\"1\":{\"144\":5}}],[\"getlist\",{\"1\":{\"13\":1}}],[\"getnum\",{\"1\":{\"138\":6}}],[\"getname\",{\"1\":{\"104\":2,\"138\":4,\"153\":3,\"199\":1,\"200\":4,\"212\":2}}],[\"getfooddic\",{\"1\":{\"131\":7}}],[\"getfastfood\",{\"1\":{\"86\":5}}],[\"getdef\",{\"1\":{\"178\":3,\"179\":3}}],[\"getdesc\",{\"1\":{\"86\":10}}],[\"getdiningtable\",{\"1\":{\"131\":3}}],[\"getstu\",{\"1\":{\"234\":1}}],[\"getstudentiterator\",{\"1\":{\"163\":2}}],[\"getsettermethodnamebyfieldname\",{\"1\":{\"212\":2}}],[\"getsavedproperty\",{\"1\":{\"113\":1}}],[\"getshape\",{\"1\":{\"111\":5}}],[\"getbeandefinitioncount\",{\"1\":{\"195\":1,\"203\":1,\"204\":1}}],[\"getbeandefinitionnames\",{\"1\":{\"195\":1,\"203\":1,\"204\":1,\"211\":1}}],[\"getbeandefinition\",{\"1\":{\"195\":1,\"203\":1,\"204\":1,\"211\":1,\"212\":1}}],[\"getbeannamegenerator\",{\"1\":{\"194\":1}}],[\"getbeanclassloader\",{\"1\":{\"194\":1}}],[\"getbeanprovider\",{\"1\":{\"192\":2}}],[\"getbean\",{\"1\":{\"188\":1,\"192\":5,\"209\":2,\"211\":2,\"212\":5,\"214\":2}}],[\"getbox\",{\"1\":{\"111\":1}}],[\"getbyid\",{\"1\":{\"13\":2}}],[\"getprice\",{\"1\":{\"86\":7}}],[\"getproxyobject\",{\"1\":{\"75\":4,\"76\":2}}],[\"getpropertyvalue\",{\"1\":{\"200\":2}}],[\"getpropertyvalues\",{\"1\":{\"200\":1,\"201\":1,\"212\":1}}],[\"getproperty\",{\"1\":{\"6\":1,\"14\":1}}],[\"getcontent\",{\"1\":{\"138\":4}}],[\"getcolumntype\",{\"1\":{\"6\":1,\"14\":1}}],[\"getchild\",{\"1\":{\"104\":3,\"105\":1}}],[\"getclassname\",{\"1\":{\"201\":1,\"212\":1}}],[\"getclassloader\",{\"1\":{\"75\":2,\"207\":1}}],[\"getclass\",{\"1\":{\"75\":4,\"76\":1,\"207\":1}}],[\"get\",{\"1\":{\"16\":1,\"104\":1,\"111\":1,\"131\":2,\"140\":1,\"163\":1,\"185\":1,\"200\":1,\"204\":1,\"212\":2}}],[\"getmemento\",{\"1\":{\"179\":2}}],[\"getmethods\",{\"1\":{\"212\":1}}],[\"getmethod\",{\"1\":{\"75\":5,\"212\":1}}],[\"getmessage\",{\"1\":{\"10\":2,\"75\":2,\"157\":4}}],[\"getmapping\",{\"1\":{\"13\":3}}],[\"getjdbctype\",{\"1\":{\"6\":1,\"14\":1}}],[\"gitee\",{\"1\":{\"1\":1,\"86\":1}}],[\"6条原则\",{\"1\":{\"255\":1}}],[\"64\",{\"1\":{\"195\":1}}],[\"60\",{\"1\":{\"98\":1}}],[\"6<\",{\"1\":{\"4\":2}}],[\"6\",{\"0\":{\"16\":1,\"50\":1,\"62\":1,\"77\":1,\"86\":1,\"89\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":2,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":2,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":2,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":2,\"148\":2,\"149\":2,\"150\":2,\"151\":2,\"152\":2,\"153\":3,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"261\":1},\"1\":{\"2\":2,\"4\":1,\"5\":1,\"77\":3}}],[\"5v\",{\"1\":{\"81\":1}}],[\"597879949\",{\"1\":{\"47\":1}}],[\"5\",{\"0\":{\"8\":1,\"15\":1,\"28\":1,\"49\":1,\"61\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":2,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":2,\"96\":2,\"97\":2,\"98\":2,\"99\":2,\"100\":3,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":1,\"120\":1,\"126\":1,\"133\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":2,\"152\":1,\"159\":1,\"165\":1,\"172\":1,\"181\":1,\"187\":1,\"196\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"231\":1,\"238\":1,\"239\":1,\"240\":1,\"260\":1},\"1\":{\"2\":2,\"4\":3,\"5\":1,\"43\":4,\"49\":3,\"86\":4,\"113\":1,\"127\":2,\"138\":1,\"155\":1,\"185\":1,\"246\":1}}],[\"0<\",{\"1\":{\"7\":1}}],[\"0\",{\"1\":{\"2\":1,\"4\":1,\"7\":3,\"11\":1,\"32\":1,\"33\":3,\"39\":1,\"46\":1,\"47\":3,\"75\":4,\"113\":1,\"120\":5,\"127\":8,\"131\":1,\"134\":1,\"138\":1,\"140\":1,\"163\":1,\"178\":3,\"179\":3,\"183\":1,\"188\":1,\"197\":1,\"200\":2}}],[\"23\",{\"1\":{\"243\":1}}],[\"253\",{\"1\":{\"243\":1}}],[\"256\",{\"1\":{\"195\":1}}],[\"255\",{\"1\":{\"5\":1}}],[\"27\",{\"1\":{\"120\":1}}],[\"20\",{\"1\":{\"189\":1}}],[\"202404082129492\",{\"1\":{\"86\":1}}],[\"2001\",{\"1\":{\"188\":1}}],[\"200\",{\"1\":{\"10\":2}}],[\"220v\",{\"1\":{\"81\":1}}],[\"2<\",{\"1\":{\"76\":1}}],[\"24h\",{\"1\":{\"58\":1}}],[\"2>\",{\"1\":{\"49\":3}}],[\"2nn\",{\"1\":{\"47\":1}}],[\"212\",{\"1\":{\"47\":1}}],[\"2s\",{\"1\":{\"43\":4}}],[\"2g\",{\"1\":{\"38\":1}}],[\"2\",{\"0\":{\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"11\":1,\"25\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":2,\"33\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":2,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"56\":1,\"57\":1,\"58\":2,\"73\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"92\":1,\"97\":1,\"103\":1,\"110\":1,\"116\":1,\"121\":1,\"122\":1,\"123\":2,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"130\":1,\"137\":1,\"143\":1,\"149\":1,\"156\":1,\"162\":1,\"169\":1,\"176\":1,\"179\":1,\"184\":1,\"189\":1,\"193\":1,\"200\":1,\"202\":1,\"203\":1,\"204\":2,\"207\":1,\"210\":1,\"215\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":2,\"229\":1,\"230\":1,\"231\":1,\"234\":1,\"237\":1,\"240\":1,\"247\":1,\"248\":1,\"249\":2,\"252\":1,\"257\":1},\"1\":{\"2\":1,\"4\":1,\"5\":1,\"7\":1,\"76\":1,\"81\":1,\"86\":2,\"112\":1,\"125\":1,\"127\":5,\"131\":1,\"132\":1,\"139\":1,\"142\":1,\"145\":1,\"151\":1,\"153\":1,\"155\":1,\"158\":1,\"164\":1,\"171\":1,\"173\":1,\"180\":1,\"183\":1,\"185\":1,\"186\":1}}],[\"3天的请假\",{\"1\":{\"138\":1}}],[\"30s\",{\"1\":{\"43\":4}}],[\"361\",{\"1\":{\"33\":1}}],[\"3306\",{\"1\":{\"6\":1,\"8\":1,\"14\":1}}],[\"3\",{\"0\":{\"6\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"13\":1,\"26\":1,\"33\":1,\"34\":1,\"47\":1,\"51\":1,\"59\":1,\"74\":1,\"83\":1,\"87\":1,\"88\":1,\"89\":1,\"93\":1,\"98\":1,\"104\":1,\"111\":1,\"117\":1,\"118\":1,\"124\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":2,\"132\":1,\"133\":1,\"134\":1,\"138\":1,\"144\":1,\"150\":1,\"157\":1,\"163\":1,\"170\":1,\"177\":1,\"178\":1,\"179\":1,\"185\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":2,\"195\":1,\"196\":1,\"201\":1,\"205\":1,\"206\":1,\"207\":1,\"211\":1,\"216\":1,\"225\":1,\"229\":1,\"232\":1,\"233\":1,\"234\":1,\"250\":1,\"251\":1,\"252\":1,\"258\":1},\"1\":{\"2\":3,\"4\":2,\"5\":1,\"7\":1,\"15\":9,\"39\":6,\"42\":2,\"43\":17,\"46\":6,\"47\":12,\"86\":5,\"112\":1,\"127\":2,\"131\":1,\"138\":3,\"142\":1,\"153\":1,\"173\":1,\"185\":1,\"251\":1}}],[\"版本为\",{\"1\":{\"4\":1}}],[\"版本\",{\"1\":{\"2\":1,\"39\":1}}],[\"版本信息\",{\"0\":{\"2\":1,\"39\":1}}],[\"依赖倒转原则\",{\"0\":{\"258\":1},\"1\":{\"258\":2}}],[\"依赖解决问题\",{\"1\":{\"6\":1}}],[\"依赖\",{\"1\":{\"2\":1}}],[\"square\",{\"1\":{\"257\":2}}],[\"switch\",{\"1\":{\"142\":5}}],[\"swapoff\",{\"1\":{\"32\":1}}],[\"swap\",{\"1\":{\"32\":1}}],[\"swagger\",{\"1\":{\"6\":1,\"17\":2}}],[\"syntax\",{\"1\":{\"183\":1}}],[\"synchronized\",{\"1\":{\"134\":1,\"224\":1}}],[\"systemctl\",{\"1\":{\"32\":4,\"45\":2,\"61\":4}}],[\"system\",{\"1\":{\"6\":1,\"14\":1,\"74\":2,\"75\":3,\"76\":2,\"83\":7,\"84\":5,\"86\":5,\"93\":2,\"97\":1,\"98\":9,\"104\":4,\"111\":1,\"113\":4,\"117\":7,\"124\":3,\"127\":1,\"131\":4,\"138\":7,\"140\":4,\"142\":7,\"144\":4,\"150\":1,\"153\":2,\"157\":2,\"166\":1,\"170\":6,\"173\":9,\"178\":6,\"179\":6,\"185\":1,\"188\":2,\"231\":1,\"234\":1}}],[\"small\",{\"1\":{\"127\":1}}],[\"smallint\",{\"1\":{\"6\":1,\"14\":1}}],[\"smartappliancesfacade\",{\"1\":{\"98\":4}}],[\"sdadaptertf\",{\"1\":{\"83\":3,\"84\":5}}],[\"sd兼容tf\",{\"1\":{\"83\":1,\"84\":1}}],[\"sd卡实现类\",{\"1\":{\"83\":1}}],[\"sd卡的接口\",{\"1\":{\"83\":1}}],[\"sdcardimpl\",{\"1\":{\"83\":2,\"84\":1}}],[\"sdcard\",{\"1\":{\"83\":10,\"84\":4}}],[\"sd\",{\"1\":{\"83\":5,\"86\":3}}],[\"snippets\",{\"1\":{\"58\":1}}],[\"safetydoor\",{\"1\":{\"259\":1}}],[\"safemode\",{\"1\":{\"49\":1}}],[\"saxreader\",{\"1\":{\"207\":2}}],[\"salesmanshow\",{\"1\":{\"124\":1}}],[\"salesman\",{\"1\":{\"124\":2}}],[\"say\",{\"1\":{\"98\":3}}],[\"savestate\",{\"1\":{\"178\":2,\"179\":2}}],[\"saveorupdate\",{\"1\":{\"13\":2}}],[\"save\",{\"1\":{\"13\":3,\"16\":1}}],[\"sleep\",{\"1\":{\"49\":1,\"131\":1}}],[\"sfv\",{\"1\":{\"47\":1}}],[\"spi\",{\"1\":{\"230\":1}}],[\"spel\",{\"1\":{\"189\":1}}],[\"spark\",{\"1\":{\"38\":1,\"39\":2,\"46\":5,\"47\":3,\"49\":11}}],[\"springioc\",{\"0\":{\"197\":1},\"1\":{\"216\":1}}],[\"springframework\",{\"1\":{\"188\":6}}],[\"springframework<\",{\"1\":{\"16\":1}}],[\"springapplication\",{\"1\":{\"7\":1,\"16\":1}}],[\"springdoc<\",{\"1\":{\"7\":1}}],[\"springdoc\",{\"0\":{\"7\":1},\"1\":{\"7\":2}}],[\"spring\",{\"0\":{\"188\":1,\"189\":1,\"191\":1,\"213\":1,\"216\":1},\"1\":{\"4\":2,\"8\":4,\"16\":1,\"188\":9,\"189\":14,\"190\":9,\"192\":4,\"193\":2,\"194\":2,\"197\":1,\"201\":1,\"214\":3,\"216\":4}}],[\"springbootapplication\",{\"1\":{\"7\":1,\"16\":1}}],[\"springboot3\",{\"1\":{\"4\":1}}],[\"springboot\",{\"0\":{\"3\":1},\"1\":{\"0\":1,\"2\":1,\"3\":2,\"4\":2},\"2\":{\"19\":1}}],[\"springboot项目构建\",{\"0\":{\"0\":1}}],[\"someone\",{\"1\":{\"170\":5}}],[\"sorted\",{\"1\":{\"127\":1}}],[\"sort\",{\"1\":{\"127\":11}}],[\"source\",{\"1\":{\"33\":1}}],[\"software\",{\"1\":{\"32\":1,\"244\":1}}],[\"show\",{\"1\":{\"124\":5,\"234\":2}}],[\"sha1\",{\"1\":{\"57\":2}}],[\"share\",{\"1\":{\"47\":1,\"57\":1}}],[\"shanghai\",{\"1\":{\"32\":2,\"47\":2}}],[\"shell\",{\"1\":{\"43\":4}}],[\"sh\",{\"1\":{\"33\":1,\"46\":2,\"47\":3,\"49\":8}}],[\"s\",{\"1\":{\"32\":2,\"43\":4,\"49\":3,\"59\":1}}],[\"ssh\",{\"0\":{\"31\":1}}],[\"sservice\",{\"1\":{\"6\":1,\"14\":1}}],[\"simplecoffeefactory\",{\"1\":{\"227\":3}}],[\"simplebeandefinitionregistry\",{\"0\":{\"204\":1},\"1\":{\"195\":1,\"204\":1,\"207\":1}}],[\"singleton\",{\"1\":{\"222\":1,\"224\":7}}],[\"singletonobjects\",{\"1\":{\"211\":1,\"212\":3}}],[\"singletonholder\",{\"1\":{\"111\":2}}],[\"singletonmap\",{\"1\":{\"6\":1,\"14\":1}}],[\"single\",{\"1\":{\"49\":1}}],[\"site\",{\"1\":{\"46\":5,\"49\":10}}],[\"size\",{\"1\":{\"13\":4,\"113\":1,\"127\":1,\"131\":1,\"140\":1,\"163\":1,\"166\":2,\"200\":1,\"204\":1}}],[\"sum\",{\"1\":{\"183\":3}}],[\"summary\",{\"1\":{\"13\":7}}],[\"subscriptionsubject\",{\"1\":{\"150\":3}}],[\"subscribe\",{\"1\":{\"148\":1}}],[\"submit\",{\"1\":{\"138\":3}}],[\"sub\",{\"1\":{\"97\":1}}],[\"subject\",{\"1\":{\"73\":2,\"149\":1,\"150\":2}}],[\"sun\",{\"1\":{\"75\":1,\"86\":4,\"113\":1}}],[\"support\",{\"1\":{\"189\":1}}],[\"supported\",{\"1\":{\"57\":1}}],[\"super\",{\"1\":{\"75\":2,\"86\":7,\"93\":2,\"127\":3,\"138\":3,\"144\":16,\"153\":2,\"157\":2}}],[\"superclass\",{\"1\":{\"14\":1}}],[\"sudo\",{\"1\":{\"33\":1,\"45\":4}}],[\"sudoers\",{\"1\":{\"32\":1}}],[\"sudo就是使用root身份执行命令\",{\"1\":{\"32\":1}}],[\"success\",{\"1\":{\"10\":1}}],[\"secondfilter\",{\"1\":{\"140\":2}}],[\"secondarynamenode\",{\"1\":{\"49\":3}}],[\"seven\",{\"1\":{\"138\":3}}],[\"seniorchef\",{\"1\":{\"131\":5}}],[\"se\",{\"1\":{\"86\":1}}],[\"serializable\",{\"1\":{\"75\":1,\"166\":1,\"234\":1}}],[\"servlet\",{\"1\":{\"100\":2}}],[\"servletrequest\",{\"1\":{\"100\":4}}],[\"server服务地址\",{\"1\":{\"58\":1}}],[\"server\",{\"0\":{\"57\":1,\"58\":1,\"61\":1},\"1\":{\"12\":1,\"40\":1,\"49\":3,\"54\":1,\"55\":1,\"58\":2,\"63\":1}}],[\"services\",{\"1\":{\"43\":1}}],[\"servicebuilder\",{\"1\":{\"6\":1,\"14\":1}}],[\"serviceimpl\",{\"1\":{\"6\":1,\"14\":1}}],[\"service\",{\"1\":{\"0\":1,\"6\":3,\"13\":11,\"14\":3,\"16\":2,\"43\":5,\"49\":2,\"100\":1,\"188\":1,\"190\":1,\"197\":1}}],[\"sell\",{\"1\":{\"74\":6,\"75\":12,\"76\":2}}],[\"selltickets\",{\"1\":{\"74\":3,\"75\":20,\"76\":1}}],[\"selinux\",{\"1\":{\"32\":1}}],[\"select\",{\"1\":{\"16\":1}}],[\"sed\",{\"1\":{\"32\":2}}],[\"setid\",{\"1\":{\"201\":1,\"207\":1}}],[\"setvalue\",{\"1\":{\"199\":1}}],[\"setvit\",{\"1\":{\"178\":2,\"179\":2}}],[\"setuserdao\",{\"1\":{\"188\":1}}],[\"setmemento\",{\"1\":{\"179\":2}}],[\"setref\",{\"1\":{\"199\":1}}],[\"setreadonly\",{\"1\":{\"16\":1}}],[\"setrolestatememento\",{\"1\":{\"178\":2}}],[\"setatk\",{\"1\":{\"178\":2,\"179\":2}}],[\"settenant\",{\"1\":{\"157\":2}}],[\"setter\",{\"1\":{\"10\":1}}],[\"sethouseowner\",{\"1\":{\"157\":2}}],[\"setname\",{\"1\":{\"153\":2,\"199\":1,\"234\":1}}],[\"setnexthandler\",{\"1\":{\"138\":3}}],[\"setliftstate\",{\"1\":{\"144\":10}}],[\"setstu\",{\"1\":{\"234\":1}}],[\"setstate\",{\"1\":{\"142\":10}}],[\"setsuperclass\",{\"1\":{\"76\":1}}],[\"setclassname\",{\"1\":{\"201\":1,\"207\":1}}],[\"setchanged\",{\"1\":{\"153\":1}}],[\"setchange\",{\"1\":{\"153\":1}}],[\"setcontext\",{\"1\":{\"144\":2}}],[\"setcommand\",{\"1\":{\"131\":3}}],[\"setcallback\",{\"1\":{\"76\":1}}],[\"setfooddic\",{\"1\":{\"131\":1}}],[\"setfastfood\",{\"1\":{\"86\":1}}],[\"setdef\",{\"1\":{\"178\":2,\"179\":2}}],[\"setdesc\",{\"1\":{\"86\":1}}],[\"setdiningtable\",{\"1\":{\"131\":3}}],[\"set<string>\",{\"1\":{\"131\":1}}],[\"setpropertyvalues\",{\"1\":{\"201\":1,\"207\":1}}],[\"setpropagationbehavior\",{\"1\":{\"16\":2}}],[\"setprice\",{\"1\":{\"86\":1}}],[\"set\",{\"1\":{\"32\":2,\"49\":1,\"200\":1}}],[\"setenforce\",{\"1\":{\"32\":1}}],[\"setexpression\",{\"1\":{\"16\":1}}],[\"scope\",{\"1\":{\"193\":1}}],[\"scope>\",{\"1\":{\"4\":2}}],[\"schemalocation=\",{\"1\":{\"188\":1}}],[\"schematool\",{\"1\":{\"49\":1}}],[\"schema\",{\"1\":{\"10\":5,\"188\":6}}],[\"scan\",{\"1\":{\"7\":1}}],[\"src\",{\"1\":{\"6\":2,\"14\":2}}],[\"stu和stu1是同一个对象\",{\"1\":{\"234\":1}}],[\"stu1\",{\"1\":{\"234\":5}}],[\"stu\",{\"1\":{\"234\":4}}],[\"studentaggregateimpl\",{\"1\":{\"163\":1}}],[\"studentaggregate\",{\"1\":{\"163\":2}}],[\"student\",{\"1\":{\"163\":13,\"234\":5}}],[\"studentiteratorimpl\",{\"1\":{\"163\":3}}],[\"studentiterator\",{\"1\":{\"163\":4}}],[\"steal\",{\"1\":{\"153\":2}}],[\"stdin\",{\"1\":{\"32\":1}}],[\"stdoutimpl\",{\"1\":{\"8\":1}}],[\"stdout\",{\"1\":{\"8\":1}}],[\"stoppingstate\",{\"1\":{\"144\":6}}],[\"stopping\",{\"1\":{\"142\":8}}],[\"stop\",{\"1\":{\"32\":2,\"142\":3,\"144\":10}}],[\"storey\",{\"1\":{\"6\":1,\"14\":1}}],[\"storey`\",{\"1\":{\"5\":4}}],[\"strangers\",{\"1\":{\"260\":1}}],[\"strategyc\",{\"1\":{\"124\":1}}],[\"strategyconfig\",{\"1\":{\"6\":1,\"14\":1}}],[\"strategyb\",{\"1\":{\"124\":1}}],[\"strategya\",{\"1\":{\"124\":1}}],[\"strategy\",{\"1\":{\"123\":2,\"124\":12}}],[\"structure\",{\"1\":{\"169\":1}}],[\"streamdecoder\",{\"1\":{\"86\":5}}],[\"strictupdatefill\",{\"1\":{\"15\":1}}],[\"strictinsertfill\",{\"1\":{\"15\":2}}],[\"stringutils\",{\"1\":{\"212\":2}}],[\"stringbuilder\",{\"1\":{\"113\":2}}],[\"string\",{\"1\":{\"6\":2,\"7\":1,\"10\":1,\"14\":2,\"16\":2,\"74\":1,\"75\":4,\"76\":1,\"83\":14,\"84\":3,\"86\":8,\"88\":1,\"93\":7,\"98\":2,\"104\":4,\"111\":6,\"113\":7,\"117\":1,\"127\":1,\"131\":4,\"134\":1,\"138\":7,\"140\":1,\"142\":1,\"144\":1,\"150\":7,\"153\":9,\"157\":11,\"170\":1,\"173\":3,\"178\":1,\"179\":1,\"185\":7,\"188\":1,\"192\":12,\"194\":2,\"195\":6,\"199\":12,\"200\":2,\"201\":6,\"203\":5,\"204\":6,\"206\":1,\"207\":6,\"209\":2,\"211\":3,\"212\":10,\"231\":2,\"234\":1,\"251\":2}}],[\"statedisplay\",{\"1\":{\"178\":4,\"179\":4}}],[\"state\",{\"1\":{\"142\":37,\"143\":2}}],[\"station\",{\"1\":{\"74\":2,\"75\":8}}],[\"static\",{\"1\":{\"6\":2,\"7\":1,\"10\":5,\"14\":2,\"16\":2,\"74\":1,\"75\":9,\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"98\":1,\"111\":4,\"113\":8,\"117\":1,\"127\":4,\"131\":1,\"134\":1,\"138\":4,\"140\":1,\"142\":5,\"144\":5,\"150\":1,\"153\":1,\"157\":1,\"170\":1,\"173\":4,\"178\":1,\"179\":1,\"183\":3,\"185\":1,\"188\":1,\"224\":2,\"231\":1,\"234\":1}}],[\"status\",{\"1\":{\"13\":8}}],[\"standardexception\",{\"1\":{\"11\":2}}],[\"start0\",{\"1\":{\"134\":3}}],[\"started\",{\"1\":{\"134\":3}}],[\"starter<\",{\"1\":{\"4\":1}}],[\"starter\",{\"1\":{\"4\":1,\"7\":1}}],[\"starting\",{\"1\":{\"49\":7}}],[\"start\",{\"1\":{\"7\":1,\"49\":24,\"61\":2,\"134\":3}}],[\"mbike\",{\"1\":{\"236\":1}}],[\"mobikebuilder\",{\"1\":{\"236\":1}}],[\"modcount\",{\"1\":{\"166\":1}}],[\"module\",{\"1\":{\"32\":1,\"33\":3}}],[\"modeling\",{\"1\":{\"247\":1}}],[\"mode\",{\"1\":{\"16\":1,\"43\":2}}],[\"modify\",{\"1\":{\"16\":1}}],[\"modified\",{\"1\":{\"12\":1}}],[\"mutablepropertyvalues\",{\"0\":{\"200\":1},\"1\":{\"200\":5,\"201\":4,\"207\":5,\"212\":1,\"214\":1}}],[\"must\",{\"1\":{\"113\":1}}],[\"msubscriptionsubject\",{\"1\":{\"150\":4}}],[\"msubscriptionsubject=new\",{\"1\":{\"150\":1}}],[\"msg\",{\"1\":{\"83\":16,\"84\":2}}],[\"m0\",{\"1\":{\"75\":3}}],[\"m3\",{\"1\":{\"75\":6}}],[\"m2\",{\"1\":{\"75\":3}}],[\"m1\",{\"1\":{\"75\":3}}],[\"md5\",{\"1\":{\"57\":1}}],[\"mr\",{\"1\":{\"43\":1,\"47\":3,\"49\":2}}],[\"mv\",{\"1\":{\"33\":1}}],[\"mvnrepository\",{\"1\":{\"4\":2}}],[\"mkdir\",{\"1\":{\"32\":2,\"43\":1,\"45\":1,\"47\":3,\"49\":2}}],[\"minus\",{\"1\":{\"183\":4,\"185\":3}}],[\"mini\",{\"1\":{\"127\":1}}],[\"min\",{\"1\":{\"113\":1,\"127\":1}}],[\"misc\",{\"1\":{\"113\":1}}],[\"mirror\",{\"1\":{\"45\":1}}],[\"mirrors\",{\"1\":{\"32\":1,\"45\":2}}],[\"mid\",{\"1\":{\"5\":1}}],[\"memento\",{\"1\":{\"176\":1,\"179\":17}}],[\"mediatorstructure\",{\"1\":{\"157\":3}}],[\"mediator\",{\"1\":{\"156\":1,\"157\":21}}],[\"merge\",{\"1\":{\"127\":1}}],[\"merges\",{\"1\":{\"127\":1}}],[\"menuitem\",{\"1\":{\"104\":5}}],[\"menu\",{\"1\":{\"104\":6,\"105\":1}}],[\"menucomponentlist\",{\"1\":{\"104\":6}}],[\"menucomponent\",{\"1\":{\"104\":19,\"105\":1}}],[\"method2\",{\"1\":{\"251\":1}}],[\"method1\",{\"1\":{\"251\":1}}],[\"methods\",{\"1\":{\"212\":2}}],[\"methodname\",{\"1\":{\"212\":4}}],[\"method等\",{\"1\":{\"193\":1}}],[\"methodproxy\",{\"1\":{\"76\":4}}],[\"methodinterceptor\",{\"1\":{\"76\":1}}],[\"method\",{\"1\":{\"75\":14,\"76\":5,\"116\":4,\"193\":1,\"212\":8,\"251\":2}}],[\"metastore\",{\"1\":{\"40\":1,\"47\":2,\"49\":3}}],[\"metaobject\",{\"1\":{\"15\":7}}],[\"metaobjecthandler\",{\"1\":{\"15\":1}}],[\"metatoolappapplication\",{\"1\":{\"7\":2,\"16\":2}}],[\"metainfo\",{\"1\":{\"6\":3,\"14\":3}}],[\"meta\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"14\":1}}],[\"message\",{\"1\":{\"10\":1,\"98\":3,\"150\":6,\"157\":12}}],[\"makefood\",{\"1\":{\"131\":2}}],[\"makecache\",{\"1\":{\"32\":1,\"45\":1}}],[\"maximum\",{\"1\":{\"113\":1}}],[\"max\",{\"1\":{\"113\":3}}],[\"math\",{\"1\":{\"113\":2}}],[\"mac版本\",{\"1\":{\"93\":1}}],[\"mac\",{\"1\":{\"93\":3}}],[\"may\",{\"1\":{\"58\":1}}],[\"master\",{\"1\":{\"57\":1,\"59\":2,\"60\":2,\"86\":1}}],[\"map<variable\",{\"1\":{\"185\":1}}],[\"map<string\",{\"1\":{\"131\":2,\"195\":2,\"204\":1,\"211\":1}}],[\"map\",{\"1\":{\"111\":6,\"173\":4,\"185\":3,\"204\":1,\"211\":1}}],[\"mapred\",{\"1\":{\"46\":1,\"47\":1,\"49\":3}}],[\"mapperscan\",{\"1\":{\"7\":1,\"16\":1}}],[\"mapperbuilder\",{\"1\":{\"6\":1,\"14\":1}}],[\"mapper\",{\"1\":{\"0\":1,\"6\":3,\"7\":2,\"14\":3,\"16\":1}}],[\"manager\",{\"1\":{\"45\":1,\"49\":6,\"138\":7}}],[\"maintainer\",{\"1\":{\"47\":1}}],[\"main\",{\"1\":{\"6\":3,\"7\":1,\"14\":3,\"16\":1,\"74\":1,\"75\":2,\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"98\":1,\"113\":2,\"117\":1,\"127\":1,\"131\":1,\"134\":1,\"138\":1,\"140\":1,\"142\":1,\"144\":1,\"150\":1,\"153\":1,\"157\":1,\"170\":1,\"173\":3,\"178\":1,\"179\":1,\"185\":1,\"188\":2,\"231\":1,\"234\":1}}],[\"my\",{\"1\":{\"33\":1}}],[\"mysql\",{\"0\":{\"5\":1},\"1\":{\"2\":1,\"6\":1,\"8\":2,\"14\":1,\"15\":1,\"32\":1,\"38\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"15\":4}}],[\"mybatisplusconfig\",{\"1\":{\"15\":2}}],[\"mybatisgeneratorutil\",{\"1\":{\"6\":2,\"14\":2}}],[\"mybatis\",{\"0\":{\"4\":1,\"15\":1},\"1\":{\"0\":1,\"2\":2,\"4\":6,\"8\":1,\"15\":1}}],[\"☀️\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
